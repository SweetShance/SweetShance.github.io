<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>6.原型模式</title>
    <link href="/2023/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>用于创建重复的对象，同时又能保证性能；简单理解就是一个对象的产生可以不由0起步，直接从一个已经具备一定雏形的对象克隆（节约创建对象所产生的开支），然后再修改为所需对象。<br>类似：python 用的 copy 方法。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>（java结构，通过继承Cloneable 重写clone 实现， python3 可以借助 copy实现）</p><ol><li>抽象原型（Prototype）: 一个接口，负责定义对象复制自身的方法</li><li>具体原型（ConcretePrototype）: 实现Prototype接口的类，具体原型实现抽象原型中的方法，以便所创建的对象调用该方法复制自己。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>类初始化消耗资源过多 : 如果类初始化时消耗过多的资源 , 如这个类中某个成员占用大量内存 , 为了节省开销 ;</li><li>初始化繁琐耗时 : 类对象创建时经过大量的计算 , 或与本地资源 ( 数据库 , 文件 ) 频繁交互 , 每次创建消耗大量的 CPU 与 时间资源 ;</li><li>构造函数复杂 : 类中定义的构造函数复杂 ;</li><li>实例对象数量庞大 : 如果在内存中循环创建了很多该实例对象 , 就可以使用原型模式复用不用的对象 , 用于创建新对象 ;</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>简化了新对象的创建过程，提高了效率</li><li>性能高， 使用原型模式复用的方式创建实例对象 , 比使用构造函数重新创建对象性能要高 ; ( 针对类实例对象开销大的情况 )</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>注意深拷贝浅拷贝</li><li>在修改属性的时候需要注意</li></ol><p class="note note-primary">原型模式可以借助python的copy来实现复制（copy就相当于中间的复制方法，注意其深拷贝(copy.deepcopy)和浅拷贝(copy.copy())）</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li><p>具体类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, authors, price, **rest</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            name: 名字，</span><br><span class="hljs-string">            author: 作者</span><br><span class="hljs-string">            proce: 价格</span><br><span class="hljs-string">            **rest: 其他属性</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.name = name<br>        self.authors = authors<br>        self.price = price<br>        self.__dict__.update(rest)<br><br>    <span class="hljs-comment"># 返回对象信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        mylist = []<br>        ordered = OrderedDict(<span class="hljs-built_in">sorted</span>(self.__dict__.items()))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ordered.keys():<br>            mylist.append(<span class="hljs-string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, ordered[i]))<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;price&#x27;</span>:<br>                mylist.append(<span class="hljs-string">&#x27;$&#x27;</span>)<br>            mylist.append(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(mylist)<br></code></pre></td></tr></table></figure></li><li><p>python简单复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    b1 = Book(name=<span class="hljs-string">&quot;书籍A&quot;</span>, authors=<span class="hljs-string">&quot;A&quot;</span>, price=<span class="hljs-number">10</span>)<br><br>    b2 = copy.deepcopy(b1)<br>    b2.name = <span class="hljs-string">&quot;书籍B&quot;</span><br>    b2.authoe = <span class="hljs-string">&quot;B&quot;</span><br>    b2.price = <span class="hljs-number">15</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (b1, b2):<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;========&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>打印</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">authors: A<br>name: 书籍A<br>price: 10$<br><br>authoe: B<br>authors: A<br>name: 书籍B<br>price: 15$<br></code></pre></td></tr></table></figure></li><li><p>按书中方式复制（扩展）, 实现clone 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prototype</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.objects = <span class="hljs-built_in">dict</span>()    <span class="hljs-comment"># 初始化一个原型列表</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">self, identifier, obj</span>):<br>        <span class="hljs-comment"># 在原型列表中注册原型对象</span><br>        self.objects[identifier] = obj<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unregister</span>(<span class="hljs-params">self, identifier</span>):<br>        <span class="hljs-comment"># 从原型列表中删除原型对象</span><br>        <span class="hljs-keyword">del</span> self.objects[identifier]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">self, identifier, **attr</span>):<br>        <span class="hljs-comment"># 根据 identifier 在原型列表中查找原型对象并克隆</span><br>        found = self.objects.get(identifier)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Incorrect object identifier: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(identifier))<br>        obj = copy.deepcopy(found)<br>        obj.__dict__.update(attr)   <span class="hljs-comment"># 用新的属性值替换原型对象中的对应属性</span><br>        <span class="hljs-keyword">return</span> obj<br></code></pre></td></tr></table></figure></li><li><p>客户复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    b1 = Book(name=<span class="hljs-string">&quot;书籍A&quot;</span>, authors=<span class="hljs-string">&quot;A&quot;</span>, price=<span class="hljs-number">10</span>)<br><br>    prototype = Prototype()<br>    cid = <span class="hljs-string">&#x27;b1&#x27;</span><br>    prototype.register(cid, b1)<br>    b2 = prototype.clone(cid, name=<span class="hljs-string">&quot;书籍B&quot;</span>, authors=<span class="hljs-string">&quot;B&quot;</span>, price=<span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (b1, b2):<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure></li><li><p>打印</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">authors: A<br>name: 书籍A<br>price: 10$<br><br>authors: B<br>name: 书籍B<br>price: 10$<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建造者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.抽象工厂模式</title>
    <link href="/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>在工厂方法中，一个工厂只生产一种产品，抽象工厂可以理解为一个产品族（系列产品、生态）, 例如：小米工厂， 可以生产手机、生产电视、音响。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象工厂， 提供工厂的创建产品接口</li><li>具体工厂, 实现抽象工厂并创建具体产品，同一个产品族的产品由一个工厂创建</li><li>抽象产品，代表的一个大类的产品</li><li>具体产品，对抽象产品的具体化</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>系统中有多个产品族，每个工厂创建一族单属于不同等级的产品，系统一次只能消费某一组的产品，即同族产品一起使用</li></ol><p>例如：在支付的时候，微信支付和支付宝支付应该是两个工厂，其中，微信支付包含，单次扣费，周期扣费，签约，免密，调起支付； 支付宝支付同样。微信支付和支付宝支付分别属于两个产品族。在使用微信支付的时候只会用微信支付的实现方式，在使用支付宝支付的时候只会使用支付宝的实现方式</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>可以在类的内部对产品中相关联的多等级产品共同管理，而不必专门引入新的类来进行管理</li><li>需要产品族时，抽象工厂可以保证客户端始终只使用一个产品的产品组。</li><li>增强了产品的可扩展性，当需要增加一个行的产品族时，不需要修改原代码，满足开闭原则。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度</li></ol><h2 id="代码实现-实现小米工厂"><a href="#代码实现-实现小米工厂" class="headerlink" title="代码实现(实现小米工厂)"></a>代码实现(实现小米工厂)</h2><ol><li><p>抽象工厂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsFactory</span>(metaclass=ABCMeta):<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_phone</span>(<span class="hljs-params">self </span>):<br>        <span class="hljs-comment"># 造手机</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createTV</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 造电视</span><br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>定义抽象产品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsPhone</span>(metaclass=ABCMeta):<br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#手机</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsTV</span>(metaclass=ABCMeta):<br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 电视</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>具体产品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiPhone</span>(<span class="hljs-title class_ inherited__">AbsPhone</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建一个小米手机&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiTV</span>(<span class="hljs-title class_ inherited__">AbsTV</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建一个小米电视&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaPhone</span>(<span class="hljs-title class_ inherited__">AbsPhone</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建一个华为手机&quot;</span>)<br><br><br><span class="hljs-comment"># 具体产品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaTV</span>(<span class="hljs-title class_ inherited__">AbsTV</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建一个华为电视&quot;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>具体工厂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiFactory</span>(<span class="hljs-title class_ inherited__">AbsFactory</span>):<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_phone</span>(<span class="hljs-params">cls</span>):<br>        miphone = MiPhone()<br>        <span class="hljs-keyword">return</span> miphone<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_tv</span>(<span class="hljs-params">cls</span>):<br>        miTV = MiTV()<br>        <span class="hljs-keyword">return</span> miTV<br><br><br><span class="hljs-comment"># 华为工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaFacrory</span>(<span class="hljs-title class_ inherited__">AbsFactory</span>):<br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_phone</span>(<span class="hljs-params">cls</span>):<br>        huaphone = HuaPhone()<br>        <span class="hljs-keyword">return</span> huaphone<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_tv</span>(<span class="hljs-params">cls</span>):<br>        huaTV = HuaTV()<br>        <span class="hljs-keyword">return</span> huaTV<br></code></pre></td></tr></table></figure></li><li><p>客户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    miphone = MiFactory.create_phone()<br>    miphone.show()<br>    miTV = MiFactory.create_tv()<br>    miTV.show()<br><br>    huaPhone = HuaFacrory.create_phone()<br>    huaPhone.show()<br>    huaTV = HuaFacrory.create_tv()<br>    huaTV.show()<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>抽象工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.工厂方法模式</title>
    <link href="/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>创建产品对象定义一个工厂接口，并将实际创建推迟到子类。核心工厂类不在负责产品的创建，于是核心类就变成了一个抽象的工厂角色，只负责具体工厂子类必须实现的接口。进一步抽象的好处是，工厂方法模式可以使系统在不修改特定工厂角色的情况下引入新产品，满足开闭原则。</p><p>通俗点讲： 一个软件公司， 有好多产品线（抽象工厂），然后创建了一个部门（工厂），产品被拆分为很多块的概念（抽象产品），每块由一个程序员来实现（具体产品）一个简单的血汗工厂出来了。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象产品类: 设置产品应有的属性和方法</li><li>具体产品: 实现产品的属性和方法</li><li>抽象工厂： 声明生产产品方法</li><li>具体工厂: 生产具体的产品呢</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>客户指向知道具体二点工厂，不用知道具体怎么建造产品，只关心品牌</p><ol><li>例如电视工厂，有小米电视工厂（只生产小米的电视）， 华为电视工厂（只生产华为的电视）。</li><li>在游戏开发中有很多敌人角色，有坦克、飞机、战船等，只需要将角色创建交给具体的工厂就行，不需要知道角色怎么创建。工厂只需要取下命令建就行具体的交给流水线，不需要工厂管理者知道具体流水线怎么操作。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>用户只需要知道具体工厂的名称就可以，不需要知道具体的创建过程。</li><li>灵活性增强，对于新产品创建只需要多一个工厂类，哪个产品除了问题就找那个具体的创建者就好了（像不像，你们公司要新开一个产品线，直接新建一个产品部门）</li><li>典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他具体实现类。… 哎</li></ol><p>通俗讲：每个人只需要知道自己需要什么就行具体实现不需要自己取了解，例如：客户只需要一个产品，产品只需要一个功能，程序员来实现。（客户不需要知道产品怎么弄，只需要告诉产品我要什么，产品找程序员实现，产品也不需要管你程序员怎么实现，产品找到你跟你说要怎么功能，你就得给我做出来）</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>类的个数容易过多，增加复杂度，产品越来越多，工厂越来越多。</li><li>一个工厂只能生产一种产品，此弊端有抽象工厂解决</li></ol><h2 id="代码实现-应用场景2的实例"><a href="#代码实现-应用场景2的实例" class="headerlink" title="代码实现 应用场景2的实例"></a>代码实现 应用场景2的实例</h2><ol><li><p>抽象产品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsProduct</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>具体产品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AirplaneProduct</span>(<span class="hljs-title class_ inherited__">AbsProduct</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    飞机</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;建造了一个飞机&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TankProduct</span>(<span class="hljs-title class_ inherited__">AbsProduct</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    坦克</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;建造了一个坦克&quot;</span><br><br></code></pre></td></tr></table></figure></li><li><p>抽象工厂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactory</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">newProduct</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>具体工厂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AirplaneFactory</span>(<span class="hljs-title class_ inherited__">AbstractFactory</span>):<br>    <span class="hljs-comment"># 飞机工厂</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">newProduct</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> AirplaneProduct()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TankFactory</span>(<span class="hljs-title class_ inherited__">AbstractFactory</span>):<br>    <span class="hljs-comment"># 坦克工厂</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">newProduct</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> TankProduct()<br><br></code></pre></td></tr></table></figure></li><li><p>客户需求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 我要一个飞机</span><br>airplane_factory = AirplaneFactory()<br>airplane_factory.newProduct()<br>airplane.show()<br><span class="hljs-comment"># 我再要一个坦克</span><br>tank_factory = TankFactory()<br>tank_factory.newProduct()<br>tank.show()<br><br></code></pre></td></tr></table></figure></li></ol><p>考虑： 那接受客户需求分发到具体产品创建这个过程应该用什么好呢？</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工厂方法模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.建造者模式</title>
    <link href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>对于建造者模式，它主要是将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。适用于那些产品对象的内部结构比较复杂。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>产品类：包含组成的各个部件</li><li>抽象建造者：包含创建各个部件的抽象方法的接口，还包含一个返回复杂产品的方法。</li><li>具体建造者： 实现builder接口， 完成复杂产品的各个部件的具体创建方法。</li><li>指挥者： 他调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>模式的应用场景建造者模式区别于工厂模式的是针对复杂对象的创建。也就是说创建简单对象的时候使用工厂模式就行，而创建复杂对象可以考虑建造者模式。当需要创建的产品具备复杂创建过程时，可以抽出共性创建工程，然后交友具体实现类自定义创建流程，使得同样得创建行为可以生产出不同产品，分离了创建与表示，使创建产品的灵活性大大增加。</p><ol><li>相同的方法，不同的执行顺序，产生不同的结果。</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的结果又不相同。</li><li>产品类非常复杂，或者产品类中不同的调用顺序产生不同的作用。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>封装性好，构造和表示分离</li><li>扩展性好，各个具体的构建者相互独立，有利于系统的解耦</li><li>客户端不必知道产品内部组成的细节，建造者可以对创建过程细化，而不对其他模块产生任何影响，便于控制细节风险。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>产品的组成部分必须相同，这限制了其使用范围</li><li>如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大。</li></ol><h2 id="和工厂模式比较"><a href="#和工厂模式比较" class="headerlink" title="和工厂模式比较"></a>和工厂模式比较</h2><p>建造者和工厂模式的关注点不同： 建造者模式注重零部件的组装过程，而工厂方法更注重零部件的创建不关心产品的组成部分，但两者可以结合使用。</p><p class="note note-primary">建造者（Builder）模式在应用过程中可以根据需要改变，如果创建的产品种类只有一种，只需要一个具体建造者，这时可以省略掉抽象建造者，甚至可以省略掉指挥者角色。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p> 计算机由CPU、GPU、内存、硬盘组成</p><ol><li><p>定义产品类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__cpu = <span class="hljs-string">&quot;&quot;</span><br>        self.__gpu = <span class="hljs-string">&quot;&quot;</span><br>        self.__memery = <span class="hljs-string">&quot;&quot;</span><br>        self.__hd = <span class="hljs-string">&quot;&quot;</span><br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setCput</span>(<span class="hljs-params">self, cpu</span>):<br>       self.__cpu = cpu<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getCput</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> self.__cpu<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setGpu</span>(<span class="hljs-params">self, gpu</span>):<br>       self.__gpu = gpu<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getGpu</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> self.__gpu<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setMemery</span>(<span class="hljs-params">self, memery</span>):<br>       self.__memery = memery<br>   <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getMemery</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> self.__memery<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setHd</span>(<span class="hljs-params">self, hd</span>):<br>       self.__hd = hd<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getHd</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> self.__hd<br>   <br>   <span class="hljs-comment"># 返回产品内容</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;computer, [&#123;cpu: %s&#125;, &#123;gpu: %s&#125;, &#123;memery: %s&#125;, &#123;hd: %s&#125;]&quot;</span> %(self.__cpu, self.__gpu, self.__memery, self.__hd)<br></code></pre></td></tr></table></figure></li><li><p>定义抽象建造者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Builders</span>(metaclass=abc.ABCMeta):<br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setCpu</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setGpu</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setMemery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setHd</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod   </span><span class="hljs-comment"># 返回产品对象 </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>具体建造者（具体的创建过程）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 高版本</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HightBuilders</span>(<span class="hljs-title class_ inherited__">Builders</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.computer = Computer()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setCpu</span>(<span class="hljs-params">self</span>):<br>        self.computer.setCpu(<span class="hljs-string">&quot;i7 8750Hk&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setGpu</span>(<span class="hljs-params">self</span>):<br>        self.computer.setGpu(<span class="hljs-string">&quot;RTX2080&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setMemery</span>(<span class="hljs-params">self</span>):<br>        self.computer.setMemery(<span class="hljs-string">&quot;32G&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setHd</span>(<span class="hljs-params">self</span>):<br>        self.computer.setHd(<span class="hljs-string">&quot;512ssd + 2T机械&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.computer<br><br><br><span class="hljs-comment"># 低版本</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LowBuilders</span>(<span class="hljs-title class_ inherited__">Builders</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.computer = Computer()<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setCpu</span>(<span class="hljs-params">self</span>):<br>        self.computer.setCpu(<span class="hljs-string">&quot;i5 7500u&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setGpu</span>(<span class="hljs-params">self</span>):<br>        self.computer.setGpu(<span class="hljs-string">&quot;gtx640mx&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setMemery</span>(<span class="hljs-params">self</span>):<br>        self.computer.setMemery(<span class="hljs-string">&quot;8G&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setHd</span>(<span class="hljs-params">self</span>):<br>        self.computer.setHd(<span class="hljs-string">&quot;1T机械&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.computer<br><br></code></pre></td></tr></table></figure></li><li><p>指挥者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self, cb</span>):<br>        cb.setCpu()<br>        cb.setGpu()<br>        cb.setMemery()<br>        cb.setHd()<br>        <span class="hljs-keyword">return</span> cb.build()<br></code></pre></td></tr></table></figure></li><li><p>客户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    director = Director()<br>    <span class="hljs-comment"># 我需要一个高配置的电脑</span><br>    hightBuilders = HightBuilders()<br>    <span class="hljs-comment"># 指挥者去让建造者建造</span><br>    computer = director.build(hightBuilders)<br>    <span class="hljs-built_in">print</span>(computer)<br>    <span class="hljs-comment"># 我需要一个低配置的电脑</span><br>    lowBuilders = LowBuilders()<br>    computer2 = director.build(lowBuilders)<br>    <span class="hljs-built_in">print</span>(computer2)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建造者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.单例模式</title>
    <link href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个类只有会创建一个实例.</p><p>注意： 一个类只会被创建一次，每次创建的时候，这个对象属性会被刷新。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>需要频繁创建的一些类，使用单例可以降低系统的内存压力（日志对象）</li><li>某类要求只生成一个对象的时候</li><li>某些创建实例时占用资源较多，或实例化耗时较长，且经常使用</li><li>对于一些控制硬件级别的操作，或者从系统上来讲应当是单一控制逻辑的操作，如果有多个实例，则系统会完全乱套。</li><li>当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>单例模式可以保证内存中只有一个实例，减少内存开销</li><li>避免对资源的多重占用</li><li>设置全局访问点，可以优化和共享资源访问</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>单例模式一般没有接口，扩展困难，只能修改原来代码，违背开闭原则。</li><li>在并发测试中，不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。</li><li>单例模式在功能代码通常卸载一个类中，如果功能涉及不合理，很容易违背单一职责原理。</li></ol><h2 id="实现（python）"><a href="#实现（python）" class="headerlink" title="实现（python）"></a>实现（python）</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>在python中使用 import 引入对象使用，则就是单例模式（因为在第一次使用import加载后，会生成 .pyc文件，后面读都只会读这个文件），且这种方式是线程安全的。</p><p>在test1.py中，创建一个类并实例化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>test = Test()<br></code></pre></td></tr></table></figure><p>在test2.py中引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> test1 <span class="hljs-keyword">import</span> test<br></code></pre></td></tr></table></figure><h3 id="方法2-代码实现（线程安全）"><a href="#方法2-代码实现（线程安全）" class="headerlink" title="方法2 代码实现（线程安全）"></a>方法2 代码实现（线程安全）</h3><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 判断 该类中有没有_instance属性</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, <span class="hljs-string">&quot;_instance&quot;</span>):<br>            <span class="hljs-comment"># 没有的话创建,并继承成原本的 __new__ 方法</span><br>            cls._instance = <span class="hljs-built_in">super</span>(Singleton, cls).__new__(cls)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br></code></pre></td></tr></table></figure><p>测试(多此案成测试)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">arg</span>):<br>    obj = Singleton()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-built_in">id</span>(obj))<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    t = threading.Thread(target=task,args=[i,])<br>    t.start()<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 简介</title>
    <link href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式可以多个组合使用使其更适合项目</p><p>不可过度使用设计模式（避免降低代码可读性）</p><h2 id="创建型模式（5）"><a href="#创建型模式（5）" class="headerlink" title="创建型模式（5）"></a>创建型模式（5）</h2><pre><code class="hljs">对象实例化的模式，创建型模式用于解耦对象的实例化过程</code></pre><ol><li>单例模式， <a href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">go</a></li><li>工厂方法模式, <a href="/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">go</a></li><li>抽象工厂模式, <a href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/">go</a></li><li>建造者模式, <a href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/">go</a></li><li>原型模式, <a href="/2023/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/">go</a></li></ol><h2 id="结构型模式（7）"><a href="#结构型模式（7）" class="headerlink" title="结构型模式（7）"></a>结构型模式（7）</h2><pre><code class="hljs">把类或对象结合在一起形成一个更大的结构. 前者采用继承来组织接口和类，后者采用关联来组合对象</code></pre><ol><li>代理模式</li><li>适配器模式</li><li>桥接模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>组合模式</li></ol><h2 id="行为型模式（11）"><a href="#行为型模式（11）" class="headerlink" title="行为型模式（11）"></a>行为型模式（11）</h2><pre><code class="hljs">类和对象如何交互，行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成一个任务。涉及划分责任和算法。</code></pre><ol><li><p>观察者模式, <a href="">go</a></p></li><li><p>策略模式, <a href="">go</a></p></li><li><p>责任链模式, <a href="">go</a></p></li><li><p>命令模式, <a href="">go</a></p></li><li><p>中介者模式, <a href="">go</a></p></li><li><p>状态模式, <a href="">go</a></p></li><li><p>备忘录模式, <a href="">go</a></p></li><li><p>模板模式, <a href="">go</a></p></li><li><p>迭代器模式, <a href="">go</a></p></li><li><p>解释器模式, <a href="">go</a></p></li><li><p>访问者模式, <a href="">go</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. Cookie、session、token</title>
    <link href="/2023/04/04/web%E7%9F%A5%E8%AF%86/1.cookie%E3%80%81session%E3%80%81token%E4%BA%86%E8%A7%A3/"/>
    <url>/2023/04/04/web%E7%9F%A5%E8%AF%86/1.cookie%E3%80%81session%E3%80%81token%E4%BA%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>在应用程序中，一个用户的所有请求应该属于一个用户，简单说，一个用户进行的所有操作，都应该是对当前用户的操作。但是目前很多程序使用的是 HTTP 协议，但是HTTP协议本身是无状态的协议，简单说，一次请求结束，客户端和服务器就断开连接了，下一次请求就无法跟踪会话，所以诞生了 Cookie、Session、Token集中方式。</li></ul><h2 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1.Cookie"></a>1.Cookie</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul><li>服务器给客户端办法了一个通行证，每个人，访问的时候呆着通行证，那这样每次访问服务器就知道是谁访问的了，那么每次做的操作就是对通行证上这个人进行操作。</li><li>Cookie是存储在客户端的一种机制，如果浏览器禁止Cookie那么，这种认证方式就失效了</li><li>Cookie 除了可以使用字符串，也可以是用base64图片 </li></ul><h3 id="1-2-流程"><a href="#1-2-流程" class="headerlink" title="1.2 流程"></a>1.2 流程</h3><ul><li>在用户第一次请求或者登录服务器的时候，服务器给客户端发一个cookie（服务端会将Cookie加入到HttpResponse中），下次请求的时候带上这个cookie就行(一般浏览器会自己帮着处理这个过程)。</li></ul><h3 id="1-3-Cookie有效期"><a href="#1-3-Cookie有效期" class="headerlink" title="1.3 Cookie有效期"></a>1.3 Cookie有效期</h3><ul><li>Cookie的maxAge决定着Cookie的有效期，单位为秒（Second)</li><li>maxAge 值为-1 则表示，只在当前窗口以及子窗口有效。</li></ul><h3 id="1-4-Cookie的安全性"><a href="#1-4-Cookie的安全性" class="headerlink" title="1.4 Cookie的安全性"></a>1.4 Cookie的安全性</h3><ul><li>可以设置Cookie的secure属性为true。浏览器只会在HTTPS和SSL等安全协议中传输此类Cookie。</li><li>可以对Cookie进行加密，防止别人伪造Cookie(如果是明文，别人随便伪造一个通行证，去访问服务器，就存在安全隐患)</li></ul><h3 id="1-5-禁止跨域访问"><a href="#1-5-禁止跨域访问" class="headerlink" title="1.5 禁止跨域访问"></a>1.5 禁止跨域访问</h3><ul><li>例如百度的网站不会使用谷歌的Cookie</li></ul><h3 id="1-6-应用"><a href="#1-6-应用" class="headerlink" title="1.6 应用"></a>1.6 应用</h3><ul><li>Cookies最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。另一个重要应用场合是“购物车”之类处理。用户可能会在一段时间内在同一家网站的不同页面中选择不同的商品，这些信息都会写入Cookies，以便在最后付款时提取信息。</li></ul><h2 id="2-Session"><a href="#2-Session" class="headerlink" title="2.Session"></a>2.Session</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ul><li>Session是服务器端使用的一种记录客户端状态的机制，使用上比Cookie简单一些，相应的也增加了服务器的存储压力。</li></ul><h3 id="2-2-流程"><a href="#2-2-流程" class="headerlink" title="2.2 流程"></a>2.2 流程</h3><ul><li>用户在第一次请求服务器的时候，会创建一个此用户的session（用户信息一般时Object所以会存放一些用户信息，现在一般存放在 mysql、redis 或者其他的存储系统中), 然后把session_id 放回给客户端</li><li>客户端在以后访问服务器的时候带着session_id，服务器拿到session_id 后会根据session_id，去取session信息，检验用户是否登录然后拿到用户相应信息</li></ul><h3 id="2-3-session的有效期"><a href="#2-3-session的有效期" class="headerlink" title="2.3 session的有效期"></a>2.3 session的有效期</h3><ul><li>一般超过时间没有访问的session会从服务器删除们就失效了</li></ul><h3 id="2-4-使用"><a href="#2-4-使用" class="headerlink" title="2.4 使用"></a>2.4 使用</h3><ul><li>结合Cookie来一起使用，Cookie 存放 Session_id信息，服务器存放Session信息</li><li>URL地址重定向（解决浏览器禁止使用token的情况）, 将Session_id 写到url中然后重新访问带这个session_id的地址，来做到带着session_id访问。</li></ul><h3 id="2-5-优点"><a href="#2-5-优点" class="headerlink" title="2.5 优点"></a>2.5 优点</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">session</span> 传输数据少，数据结构灵活：相较于 cookie 来说，<span class="hljs-keyword">session</span> 存储在服务端，客户端仅保留换取 <span class="hljs-keyword">session</span> 的用户凭证。因此传输数据量小，速度快。<br><span class="hljs-keyword">session</span> 更安全：检验、生成、验证都是在服务端按照指定规则完成，而 cookie 可能被客户端通过 js 代码篡改。<br></code></pre></td></tr></table></figure><h3 id="2-6缺点"><a href="#2-6缺点" class="headerlink" title="2.6缺点"></a>2.6缺点</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">服务器是有状态的。多台后端服务器无法共享 <span class="hljs-keyword">session</span>。解决方法是，专门准备一台 <span class="hljs-keyword">session</span> 服务器，关于 <span class="hljs-keyword">session</span> 的所有操作都交给它来调用。而服务器之间的调用，可以走内网 ip，走 RPC 调用（不走 http）这个方法没试过，一般我都是将 <span class="hljs-keyword">session</span>存到redis或者mysql中。<br></code></pre></td></tr></table></figure><h2 id="3-Token"><a href="#3-Token" class="headerlink" title="3.Token"></a>3.Token</h2><h3 id="3-1-流程"><a href="#3-1-流程" class="headerlink" title="3.1 流程"></a>3.1 流程</h3><ul><li>用户第一次登录后，服务器会生成一个Token 令牌，并将此令牌返回给客户端，以后访问，客户端带上这个Token就行</li><li>Token 一般时用户信息加上签名和过期时间进行的加密数据。<h3 id="3-2-有效期"><a href="#3-2-有效期" class="headerlink" title="3.2 有效期"></a>3.2 有效期</h3></li><li>一般有效期由token中的过期时间来决定</li><li>在有效器到期后可以采用refresh token 流程来更新过期时间（用token里的信息加上新的过期时间进行加密）<h3 id="3-3-优点："><a href="#3-3-优点：" class="headerlink" title="3.3 优点："></a>3.3 优点：</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">支持跨域访问: Cookie是不允许垮域访问的，<span class="hljs-keyword">token</span>支持；<br><br>无状态： <span class="hljs-keyword">token</span>无状态，session有状态的；<br><br>去耦: 不需要绑定到一个特定的身份验证方案。<span class="hljs-keyword">Token</span>可以在任何地方生成，只要在 你的API被调用的时候， 你可以进行<span class="hljs-keyword">Token</span>生成调用即可；<br><br>更适用于移动应用: Cookie不支持手机端访问的；<br><br>性能: 在网络传输的过程中，性能更好；<br><br>基于标准化: 你的API可以采用标准化的 JSON Web <span class="hljs-keyword">Token</span> (JWT). 这个标准已经存在 多个后端库（.<span class="hljs-keyword">NET</span>, Ruby, Java,Python, PHP）和多家公司的支持（如： Firebase,Google, Microsoft）。<br></code></pre></td></tr></table></figure><h3 id="3-4-缺点"><a href="#3-4-缺点" class="headerlink" title="3.4 缺点"></a>3.4 缺点</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">占带宽，正常情况下要比 session_id 更大，需要消耗更多流量，挤占更多带宽，假如你的网站每月有 <span class="hljs-number">10</span> 万次的浏览器，就意味着要多开销几十兆的流量。听起来并不多，但日积月累也是不小一笔开销。实际上，许多人会在 <span class="hljs-keyword">JWT </span>中存储的信息会更多；<br><br>无法在服务端注销，那么久很难解决劫持问题；<br><br>性能问题，<span class="hljs-keyword">JWT </span>的卖点之一就是加密签名，由于这个特性，接收方得以验证 <span class="hljs-keyword">JWT </span>是否有效且被信任。但是大多数 Web 身份认证应用中，<span class="hljs-keyword">JWT </span>都会被存储到 Cookie 中，这就是说你有了两个层面的签名。听着似乎很牛逼，但是没有任何优势，为此，你需要花费两倍的 CPU 开销来验证签名。对于有着严格性能要求的 Web 应用，这并不理想，尤其对于单线程环境。<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>web知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cookie</tag>
      
      <tag>session</tag>
      
      <tag>token</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2. 异或运算</title>
    <link href="/2023/04/03/%E7%AE%97%E6%B3%95/2.%E5%BC%82%E6%88%96%E7%AE%97%E6%B3%95/"/>
    <url>/2023/04/03/%E7%AE%97%E6%B3%95/2.%E5%BC%82%E6%88%96%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、与运算-概念"><a href="#一、与运算-概念" class="headerlink" title="一、与运算 概念"></a>一、与运算 概念</h1><ol><li>异或的符号 ^</li><li>如果两个数不相同，则异或的结果为1；如果两个数相同，则异或的结果为0</li><li>基础异或概念 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> ^ <span class="hljs-number">0</span> # 结果为<span class="hljs-number">1</span><br><span class="hljs-attribute">1</span> ^ <span class="hljs-number">1</span> # 结果为<span class="hljs-number">0</span><br><span class="hljs-attribute">x</span> ^ (-<span class="hljs-number">1</span>) = -x<br></code></pre></td></tr></table></figure></li><li>异或是二进制的数按位进行异或 <figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">例如：5 ^ 3<br>就是101 ^<span class="hljs-number"> 011 </span><br>按位置：<span class="hljs-number"> 1 </span>^<span class="hljs-number"> 0 </span>= 1,<span class="hljs-number"> 0 </span>^<span class="hljs-number"> 1 </span>= 1,<span class="hljs-number"> 1 </span>^<span class="hljs-number"> 1 </span>=<span class="hljs-number"> 0 </span>结果为<span class="hljs-number"> 110 </span>转10进制 6<br></code></pre></td></tr></table></figure></li><li>满足交换律，结合律，自反率（ A ^ B ^ B = A ^ 0 = A）</li><li>将两个数异或的结果与其中一个数异或能得到另一个结果：例如 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span> = <span class="hljs-number">4</span><br><span class="hljs-attribute">b</span> = <span class="hljs-number">5</span><br><span class="hljs-attribute">z</span> = x ^ b <br><span class="hljs-attribute">z</span> ^ b = x = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="题目一、-a-3-b-2-交换两个数"><a href="#题目一、-a-3-b-2-交换两个数" class="headerlink" title="题目一、 a = 3,  b = 2 交换两个数"></a>题目一、 a = 3,  b = 2 交换两个数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">方法一: 用异或实现<br>    <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span> <br>    <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span><br>    <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span><br>    解析：<br>        使用原理<span class="hljs-number">6</span><br>        <span class="hljs-number">1</span>. 两个数异或<br>            <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span><br>        <span class="hljs-number">2</span>. 与其中一个异或能拿到另一个数<br>            <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span> (这个时候b存的就是之前a的值)<br>        <span class="hljs-number">3</span>. <span class="hljs-selector-tag">b</span> 在与<span class="hljs-selector-tag">a</span> 异或<br>            <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span> (这个时候, <span class="hljs-selector-tag">a</span> 拿到的就是b之前的值，因为b现在里边存的是之前a的值)<br>            <br>方法二： python<br>    <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">b</span>, a<br></code></pre></td></tr></table></figure><h2 id="题目二、一个数组一个数出现奇数次，其他都出现了偶数次，怎么找到并打印。"><a href="#题目二、一个数组一个数出现奇数次，其他都出现了偶数次，怎么找到并打印。" class="headerlink" title="题目二、一个数组一个数出现奇数次，其他都出现了偶数次，怎么找到并打印。"></a>题目二、一个数组一个数出现奇数次，其他都出现了偶数次，怎么找到并打印。</h2><p>解题思路: 0 跟任何数异或都是任何数，两个相同的数异或为0，哪所有数异或数</p><p>```<br>data_list = [11,11,22,22,33]<br>tmp = 0<br>for i in data_list:<br>    tmp ^= i</p><p>print(tmp)</p>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异或运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1 机器学习sklearn 库</title>
    <link href="/2023/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/1.sklearn%E5%BA%93/"/>
    <url>/2023/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/1.sklearn%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>集成了常用的机器学习方法，再进行机器学习任务时，并不需要实现算法，简单调用即可</li><li>在 Numpy、Scipy 和 matplotlib 的基础上开发</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>安装 Numpy</li><li>安装 Scipy 库</li><li>安装 matplotlib 库</li><li>安装 sklearn 库</li></ol><h2 id="基础了解"><a href="#基础了解" class="headerlink" title="基础了解"></a>基础了解</h2><ol><li>数据集</li></ol><p><img src="/images/sk_data_info.png" alt="数据集"></p><ol start="2"><li>主要功能<br>用于完成分类任务、回归任务、聚类任务、降维任务、模型选择以及数据预处理。</li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sklearn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 单链表</title>
    <link href="/2023/03/23/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/03/23/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>由node节点连起来形成的结构，节点包含当前节点的值(value)和下一节点(next)</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>内存空间不需要连续，不需要先申请所需的内存，用的时候添加节点就行</li><li>插入和删除操作时,只需要修改被删除节点上一节点的链接地址，不需要移动元素，改进了顺序存储结构中插入删除操作需要移动大量数据的问题</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>失去了顺序存储结构随机存取的特性。<br>例如： 不能通过表达式计算被查找元素的内存地址，每一次查找都是从头开始遍历， （顺序表根据下标取值的时间复杂度是 O(1)）</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>创建链表</li><li>头插</li><li>尾插</li><li>查询</li><li>删除</li><li>链表反转</li><li>判断长度<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>) -&gt; <span class="hljs-title class_">None</span>:<br>        <span class="hljs-variable language_">self</span>.value = value<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-keyword">next</span> = <span class="hljs-title class_">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NodeList</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, <span class="hljs-symbol">node:</span> <span class="hljs-title class_">Node</span>=<span class="hljs-title class_">None</span></span>) -&gt; <span class="hljs-title class_">None</span>:<br>        <span class="hljs-variable language_">self</span>.head = node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-symbol">head:</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">append_node</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;尾插</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            value (_type_): _description_</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        node = <span class="hljs-title class_">Node</span>(value)<br>        index_node = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-comment"># 找到最后一个节点</span><br>        <span class="hljs-keyword">while</span> index_node.<span class="hljs-symbol">next:</span><br>            index_node = index_node.<span class="hljs-keyword">next</span><br>        index_node.<span class="hljs-keyword">next</span> = node<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.head<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">head_insert</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;头插</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            value (_type_): _description_</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        node = <span class="hljs-title class_">Node</span>(value)<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-variable language_">self</span>.head = node<br>            <span class="hljs-keyword">return</span> <br>        <span class="hljs-comment"># 将链表添加到改节点后边</span><br>        node.<span class="hljs-keyword">next</span> = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-comment"># 让该节点做头</span><br>        <span class="hljs-variable language_">self</span>.head = node<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.head<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_node_list</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;链表反转</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 上一个</span><br>        pre_node = <span class="hljs-title class_">None</span><br>        <span class="hljs-comment"># 下一个</span><br>        next_node = <span class="hljs-title class_">None</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.<span class="hljs-symbol">head:</span><br>            <span class="hljs-comment"># 取出来下一个用来存储</span><br>            next_node = <span class="hljs-variable language_">self</span>.head.<span class="hljs-keyword">next</span><br>            <span class="hljs-comment"># 将head 指向上一个</span><br>            <span class="hljs-variable language_">self</span>.head.<span class="hljs-keyword">next</span> = pre_node<br>            <span class="hljs-comment"># 上一个 往后移</span><br>            pre_node = <span class="hljs-variable language_">self</span>.head<br>            <span class="hljs-comment"># head 往后移</span><br>            <span class="hljs-variable language_">self</span>.head = next_node<br>        <span class="hljs-comment"># 头到左后 None 了再回去一个</span><br>        <span class="hljs-variable language_">self</span>.head = pre_node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;遍历节点</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        index_node = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-keyword">while</span> <span class="hljs-symbol">index_node:</span><br>            print(index_node.value, <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot; &quot;</span>)<br>            index_node = index_node.<span class="hljs-keyword">next</span><br>        print()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    node = <span class="hljs-title class_">Node</span>(<span class="hljs-number">1</span>)<br>    nodeList = <span class="hljs-title class_">NodeList</span>(node)<br>    <span class="hljs-comment"># 添加节点</span><br>    nodeList.append_node(<span class="hljs-number">2</span>)<br>    nodeList.append_node(<span class="hljs-number">3</span>)<br>    nodeList.append_node(<span class="hljs-number">4</span>)<br>    <span class="hljs-comment"># 遍历输出</span><br>    nodeList.traverse()<br>    <span class="hljs-comment"># 头插</span><br>    nodeList.head_insert(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 遍历输出</span><br>    nodeList.traverse()<br>    <span class="hljs-comment"># 反转节点</span><br>    nodeList.reverse_node_list()<br>    <span class="hljs-comment"># 输出</span><br>    nodeList.traverse()<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
      <tag>单链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
