<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1. 单链表</title>
    <link href="/2023/03/23/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/03/23/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>由node节点连起来形成的结构，节点包含当前节点的值(value)和下一节点(next)</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>内存空间不需要连续，不需要先申请所需的内存，用的时候添加节点就行</li><li>插入和删除操作时,只需要修改被删除节点上一节点的链接地址，不需要移动元素，改进了顺序存储结构中插入删除操作需要移动大量数据的问题</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>失去了顺序存储结构随机存取的特性。<br>例如： 不能通过表达式计算被查找元素的内存地址，每一次查找都是从头开始遍历， （顺序表根据下标取值的时间复杂度是 O(1)）</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>创建链表</li><li>头插</li><li>尾插</li><li>查询</li><li>删除</li><li>链表反转</li><li>判断长度<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>) -&gt; <span class="hljs-title class_">None</span>:<br>        <span class="hljs-variable language_">self</span>.value = value<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-keyword">next</span> = <span class="hljs-title class_">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NodeList</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, <span class="hljs-symbol">node:</span> <span class="hljs-title class_">Node</span>=<span class="hljs-title class_">None</span></span>) -&gt; <span class="hljs-title class_">None</span>:<br>        <span class="hljs-variable language_">self</span>.head = node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-symbol">head:</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">append_node</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;尾插</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            value (_type_): _description_</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        node = <span class="hljs-title class_">Node</span>(value)<br>        index_node = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-comment"># 找到最后一个节点</span><br>        <span class="hljs-keyword">while</span> index_node.<span class="hljs-symbol">next:</span><br>            index_node = index_node.<span class="hljs-keyword">next</span><br>        index_node.<span class="hljs-keyword">next</span> = node<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.head<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">head_insert</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;头插</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            value (_type_): _description_</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        node = <span class="hljs-title class_">Node</span>(value)<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-variable language_">self</span>.head = node<br>            <span class="hljs-keyword">return</span> <br>        <span class="hljs-comment"># 将链表添加到改节点后边</span><br>        node.<span class="hljs-keyword">next</span> = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-comment"># 让该节点做头</span><br>        <span class="hljs-variable language_">self</span>.head = node<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.head<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_node_list</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;链表反转</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 上一个</span><br>        pre_node = <span class="hljs-title class_">None</span><br>        <span class="hljs-comment"># 下一个</span><br>        next_node = <span class="hljs-title class_">None</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.<span class="hljs-symbol">head:</span><br>            <span class="hljs-comment"># 取出来下一个用来存储</span><br>            next_node = <span class="hljs-variable language_">self</span>.head.<span class="hljs-keyword">next</span><br>            <span class="hljs-comment"># 将head 指向上一个</span><br>            <span class="hljs-variable language_">self</span>.head.<span class="hljs-keyword">next</span> = pre_node<br>            <span class="hljs-comment"># 上一个 往后移</span><br>            pre_node = <span class="hljs-variable language_">self</span>.head<br>            <span class="hljs-comment"># head 往后移</span><br>            <span class="hljs-variable language_">self</span>.head = next_node<br>        <span class="hljs-comment"># 头到左后 None 了再回去一个</span><br>        <span class="hljs-variable language_">self</span>.head = pre_node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;遍历节点</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        index_node = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-keyword">while</span> <span class="hljs-symbol">index_node:</span><br>            print(index_node.value, <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot; &quot;</span>)<br>            index_node = index_node.<span class="hljs-keyword">next</span><br>        print()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    node = <span class="hljs-title class_">Node</span>(<span class="hljs-number">1</span>)<br>    nodeList = <span class="hljs-title class_">NodeList</span>(node)<br>    <span class="hljs-comment"># 添加节点</span><br>    nodeList.append_node(<span class="hljs-number">2</span>)<br>    nodeList.append_node(<span class="hljs-number">3</span>)<br>    nodeList.append_node(<span class="hljs-number">4</span>)<br>    <span class="hljs-comment"># 遍历输出</span><br>    nodeList.traverse()<br>    <span class="hljs-comment"># 头插</span><br>    nodeList.head_insert(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 遍历输出</span><br>    nodeList.traverse()<br>    <span class="hljs-comment"># 反转节点</span><br>    nodeList.reverse_node_list()<br>    <span class="hljs-comment"># 输出</span><br>    nodeList.traverse()<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
      <tag>单链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
