<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python的logging实现多进程安全</title>
    <link href="/2023/12/25/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/python%E7%9A%84logging%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <url>/2023/12/25/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/python%E7%9A%84logging%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、重写doRollover，实现文件的多进程锁-时间分割"><a href="#一、重写doRollover，实现文件的多进程锁-时间分割" class="headerlink" title="一、重写doRollover，实现文件的多进程锁(时间分割)"></a>一、重写doRollover，实现文件的多进程锁(时间分割)</h2><h3 id="1-Python多进程日志轮转"><a href="#1-Python多进程日志轮转" class="headerlink" title="1.Python多进程日志轮转"></a>1.Python多进程日志轮转</h3><p>多进程条件下 celery task中的日志写入可能会出现一系列问题</p><h3 id="2-python-自带日志处理器"><a href="#2-python-自带日志处理器" class="headerlink" title="2.python 自带日志处理器"></a>2.python 自带日志处理器</h3><p>基础日志模块</p><p><a href="https://docs.python.org/3/library/logging.html">logging — Logging facility for Python — Python 3.12.1 documentation</a></p><p>基于基础模块的日志文件处理模块</p><p><a href="https://docs.python.org/3/library/logging.handlers.html">logging.handlers — 日志处理程序 — Python 3.12.1 文档</a></p><h3 id="TimedRotatingFileHandler"><a href="#TimedRotatingFileHandler" class="headerlink" title="TimedRotatingFileHandler"></a>TimedRotatingFileHandler</h3><p>基于 logging.handlers 的 支持在特定时间隔轮换磁盘日志文件  支持多线程下的日志文件写入</p><p>重要参数：</p><ol><li><p><em>when</em> 轮转间隔  </p></li><li><p><em>interval</em> 时间间隔的数量，默认为 1；例如，当 when=‘D’ 且 interval=7 时，表示每周轮转一次</p></li><li><p>backupCount：表示日志保存个数；当生成的日志文件数量超过该数目时，会自动删除旧的日志文件；默认值为 0</p></li><li><p>delay：是否延时打开文件，可选值为 True 和 False；当为 True 时，表示延时打开文件，即在第一次写入日志时才打开日志文件；当为 False 时，表示在初始化时即打开日志文件；默认值为 False；</p></li></ol><p>主要方法：</p><ol><li><em>computeRollover</em>  根据指定的时间计算出滚动时间</li><li><em>getFilesToDelete</em>  获取当前要删除日志文件列表</li><li><em>doRollover</em>  主要轮转方法</li></ol><h3 id="多进程下基于TimedRotatingFileHandler重写方法"><a href="#多进程下基于TimedRotatingFileHandler重写方法" class="headerlink" title="多进程下基于TimedRotatingFileHandler重写方法"></a>多进程下基于TimedRotatingFileHandler重写方法</h3><p>由于实际生产过程中 我们还有多进程的情景 在多进程下 TimedRotatingFileHandler 不能满足需求  会出现日志命名错误导致的日志写入问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> platform<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> logging.handlers <span class="hljs-keyword">import</span> TimedRotatingFileHandler<br><br><span class="hljs-keyword">from</span> settings <span class="hljs-keyword">import</span> BASE_DIR<br><br><span class="hljs-keyword">if</span> platform.system() != <span class="hljs-string">&#x27;Windows&#x27;</span>:<br>    <span class="hljs-keyword">import</span> fcntl<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiCompatibleTimedRotatingFileHandler</span>(<span class="hljs-title class_ inherited__">TimedRotatingFileHandler</span>):<br>    <span class="hljs-comment"># 重写 doRollover 方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">doRollover</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        do a rollover; in this case, a date/time stamp is appended to the filename</span><br><span class="hljs-string">        when the rollover happens.  However, you want the file to be named for the</span><br><span class="hljs-string">        start of the interval, not the current time.  If there is a backup count,</span><br><span class="hljs-string">        then we have to get a list of matching filenames, sort them and remove</span><br><span class="hljs-string">        the one with the oldest suffix.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.stream:<br>            self.stream.close()<br>            self.stream = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># get the time that this sequence started at and make it a TimeTuple</span><br>        currentTime = <span class="hljs-built_in">int</span>(time.time())<br>        dstNow = time.localtime(currentTime)[-<span class="hljs-number">1</span>]<br>        t = self.rolloverAt - self.interval<br>        <span class="hljs-keyword">if</span> self.utc:<br>            timeTuple = time.gmtime(t)<br>        <span class="hljs-keyword">else</span>:<br>            timeTuple = time.localtime(t)<br>            dstThen = timeTuple[-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> dstNow != dstThen:<br>                <span class="hljs-keyword">if</span> dstNow:<br>                    addend = <span class="hljs-number">3600</span><br>                <span class="hljs-keyword">else</span>:<br>                    addend = -<span class="hljs-number">3600</span><br>                timeTuple = time.localtime(t + addend)<br>        dfn = self.rotation_filename(self.baseFilename + <span class="hljs-string">&quot;.&quot;</span> +<br>                                     time.strftime(self.suffix, timeTuple))<br>        <span class="hljs-comment"># if os.path.exists(dfn):</span><br>        <span class="hljs-comment">#     os.remove(dfn)</span><br>        <span class="hljs-comment"># self.rotate(self.baseFilename, dfn)</span><br>        <span class="hljs-keyword">if</span> platform.system() == <span class="hljs-string">&#x27;Windows&#x27;</span>:  <span class="hljs-comment"># windows下文件锁方式待添加</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dfn) <span class="hljs-keyword">and</span> os.path.exists(self.baseFilename):<br>                self.rotate(self.baseFilename, dfn)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 兼容多进程并发 LOG_ROTATE</span><br>            <span class="hljs-comment"># 重写部位  加锁</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dfn):<br>                f = <span class="hljs-built_in">open</span>(self.baseFilename, <span class="hljs-string">&#x27;a&#x27;</span>)<br>                fcntl.lockf(f.fileno(), fcntl.LOCK_EX)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dfn):<br>                    os.rename(self.baseFilename, dfn)<br>                <span class="hljs-comment"># 释放锁 释放老 log 句柄</span><br>                f.close()<br><br>        <span class="hljs-keyword">if</span> self.backupCount &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> self.getFilesToDelete():<br>                os.remove(s)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.delay:<br>            self.stream = self._<span class="hljs-built_in">open</span>()<br>        newRolloverAt = self.computeRollover(currentTime)<br>        <span class="hljs-keyword">while</span> newRolloverAt &lt;= currentTime:<br>            newRolloverAt = newRolloverAt + self.interval<br>        <span class="hljs-comment">#If DST changes and midnight or weekly rollover, adjust for this.</span><br>        <span class="hljs-keyword">if</span> (self.when == <span class="hljs-string">&#x27;MIDNIGHT&#x27;</span> <span class="hljs-keyword">or</span> self.when.startswith(<span class="hljs-string">&#x27;W&#x27;</span>)) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.utc:<br>            dstAtRollover = time.localtime(newRolloverAt)[-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> dstNow != dstAtRollover:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> dstNow:  <span class="hljs-comment"># DST kicks in before next rollover, so we need to deduct an hour</span><br>                    addend = -<span class="hljs-number">3600</span><br>                <span class="hljs-keyword">else</span>:           <span class="hljs-comment"># DST bows out before next rollover, so we need to add an hour</span><br>                    addend = <span class="hljs-number">3600</span><br>                newRolloverAt += addend<br>        self.rolloverAt = newRolloverAt<br></code></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/library/fcntl.html#fcntl.lockf">fcntl — The fcntl and ioctl system calls — Python 3.12.1 documentation</a> –python中的 linux 文件方法</p><p>重写后的项目模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    自定义logger类，用于处理不同地方引用输出到不同文件</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, log_file</span>):<br>        self.log_file = log_file<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_logger</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化logger</span><br><span class="hljs-string">        :param name: 名字不同，获得的logger不同，否则是单例的logger，造成文件写入混乱</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">import</span> logging.handlers<br><br>        <span class="hljs-comment"># logging初始化工作</span><br>        logging.basicConfig()<br>        <span class="hljs-comment"># logger的初始化工作</span><br>        logger = logging.getLogger(name)<br>        logger.setLevel(logging.INFO)<br>        <span class="hljs-comment"># 添加TimedRotatingFileHandler</span><br><br>        <span class="hljs-comment"># logger.propagate = False</span><br><br>        log_path = os.path.join(BASE_DIR, self.log_file)<br><br>        <span class="hljs-comment"># interval 滚动周期，</span><br>        <span class="hljs-comment"># when=&quot;MIDNIGHT&quot;, interval=1 表示每天0点为更新点，每天生成一个文件</span><br>        <span class="hljs-comment"># backupCount  表示日志保存个数</span><br>        <span class="hljs-comment"># when=&#x27;MIDNIGHT&#x27;只要过了0点就会分割</span><br>        <span class="hljs-comment"># 原因是celery并没有帮我们实现切分日志的功能,以上TimedRotatingFileHandler的配置没有生效</span><br>        time_file_handler = MultiCompatibleTimedRotatingFileHandler(log_path, when=<span class="hljs-string">&#x27;MIDNIGHT&#x27;</span>, interval=<span class="hljs-number">1</span>,<br>                                                                    backupCount=<span class="hljs-number">7</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>        <span class="hljs-comment"># 设置后缀名称，跟strftime的格式一样</span><br>        <span class="hljs-comment"># time_file_handler.suffix = &quot;%Y-%m-%d_%H-%M.log&quot;</span><br><br>        <span class="hljs-comment"># 需要注意的是suffix和extMatch一定要匹配的上，如果不匹配，过期日志不会被删除。</span><br>        formatter = logging.Formatter(<span class="hljs-string">&#x27;[%(process)s %(thread)d] %(asctime)s %(filename)s[line:%(lineno)d] &#x27;</span><br>                                      <span class="hljs-string">&#x27;%(levelname)s %(message)s&#x27;</span>)<br>        time_file_handler.setFormatter(formatter)<br>        logger.addHandler(time_file_handler)<br>        <span class="hljs-comment"># 关闭打开的文件</span><br>        time_file_handler.close()<br>        <span class="hljs-keyword">return</span> logger<br></code></pre></td></tr></table></figure><h2 id="二、使用第三方模块"><a href="#二、使用第三方模块" class="headerlink" title="二、使用第三方模块"></a>二、使用第三方模块</h2><ol><li><p>concurrent_log_handler<br>根据文件大小分割</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> concurrent_log_handler <span class="hljs-keyword">import</span> ConcurrentRotatingFileHandler<br><br>logger = logging.getLogger()<br>handler = ConcurrentRotatingFileHandler(filename=<span class="hljs-string">&#x27;test.log&#x27;</span>, mode=<span class="hljs-string">&#x27;a&#x27;</span>, maxBytes=<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">10</span>, backupCount=<span class="hljs-number">5</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, delay=<span class="hljs-literal">False</span>)<br>logger.addHandler(handler)<br><br>logger.info(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>在django setting 中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python">LOGGING = &#123;<br>    <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-string">&#x27;formatters&#x27;</span>: &#123; <span class="hljs-comment">#格式化器</span><br>        <span class="hljs-string">&#x27;standard&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] &gt; %(message)s&#x27;</span><br>        &#125;,<br>        <span class="hljs-string">&#x27;simple&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;[%(levelname)s]&gt; %(message)s&#x27;</span><br>        &#125;,<br>    &#125;,<br>    <span class="hljs-string">&#x27;filters&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;require_debug_true&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;()&#x27;</span>: <span class="hljs-string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;error_handler&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;concurrent_log_handler.ConcurrentRotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;%s/error.log&#x27;</span> % LOGGING_DIR,<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;sql_handler&#x27;</span>: &#123;  <span class="hljs-comment"># sql 查询接口</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;concurrent_log_handler.ConcurrentRotatingFileHandler&#x27;</span>,  <span class="hljs-comment"># 保存到文件，自动切</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;%s/sql.log&#x27;</span> % LOGGING_DIR,<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>,  <span class="hljs-comment"># 日志大小 5M</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&quot;utf-8&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&#x27;request_handler&#x27;</span>: &#123;  <span class="hljs-comment"># 网络回去数据接口</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;concurrent_log_handler.ConcurrentRotatingFileHandler&#x27;</span>,  <span class="hljs-comment"># 保存到文件，自动切</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;%s/request_data.log&#x27;</span> % LOGGING_DIR,<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>,  <span class="hljs-comment"># 日志大小 5M</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&quot;utf-8&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&#x27;server_handler&#x27;</span>: &#123;  <span class="hljs-comment"># 请求别人接口日志</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;concurrent_log_handler.ConcurrentRotatingFileHandler&#x27;</span>,  <span class="hljs-comment"># 保存到文件，自动切</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;%s/server_data.log&#x27;</span> % LOGGING_DIR,<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>,  <span class="hljs-comment"># 日志大小 5M</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&quot;utf-8&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&#x27;integral_handler&#x27;</span>: &#123;  <span class="hljs-comment"># 请求别人接口日志</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;concurrent_log_handler.ConcurrentRotatingFileHandler&#x27;</span>,  <span class="hljs-comment"># 保存到文件，自动切</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;%s/integral.log&#x27;</span> % LOGGING_DIR,<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>,  <span class="hljs-comment"># 日志大小 5M</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&quot;utf-8&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;    <span class="hljs-comment">#日志分配到哪个handlers中</span><br>        <span class="hljs-string">&#x27;error&#x27;</span>: &#123;  <span class="hljs-comment"># 名为 &#x27;modify&#x27;的logger还单独处理</span><br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;error_handler&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;sql&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;sql_handler&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;request&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;request_handler&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;server&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;server_handler&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;integral&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;integral_handler&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>ERROR_LOGIN = logging.getLogger(<span class="hljs-string">&quot;error&quot;</span>)  <span class="hljs-comment"># 一些错误日志</span><br>SERVER_LOGIN = logging.getLogger(<span class="hljs-string">&quot;server&quot;</span>)  <span class="hljs-comment"># 接口日志</span><br>REQUEST_LOGIN = logging.getLogger(<span class="hljs-string">&quot;request&quot;</span>)  <span class="hljs-comment"># 请求别人的接口日志</span><br>SQL_LOGIN = logging.getLogger(<span class="hljs-string">&quot;sql&quot;</span>)  <span class="hljs-comment"># sql 日志</span><br>INTEGRAL_LOGIN = logging.getLogger(<span class="hljs-string">&quot;integral&quot;</span>)  <span class="hljs-comment"># 积分相关日志</span><br><br>ERROR_LOGIN.error(<span class="hljs-string">&quot;错误&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2.二叉树的遍历</title>
    <link href="/2023/12/21/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/2-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2023/12/21/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/2-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-2.webp" alt="二叉树"></p><h2 id="构建树"><a href="#构建树" class="headerlink" title="构建树"></a>构建树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.value = value<br>        self.lchild = <span class="hljs-literal">None</span> <span class="hljs-comment"># 左孩子</span><br>        self.rchild = <span class="hljs-literal">None</span> <span class="hljs-comment"># 右孩子</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tree</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.root = <span class="hljs-literal">None</span> <span class="hljs-comment"># 根节点</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-comment"># 创建节点</span><br>        node = Node(value=value)<br>        <span class="hljs-comment"># 没有根节点这个就是根节点</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.root:<br>            self.root = node<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 采用中序遍历方式借助队列来寻找，二叉树最先缺少的一个节点将其补进去</span><br>        queue = [self.root]<br>        <span class="hljs-keyword">while</span> queue:<br>            index = queue.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> index.lchild:<br>                queue.append(index.lchild)<br>            <span class="hljs-keyword">else</span>:<br>                index.lchild = node<br>                <span class="hljs-keyword">return</span><br>            <br>            <span class="hljs-keyword">if</span> index.rchild:<br>                queue.append(index.rchild)<br>            <span class="hljs-keyword">else</span>:<br>                index.rchild = node<br>                <span class="hljs-keyword">return</span><br><br></code></pre></td></tr></table></figure><h2 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="1.先序遍历"></a>1.先序遍历</h2><p>任何子树的处理顺序都是：先头节点、再左子树、然后右子树<br>[1,2,3,4,5,6,7]</p><h3 id="1-1-递归实现"><a href="#1-1-递归实现" class="headerlink" title="1.1 递归实现"></a>1.1 递归实现</h3><p>递归的思路就是找到逻辑和出口，剩下的交给程序，从先序遍历我们可以知道，先打印头，再一直左子树到底，再右子树，所以先打印，再递归调用，左子树，再递归调用右子树，出口就是当前节点为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_node</span>(<span class="hljs-params">node</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(node.value, end=<span class="hljs-string">&quot; &quot;</span>)<br>    pre_node(node=node.lchild)<br>    pre_node(node=node.rchild)<br><br></code></pre></td></tr></table></figure><h3 id="1-2-非递归实现-栈"><a href="#1-2-非递归实现-栈" class="headerlink" title="1.2 非递归实现(栈)"></a>1.2 非递归实现(栈)</h3><p>非递归实现，通过压栈的方式来实现，每次把头节点弹出来，因为栈是先进后出，所以要先把右节点压栈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_node2</span>(<span class="hljs-params">node</span>):<br>    queue = [node]<br>    <span class="hljs-keyword">while</span> queue:<br>        index_node = queue.pop()<br>        <span class="hljs-built_in">print</span>(index_node.value, end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">if</span> index_node.rchild:<br>            queue.append(index_node.rchild)<br>        <br>        <span class="hljs-keyword">if</span> index_node.lchild:<br>            queue.append(index_node.lchild)<br></code></pre></td></tr></table></figure><h2 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2.中序遍历"></a>2.中序遍历</h2><p>任何子树的处理顺序都是：先左子树、再头节点、然后右子树<br>[4,2,5,1,6,3,7]</p><h3 id="2-1-递归实现"><a href="#2-1-递归实现" class="headerlink" title="2.1 递归实现"></a>2.1 递归实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">in_node</span>(<span class="hljs-params">node</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    in_node(node=node.lchild)<br>    <span class="hljs-built_in">print</span>(node.value, end=<span class="hljs-string">&quot; &quot;</span>)<br>    in_node(node=node.rchild)<br></code></pre></td></tr></table></figure><h3 id="2-2-非递归实现"><a href="#2-2-非递归实现" class="headerlink" title="2.2 非递归实现"></a>2.2 非递归实现</h3><ol><li>当前节点index_node, 左子树进栈，一直到空（叶子节点）</li><li>弹出最后一个，打印，index_node 的右孩子作为当前节点</li><li>index_node 的右孩子入栈，直到空</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">in_node2</span>(<span class="hljs-params">node</span>):<br>    queue = []<br>    index_node = node<br>    <span class="hljs-keyword">while</span>(queue <span class="hljs-keyword">or</span> index_node):<br>        <span class="hljs-keyword">if</span> index_node:<br>            queue.append(index_node)<br>            index_node = index_node.lchild<br>        <span class="hljs-keyword">else</span>:<br>            index_node = queue.pop()<br>            <span class="hljs-built_in">print</span>(index_node.value, end=<span class="hljs-string">&quot; &quot;</span>)<br>            index_node = index_node.rchild<br><br></code></pre></td></tr></table></figure><h2 id="3-后续遍历"><a href="#3-后续遍历" class="headerlink" title="3.后续遍历"></a>3.后续遍历</h2><p>任何子树的处理顺序都是：先左子树、再右子树、然后头节点<br>[4,5,2,6,7,3,1]</p><h3 id="3-1-递归调用"><a href="#3-1-递归调用" class="headerlink" title="3.1 递归调用"></a>3.1 递归调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">end_node</span>(<span class="hljs-params">node</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    end_node(node=node.lchild)<br>    end_node(node=node.rchild)<br>    <span class="hljs-built_in">print</span>(node.value, end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-非递归调用（两个栈）"><a href="#3-2-非递归调用（两个栈）" class="headerlink" title="3.2 非递归调用（两个栈）"></a>3.2 非递归调用（两个栈）</h3><p>在先序遍历中我们先入头，再入右，再入左， 弹出得到 头左右的顺序。<br>如果我们先入头，再入左，再入右，弹出会得到 <strong>头右左</strong>。 如果我们把<strong>头弹出来的时候不打印，保存起来，放到一个新的栈里，然后从栈里打印就会得到一个逆序左右头</strong> 就是后续遍历的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">end_node2</span>(<span class="hljs-params">node</span>):<br>    queue = [node]<br>    queue2 = []<br>    <span class="hljs-keyword">while</span> queue:<br>        index_node = queue.pop()<br>        queue2.append(index_node)<br>        <span class="hljs-keyword">if</span> index_node.lchild:<br>            queue.append(index_node.lchild)<br>        <span class="hljs-keyword">if</span> index_node.rchild:<br>            queue.append(index_node.rchild)<br>    <br>    <span class="hljs-keyword">while</span> queue2:<br>        index_node = queue2.pop()<br>        <span class="hljs-built_in">print</span>(index_node.value, end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%912-2.png" alt="二叉树"><br>例如：<br>先序: [a,b,d,e,t,c,x,k,s,g]<br>后续: [d,t,e,b,k,s,x,g,c,a]<br>则有先序中 x 之前的，交上 后续中x之后的，必是x的祖先(x 为任意一个值)<br>先序x之前[a,b,d,e,t,c] &amp; <a href="%E5%90%8E%E5%BA%8Fx%E4%B9%8B%E5%90%8E">g,c,a</a> = [a,c]</p><ol><li>因为先序遍历 祖先必在 x 之前， 后序，祖先必在x之后</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树、二叉树遍历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树概念</title>
    <link href="/2023/12/19/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/1.%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/12/19/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/1.%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-1.png" alt="二叉树"></p><p>是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。二叉树的递归定义为：二叉树是一棵空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树。<br>注意：</p><ol><li>每个节点最多有两颗子树，也就是度不大于2</li><li>左子树和右子树是有定义的，不能颠倒，即使某个节点只有一颗子树，也有左右之分</li></ol><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ol><li><strong>根节点</strong>：一个树只有一个树根，例如上图 A 就是整个树的根节点</li><li><strong>节点</strong>: 一个树包含多个元素和指向元素的分支，其中元素就是节点，例如：B C D E 等都是树的节点</li><li><strong>度</strong>: 一个节点拥有的子节点数，比如A节点的度为2，在 二叉树中度可能是 0 1 2</li><li><strong>叶子节点</strong>: 度为0的节点称为叶子节点，例如上图的：G E H I</li><li><strong>层次</strong>: 从根节点算，根为第一层，根的孩子为第二层，依次往下。比如 G 在 第4 层</li><li><strong>深度</strong>: 指数的最大层次。</li><li><strong>兄弟节点</strong>： 同一个根节点的结节点， 例如： B C 节点</li><li><strong>堂兄弟节点</strong>：双亲在同一层的节点互为堂兄弟节点；如上图：D E F 互为堂兄弟节点</li><li><strong>子孙节点</strong>：以某节点为根的子树中任一节点都称为该节点的子孙。如上图：所有节点都是A的子孙</li><li><strong>有序树</strong>：树中任意节点的子节点之间有顺序关系，这种树称为有序树</li><li><strong>无序树</strong>：树中任意节点的子节点之间没有顺序关系，这种树称为无序树,也称为自由树 </li></ol><h3 id="2-二叉树性质"><a href="#2-二叉树性质" class="headerlink" title="2.二叉树性质"></a>2.二叉树性质</h3><ol><li>二叉树中，第i层最多有 2<sup>(i-1)</sup> 个节点</li><li>如果二叉树的深度为 K, 那么此二叉树最多有 2<sup>k</sup> - 1 个节点</li><li>如果叶子节点个数为 n<sub>0</sub>, 度为2的节点个数为 n<sub>1</sub> 那么有：n<sub>0</sub> =  n<sub>1</sub>  + 1</li><li>具有n 个节点的满二叉树深为 log<sub>2</sub>(n+1)</li></ol><h3 id="3-根节点的五种形态"><a href="#3-根节点的五种形态" class="headerlink" title="3.根节点的五种形态"></a>3.根节点的五种形态</h3><ol><li>空二叉树</li><li>只有一个根节点</li><li>根节点只有左子树</li><li>根节点只有右子树</li><li>根节点既有左子树又有右子树</li></ol><h3 id="4-特殊二叉树"><a href="#4-特殊二叉树" class="headerlink" title="4.特殊二叉树"></a>4.特殊二叉树</h3><h4 id="4-1-满二叉树"><a href="#4-1-满二叉树" class="headerlink" title="4.1 满二叉树"></a>4.1 满二叉树</h4><p>如果一棵树只有度为0的节点和度为2的节点，并且度为0的节点在同一层，这棵树就是满二叉树<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-2.webp" alt="二叉树"><br>满二叉树除了满足普通的二叉树性质，还具有一下性质</p><ol><li>满二叉树的第i层节点树为2<sup>(i-1)</sup></li><li>深度为k的满二叉树必有 2<sup>K</sup> - 1 个节点，叶子节点数为 2<sup> k - 1</sup></li><li>满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。</li><li>具有n个节点的满二叉树的深度为 log<sub>2</sub>(n+1)层</li></ol><h4 id="4-2-完全二叉树"><a href="#4-2-完全二叉树" class="headerlink" title="4.2 完全二叉树"></a>4.2 完全二叉树</h4><p>如果二叉树中除去最后一层节点为满二叉树，且最后一层的节点依次从左到右分布，则此二叉树被称为完全二叉树<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-3.jpg" alt="二叉树"><br>完全二叉树除了满足普通二叉树的性质外，还满足：</p><ol><li>n个节点的完全二叉树的深度 ⌊log2n⌋ + 1 （注：⌊ ⌋表示向下取整）</li><li>对于任意一个完全二叉树来说，如果将含有的节点按照层次从左到右依次标号，对于任意一个节点 i ，完全二叉树还有以下几个结论成立：</li><li>1 当i &gt; 1 时，父节点为⌊ i/2 ⌋ (如上图)</li><li>2 如果 2*i &gt; n(总节点的个数), 则节点 i 肯定没有左孩子(左叶子节点)，否则其左孩子是节点 2*i</li><li>3 如果 2*i+1 &gt; n(总节点的个数), 则节点i 肯定没有右孩子(右子节点), 否则其右孩子是节点 2*i+1</li></ol><h4 id="4-3-二叉搜索树-又称：二叉排序树、二叉查找树"><a href="#4-3-二叉搜索树-又称：二叉排序树、二叉查找树" class="headerlink" title="4.3 二叉搜索树(又称：二叉排序树、二叉查找树)"></a>4.3 二叉搜索树(又称：二叉排序树、二叉查找树)</h4><p>二叉搜索树：可以是空树，或者是具备如下性质<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-4.webp" alt="二叉树"></p><h5 id="二叉搜索树特点"><a href="#二叉搜索树特点" class="headerlink" title="二叉搜索树特点"></a>二叉搜索树特点</h5><ol><li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值</li><li>若任意节点的右子树不空，则右子树上所有节点的值均大于他的根节点的值</li><li>任意节点的左、右子树也分别为二叉搜索树;<br>特殊情况<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-5.webp" alt="二叉树"><br>这种情况下，二叉搜索树已经变更为链表，搜索一个元素的时间复杂度从O(log<sub>2</sub>n )退化为O(n), 出现这种情况的原因是二叉搜索树没有自平衡的机制，所以就有了平衡二叉树。</li></ol><h4 id="4-4-平衡二叉树"><a href="#4-4-平衡二叉树" class="headerlink" title="4.4 平衡二叉树"></a>4.4 平衡二叉树</h4><p>平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差之多等于1，它是二叉排序树的一个进化体，实现方式有：红黑树、AVL树</p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-6.webp" alt="二叉树"></p><p><strong>平衡因子</strong>: 平衡二叉树是在二叉查找树的基础上进行构建，为了维持平衡二叉树的平衡，那么就需要一种机制来判断平衡二叉树是否是平衡的。这种机制就叫做平衡因子。平衡二叉树上某个节点的<strong>左子树深度</strong>减去<strong>右子树深度</strong>的值，就称为<strong>此节点的平衡因子</strong>。</p><p><strong>最小不平衡树</strong>: 距离插入节点最近的，且平衡因子的绝对值大于1的节点为根的子树，就称为最小不平衡树。</p><h5 id="平衡二叉树特点"><a href="#平衡二叉树特点" class="headerlink" title="平衡二叉树特点"></a>平衡二叉树特点</h5><ol><li>平衡二叉树是一种二叉查找树</li><li>每个节点的左子树的高度减去右子树的高度的绝对值不超过1</li><li>空树和左右子树都是平衡二叉树</li><li>相比红黑树，平衡二叉树比较适用于没有删除的情况</li></ol><h5 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h5><p>是指将根节点的右侧往左拉，原先的右子节点变成新的父节点，并把多余的左子节点出让，给已经降级的根节点当右子节点。<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-7.webp" alt="二叉树"></p><h5 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h5><p>将根节点的左节点往右拉，原先的左子节点变成新的父节点，并把多余的右节点出让，给已经降级的根节点充当左子节点。<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-8.webp" alt="二叉树"></p><h5 id="失衡"><a href="#失衡" class="headerlink" title="失衡"></a>失衡</h5><p>当我们在一个平衡二叉树上插入一个节点时，有可能会导致失衡，即出现平衡因子绝对值大于1的节点，如下图，当插入节点后，其中key 为53的节点失去平衡，我们称该节点为<strong>失衡节点</strong>，必须重新调整树的结构使之恢复平衡。</p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-9.webp" alt="二叉树"><br>不一定只有一个节点失去平衡，有可能插入一个节点会让多个节点失衡。这时候找<strong>最小的平衡子树的根节点作为失衡节点</strong>。</p><h5 id="恢复平衡"><a href="#恢复平衡" class="headerlink" title="恢复平衡"></a>恢复平衡</h5><p>失衡的四种类型<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-10.jpg" alt="二叉树"><br>如第一个，当平衡二叉树为AB时，插入一个C节点，使得失衡了，失衡节点为A，此时因为C节点插入的位置为失衡节点的左孩子的左孩子，所以是LL型，以此类推。</p><p>恢复平衡要保持二叉搜索树的原则，<strong>把key的值中等的作为根节点，最小的放在左孩子，最大的放到右孩子</strong>。通过这一目的实现降低树的深度。<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-11.jpg" alt="二叉树"></p><h4 id="4-5-AVL树"><a href="#4-5-AVL树" class="headerlink" title="4.5 AVL树"></a>4.5 AVL树</h4><p>AVL树本质还是一棵二叉搜索树</p><ol><li>本身是一棵二叉搜索树</li><li>带有平衡条件：每个节点的左右子树的深度之差的绝对值（平衡因子）最多为1，也就是说AVL树，本质是呆了平衡功能的二叉查找树</li></ol><p>如果在AVL树中插入或删除节点后，使得高度之差大于1。此时，AVL树的平衡状态就被破坏，它就不再是一棵二叉树；为了让它重新维持在一个平衡状态，就需要对其进行旋转处理。AVL实现平衡的关键在于旋转操作。</p><p><strong>注意</strong>： 平衡二叉树和VAL树都是高效的二叉查找树，它们的区别在于<strong>平衡条件</strong>和<strong>查找效率</strong>上。平衡二叉树的<strong>平衡条件更为严格</strong>，而VAL树的自平衡特性使得它在<strong>插入和删除操作时能够更快地调整树的形状</strong>。</p><h4 id="4-6-红黑树"><a href="#4-6-红黑树" class="headerlink" title="4.6 红黑树"></a>4.6 红黑树</h4><p>是一种<strong>二叉搜索树</strong>，但在<strong>每个节点上增加一个存储位表示节点的颜色</strong>，可以是Red或Black。 通过任何一条从根到叶子的路径上各个节点着色方式的限制，<strong>红黑树确保没有一条路径会比其他路径长出俩倍</strong>，因而是接近平衡的。因而，红黑树是<strong>相对接近平衡的二叉树</strong>，并不是一个完美平衡二叉查找树<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-12.webp" alt="二叉树"><br>规则：</p><ol><li>节点不是黑色，就是红色(非黑即红)</li><li>根节点为黑色</li><li>叶子节点为黑色(叶子节点是指末梢的空节点 nil 或者 null)</li><li>一个节点为红色，则其两个子节点必须是黑色(根到叶子节点的所有路径，不可能存在两个连续的红色节点)</li><li>每个节点到叶子节点的所有路径，都包含相同数目的黑色节点（相同的黑色高度）</li></ol><h5 id="红黑树的应用"><a href="#红黑树的应用" class="headerlink" title="红黑树的应用"></a>红黑树的应用</h5><ol><li>java中，TreeMap、TreeSet都使用红黑树作为底层数据结构</li><li>JDK 1.8开始，HashMap也引入了红黑树：当冲突的链表长度超过8时，自动转为红黑树</li><li>Linux底层的CFS进程调度算法中，vruntime使用红黑树进行存储。</li><li>多路复用技术的Epoll，其核心结构是红黑树 + 双向链表</li></ol><h3 id="5-二叉树的存储结构"><a href="#5-二叉树的存储结构" class="headerlink" title="5. 二叉树的存储结构"></a>5. 二叉树的存储结构</h3><p>二叉树一般可以使用两种结构存储，一种<strong>顺序结构</strong>，一种<strong>链式结构</strong></p><h4 id="5-1-顺序存储"><a href="#5-1-顺序存储" class="headerlink" title="5.1 顺序存储"></a>5.1 顺序存储</h4><p>顺序存储就是使用<strong>数组来存储</strong>，一般使用数组只适合表示完全二叉树，因为<strong>不完全二叉树会有空间的浪费</strong>。现实使用中<strong>只有堆才会使用数组来存储</strong></p><p>对于完全二叉树的存储，仅需对其从根节点开始仅需编号，使用数组存储编号即可。取出式依据完全二叉树由左到右分布的性质恢复即可。<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-14.webp" alt="二叉树"></p><h4 id="5-2-链式存储"><a href="#5-2-链式存储" class="headerlink" title="5.2 链式存储"></a>5.2 链式存储</h4><p>二叉树的链式存储结构是指，用链表来表示一棵二叉树，即用链来指示元素的逻辑关系。 通常的方法是链表中每个节点由三个域组成，数据域和左右指针域，左右指针分别用来给出该节点左孩子和右孩子所在的链节点的存储地址 。<br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-15.1.webp" alt="二叉树"><br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-15.2.png" alt="二叉树"><br><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%911-15.3.webp" alt="二叉树"></p>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql 创建用户分配权限</title>
    <link href="/2023/12/12/mysql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%88%86%E9%85%8D%E6%9D%83%E9%99%90/"/>
    <url>/2023/12/12/mysql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%88%86%E9%85%8D%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;%或者IP&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>; <br></code></pre></td></tr></table></figure><h2 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h2><p>授权某个用户所有数据库所有权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> &quot;用户名&quot;@&quot;IP/localhost/%&quot;<br></code></pre></td></tr></table></figure><p>授予某个用户所有数据库读权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;%或者IP&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>授予某个用户某个数据库写权限</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">GRANT <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> <span class="hljs-symbol">`数据库名`</span>.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;%或者IP&#x27;</span>;<br></code></pre></td></tr></table></figure><p>授权用户只有查看某个视图的权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> 数据库名.bjbc_zkkk_jsl <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>; <br></code></pre></td></tr></table></figure><p>当然，还可以授予其他权限：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span>: 所有权限<br><span class="hljs-keyword">INSERT</span>: 允许用户插入权限<br><span class="hljs-keyword">SELECT</span>: 允许用户读权限.<br><span class="hljs-keyword">UPDATE</span>: 允许用户更新权限<br><span class="hljs-keyword">CREATE</span>: 允许用户创建表和数据库权限<br><span class="hljs-keyword">DELETE</span>: 允许用户删除表中的行数据权限<br><span class="hljs-keyword">DROP</span>: 允许用户删除数据库和表权限<br></code></pre></td></tr></table></figure><p>STEP 4 刷新权限</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br><span class="hljs-meta">#刷新权限</span><br><span class="hljs-keyword">flush</span> privileges;<br></code></pre></td></tr></table></figure><p>提示：如果使用的是navicate，赋予权限后无效果，关闭软件后打开再试。 </p><p>STEP 5 显示所有权限 <br>你可以查看当前用户所有被授予的权限</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#显示所有权限</span><br><span class="hljs-attribute">SHOW</span> GRANTS FOR <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;%或者IP&#x27;</span>;<br></code></pre></td></tr></table></figure><p>STEP 6  删除某个权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">#删除查看权限<br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;%或者IP&#x27;</span>;<br></code></pre></td></tr></table></figure><p>STEP 7 删除用户</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#删除用户</span><br>DROP <span class="hljs-keyword">USER</span> <span class="hljs-title">&#x27;用户名&#x27;@&#x27;%或者IP</span>&#x27;;;<br></code></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>Mysql用户创建 mysql8.0创建用户<br><a href="https://blog.51cto.com/u_16099334/8183761">https://blog.51cto.com/u_16099334/8183761</a></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git学习</title>
    <link href="/2023/12/11/git/git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/11/git/git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><p>  当想记录工作目录和索引的当前状态，但又想返回一个干净的工作目录时使用，可以保存本地修改，并恢复工作目录以匹配头部提交。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>  某一天你正在 feature 分支开发新需求，突然产品经理跑过来说线上有bug，必须马上修复。而此时你的功能开发到一半，于是你急忙想切到 master 分支，因为当前有文件更改了，需要提交commit保持工作区干净才能切分支。由于情况紧急，</p><ol><li>commit 上去，commit 信息也随便写了个“暂存代码”</li><li>使用stash暂存</li></ol><h3 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> stash <span class="hljs-comment"># 暂存代码</span><br>git stash apply <span class="hljs-comment"># 恢复代码（修复完线长问题，切回feature分支执行）</span><br></code></pre></td></tr></table></figure><p>相关命令</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 保存当前未commit的代码</span><br>git stash<br><br><span class="hljs-meta"># 保存当前未commit的代码并添加备注</span><br>git stash <span class="hljs-keyword">save</span> <span class="hljs-string">&quot;备注的内容&quot;</span><br><br><span class="hljs-meta"># 列出stash的所有记录</span><br>git stash list<br><br><span class="hljs-meta"># 删除stash的所有记录</span><br>git stash <span class="hljs-keyword">clear</span><br><br><span class="hljs-meta"># 应用最近一次的stash</span><br>git stash apply<br><br><span class="hljs-meta"># 应用最近一次的stash，随后删除该记录</span><br>git stash <span class="hljs-keyword">pop</span><br><br><span class="hljs-meta"># 删除最近的一次stash</span><br>git stash <span class="hljs-built_in">drop</span><br></code></pre></td></tr></table></figure><p>当有多条stash，可以指定操作stash, 首先使用stash list 列出所有记录</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$ git stash <span class="hljs-built_in">list</span><br>stash@&#123;<span class="hljs-number">0</span>&#125;: WIP <span class="hljs-keyword">on</span> <span class="hljs-params">...</span><br>stash@&#123;<span class="hljs-number">1</span>&#125;: WIP <span class="hljs-keyword">on</span> <span class="hljs-params">...</span><br>stash@&#123;<span class="hljs-number">2</span>&#125;: <span class="hljs-keyword">On</span> <span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><p>应用第二条</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">$ git stash apply <span class="hljs-symbol">stash@</span>&#123;<span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="reset-–soft"><a href="#reset-–soft" class="headerlink" title="reset –soft"></a>reset –soft</h2><p>回退你已提交的 commit，并将 commit 的修改内容放回到暂存区。<br>一般我们在使用 reset 命令时，git reset –hard会被提及的比较多，它能让 commit 记录强制回溯到某一个节点。而git reset –soft的作用正如其名，–soft(柔软的) 除了回溯节点外，还会保留节点的修改内容。</p><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>有时候手滑不小心把不该提交的内容 commit 了，这时想改回来，只能再 commit 一次，又多一条“黑历史”。</p><p>规范些的团队，一般对于 commit 的内容要求职责明确，颗粒度要细，便于后续出现问题排查。本来属于两块不同功能的修改，一起 commit 上去，这种就属于不规范。这次恰好又手滑了，一次性 commit 上去。</p><h3 id="命令使用-1"><a href="#命令使用-1" class="headerlink" title="命令使用"></a>命令使用</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 恢复最近一次 <span class="hljs-keyword">commit</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--soft HEAD^</span><br></code></pre></td></tr></table></figure><p>reset –soft相当于后悔药，给你重新改过的机会。对于上面的场景，就可以再次修改重新提交，保持干净的 commit 记录。</p><p>以上说的是还未 push 的commit。对于已经 push 的 commit，也可以使用该命令，不过再次 push 时，由于远程分支和本地分支有差异，需要强制推送git push -f来覆盖被 reset 的 commit。</p><p>还有一点需要注意，在reset –soft指定 commit 号时，会将该 commit 到最近一次 commit 的所有修改内容全部恢复，而不是只针对该 commit。</p><p>举个例子：</p><p>commit 记录有 c、b、a。<br>reset 到 a。<br>此时的 HEAD 到了 a，而 b、c 的修改内容都回到了暂存区。</p><h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><p>将已经提交的 commit，复制出新的 commit 应用到分支里(合并指定commit 到分支里)</p><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p>应用场景1：有时候版本的一些优化需求开发到一半，可能其中某一个开发完的需求要临时上，或者某些原因导致待开发的需求卡住了已开发完成的需求上线。这时候就需要把 commit 抽出来，单独处理。</p><p>应用场景2：有时候开发分支中的代码记录被污染了，导致开发分支合到线上分支有问题，这时就需要拉一条干净的开发分支，再从旧的开发分支中，把 commit 复制到新分支。</p><h3 id="命令使用-2"><a href="#命令使用-2" class="headerlink" title="命令使用"></a>命令使用</h3><h4 id="复制单个"><a href="#复制单个" class="headerlink" title="复制单个"></a>复制单个</h4><p>现在有一个feature分支， commit 记录有 a, b, c 三条<br>需要把 b 复制到另一个分支，首先把 commitHash 复制下来，然后切到 master 分支。<br>当前 master 最新的记录是 a，使用cherry-pick把 b 应用到当前分支。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git cherry-pick commitHash</span><br></code></pre></td></tr></table></figure><h4 id="复制多个"><a href="#复制多个" class="headerlink" title="复制多个"></a>复制多个</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> cherry-pick commit1 commit2<br></code></pre></td></tr></table></figure><p>会将 commit1、commit2 都复制到当前分支<br>多个连续的commit，也可区间复制：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git cherry-pick commit1^<span class="hljs-built_in">..commit</span>2<br></code></pre></td></tr></table></figure><p>上面的命令将 commit1 到 commit2 这个区间的 commit 都应用到当前分支（包含commit1、commit2），commit1 是最早的提交。</p><h4 id="cherry-pick-代码冲突"><a href="#cherry-pick-代码冲突" class="headerlink" title="cherry-pick 代码冲突"></a>cherry-pick 代码冲突</h4><p>在cherry-pick多个commit时，可能会遇到代码冲突，这时cherry-pick会停下来，让用户决定如何继续操作。下面看看怎么解决这种场景。</p><p>还是 feature 分支，现在需要把 c、d、e 都复制到 master 分支上。先把起点c和终点e的 commitHash 记下来。</p><p>切到 master 分支，使用区间的cherry-pick。可以看到 c 被成功复制，当进行到 d 时，发现代码冲突，cherry-pick中断了。这时需要解决代码冲突，重新提交到暂存区。</p><p>然后使用cherry-pick –continue让cherry-pick继续进行下去。最后 e 也被复制进来，整个流程就完成了。<br>以上是完整的流程，但有时候可能需要在代码冲突后，放弃或者退出流程：</p><p>放弃 cherry-pick：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git cherry-pick <span class="hljs-comment">--abort</span><br></code></pre></td></tr></table></figure><p>回到操作前的样子，就像什么都没发生过。</p><p>退出 cherry-pick：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git cherry-pick <span class="hljs-comment">--quit</span><br></code></pre></td></tr></table></figure><p>不回到操作前的样子。即保留已经cherry-pick成功的 commit，并退出cherry-pick流程。</p><h2 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h2><p>将现有的提交还原，恢复提交的内容，并生成一条还原记录。</p><h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><p>有一天测试突然跟你说，你开发上线的功能有问题，需要马上撤回，否则会影响到系统使用。这时可能会想到用 reset 回退，可是你看了看分支上最新的提交还有其他同事的代码，用 reset 会把这部分代码也撤回了。由于情况紧急，又想不到好方法，还是任性的使用 reset，然后再让同事把他的代码合一遍（同事听到想打人），于是你的技术形象在同事眼里一落千丈。<br>学会 revert 之后，立马就可以拯救这种尴尬的情况。</p><h3 id="命令使用-3"><a href="#命令使用-3" class="headerlink" title="命令使用"></a>命令使用</h3><h4 id="revert-普通提交"><a href="#revert-普通提交" class="headerlink" title="revert 普通提交"></a>revert 普通提交</h4><p>现有提交记录 a,b,c; b 记录有问题但是a记录没有问题</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">git <span class="hljs-built_in">revert</span> b的HashCommit<br></code></pre></td></tr></table></figure><p>因为 revert 会生成一条新的提交记录，这时会让你编辑提交信息，编辑完后 :wq 保存退出就好了。</p><p>再来看下最新的 log，生成了一条 revert 记录，虽然自己之前的提交记录还是会保留着，但你修改的代码内容已经被撤回了。</p><h4 id="revert-合并提交"><a href="#revert-合并提交" class="headerlink" title="revert 合并提交"></a>revert 合并提交</h4><p>在 git 的 commit 记录里，还有一种类型是合并提交，想要 revert 合并提交，使用上会有些不一样。</p><p>现有分支记录， 合并记录 A1, b, c<br>使用刚刚同样的 revert 方法，会发现命令行报错了。为什么会这样？在官方文档中有解释。</p><p>通常无法 revert 合并，因为您不知道合并的哪一侧应被视为主线。此选项指定主线的父编号（从1开始），并允许 revert 反转相对于指定父编号的更改</p><p>我的理解是因为合并提交是两条分支的交集节点，而 git 不知道需要撤销的哪一条分支，需要添加参数 -m 指定主线分支，保留主线分支的代码，另一条则被撤销。<br>-m 后面要跟一个 parent number 标识出”主线”，一般使用 1 保留主分支代码。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> revert -m <span class="hljs-number">1</span> &lt;commitHash&gt;<br></code></pre></td></tr></table></figure><h4 id="revert-合并提交后，再次合并分支会失效"><a href="#revert-合并提交后，再次合并分支会失效" class="headerlink" title="revert 合并提交后，再次合并分支会失效"></a>revert 合并提交后，再次合并分支会失效</h4><p>还是上面的场景，在 master 分支 revert 合并提交后，然后切到 feature 分支修复好 bug，再合并到 master 分支时，会发现之前被 revert 的修改内容没有重新合并进来。</p><p>因为使用 revert 后， feature 分支的 commit 还是会保留在 master 分支的记录中，当你再次合并进去时，git 判断有相同的 commitHash，就忽略了相关 commit 修改的内容。<br>这时就需要 revert 掉之前 revert 的合并提交，有点拗口，接下来看操作吧。<br>现在 master 的记录是这样的。<br>reverts 记录, 合并记录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git revert <span class="hljs-tag">&lt;<span class="hljs-name">reverts</span> <span class="hljs-attr">记录的HashCommit</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次使用 revert，之前被 revert 的修改内容就又回来了。</p><h2 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h2><p>此命令管理重录中记录的信息。</p><p>如果说reset –soft是后悔药，那 reflog 就是强力后悔药。它记录了所有的 commit 操作记录，便于错误操作后找回记录。</p><h3 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h3><p>某天你眼花，发现自己在其他人分支提交了代码还推到远程分支，这时因为分支只有你的最新提交，就想着使用reset –hard，结果紧张不小心记错了 commitHash，reset 过头，把同事的 commit 搞没了。没办法，reset –hard是强制回退的，找不到 commitHash 了，只能让同事从本地分支再推一次（同事瞬间拳头就硬了，怎么又是你）。于是，你的技术形象又一落千丈。</p><h3 id="命令使用-4"><a href="#命令使用-4" class="headerlink" title="命令使用"></a>命令使用</h3><p>现有分支，自己错误的提交a, b,c<br>想要 reset 到 b。误操作 reset 过头，b 没了，最新的只剩下 c。<br>这时用git reflog查看历史记录，把错误提交的那次 commitHash 记下。<br>再次 reset 回去，就会发现 b 回来了。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard &lt;HashCommit&gt;</span><br></code></pre></td></tr></table></figure><h2 id="设置-Git-短命令"><a href="#设置-Git-短命令" class="headerlink" title="设置 Git 短命令"></a>设置 Git 短命令</h2><p>方法一</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> <span class="hljs-keyword">alias</span><span class="hljs-variable">.ps</span> push<br></code></pre></td></tr></table></figure><p>方式二 打开全局配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.gitconfig<br></code></pre></td></tr></table></figure><p>写入内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[alias]</span> <br>        <span class="hljs-attr">co</span> = checkout<br>        <span class="hljs-attr">ps</span> = push<br>        <span class="hljs-attr">pl</span> = pull<br>        <span class="hljs-attr">mer</span> = merge --<span class="hljs-literal">no</span>-ff<br>        <span class="hljs-attr">cp</span> = cherry-pick<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 等同于 git cherry-pick <span class="hljs-symbol">&lt;commitHash&gt;</span><br>git <span class="hljs-keyword">cp</span> <span class="hljs-symbol">&lt;commitHash&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://mp.weixin.qq.com/s/_ZzfFPLbgljX5XgRdDfx2w">https://mp.weixin.qq.com/s/_ZzfFPLbgljX5XgRdDfx2w</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git stash</tag>
      
      <tag>git reset</tag>
      
      <tag>git cherry-pick</tag>
      
      <tag>git revert</tag>
      
      <tag>git reflog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uwsgi配置</title>
    <link href="/2023/12/01/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/uwsgi%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/12/01/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/uwsgi%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="uwsgi-配置"><a href="#uwsgi-配置" class="headerlink" title="uwsgi 配置"></a>uwsgi 配置</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># uwsig使用配置文件启动</span><br><span class="hljs-section">[uwsgi]</span><br><span class="hljs-comment"># 指定IP端口</span><br><span class="hljs-comment"># socket=0:8641</span><br><span class="hljs-attr">http</span>=<span class="hljs-number">0</span>:<span class="hljs-number">8641</span><br><span class="hljs-comment"># 项目目录</span><br><span class="hljs-attr">chdir</span>=../<br><span class="hljs-comment"># wsgi.py位置</span><br><span class="hljs-attr">wsgi-file</span>=MedicalRecordQuality/wsgi.py<br><span class="hljs-comment"># 进程个数</span><br><span class="hljs-attr">workers</span>=<span class="hljs-number">6</span><br><span class="hljs-attr">reload-mercy</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">worker-reload-mercy</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#配置每个进程的线程数</span><br><span class="hljs-comment">#threads=2</span><br><span class="hljs-comment"># 进程pid文件名</span><br><span class="hljs-attr">pidfile</span>=uwsgi.pid<br><span class="hljs-comment">#设置接受字段的大小</span><br><span class="hljs-attr">buffer-size</span>=<span class="hljs-number">655350</span><br><span class="hljs-comment"># 启用主进程</span><br><span class="hljs-attr">master</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 自动移除unix Socket和pid文件当服务停止的时候</span><br><span class="hljs-attr">vacuum</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 序列化接受的内容，如果可能的话</span><br><span class="hljs-attr">thunder-lock</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 启用线程</span><br><span class="hljs-attr">enable-threads</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 设置自中断时间</span><br><span class="hljs-comment"># harakiri=5</span><br><span class="hljs-comment"># 设置缓冲</span><br><span class="hljs-attr">post-buffering</span>=<span class="hljs-number">4096</span><br><span class="hljs-comment"># 设置日志目录</span><br><span class="hljs-attr">daemonize</span>=uwsgi.log<br><span class="hljs-comment"># 日志路径</span><br><span class="hljs-comment"># logPath=/home/dev/qc/medicalrecordqualityserver/log</span><br><span class="hljs-comment"># log-reopen=true</span><br><span class="hljs-comment"># 请求层面，后台服务不会被断开，但时间比较准确</span><br><span class="hljs-attr">http-timeout</span>=<span class="hljs-number">10</span><br><span class="hljs-comment"># 客户端IP</span><br><span class="hljs-attr">log-x-forwarded-for</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">listen</span>=<span class="hljs-number">128</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uwsgi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自制yum源</title>
    <link href="/2023/11/24/linux/%E8%87%AA%E5%88%B6yum%E6%BA%90/"/>
    <url>/2023/11/24/linux/%E8%87%AA%E5%88%B6yum%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<ol><li><p>将作为源的iso挂载到系统上<br>mount -o loop /home/jhmk/CentOS-7-x86_64-Everything-1611.iso  /mnt</p></li><li><p>cd /etc/yum.repos.d/<br>mkdir /etc/yum.repos.d/bak<br>mv /etc/yum.repos.d/*.repo bak/</p></li><li><p>创建/etc/yum.repos.d/local_rpm.repo文件<br>[rpm]<br>name=rpm_package<br>baseurl=file:///mnt<br>gpgcheck=0</p></li><li><p>更新<br>yum clean all</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yum 源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书写excel到io中</title>
    <link href="/2023/11/24/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B9%A6%E5%86%99excel%E5%88%B0io%E4%B8%AD/"/>
    <url>/2023/11/24/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B9%A6%E5%86%99excel%E5%88%B0io%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对于异步下载思路（nginx负载均衡，没有使用文件服务器），将小文件放到redis中然后从redis中取出来下载</p></blockquote><p>实现：先将数据存到 BytesIO 中然后将 BytesIO内容写到redis中，导出接口取出来返回</p><h2 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h2><p>bytesIO.getvalue()</p><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-title">from</span> io <span class="hljs-keyword">import</span> BytesIO, StringIO<br><br><span class="hljs-title">bytesIO</span> = <span class="hljs-type">BytesIO</span>()<br><span class="hljs-title">pd_excel_work</span> = pd.<span class="hljs-type">ExcelWriter</span>(bytesIO)<br><br><span class="hljs-meta"># 保存</span><br><span class="hljs-title">pandas_excel_work</span>.save()<br><span class="hljs-title">pandas_excel_work</span>.close()<br><br></code></pre></td></tr></table></figure><h3 id="xlwt"><a href="#xlwt" class="headerlink" title="xlwt"></a>xlwt</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>workBook = <span class="hljs-constructor">Workbook(<span class="hljs-params">encoding</span>=<span class="hljs-params">encoding</span>)</span><br>sheet = workBook.add<span class="hljs-constructor">_sheet(<span class="hljs-params">sheet_name</span>, <span class="hljs-operator">**</span><span class="hljs-params">kwargs</span>)</span><br>bytesIO = <span class="hljs-constructor">BytesIO()</span><br># 将文件流保存到 BytesIo 对象中<br>workbook.save(bytesIO)<br></code></pre></td></tr></table></figure><h3 id="xlsxwriter"><a href="#xlsxwriter" class="headerlink" title="xlsxwriter"></a>xlsxwriter</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bytesIO </span>= <span class="hljs-keyword">BytesIO()</span><br><span class="hljs-keyword"></span>workbook = xlsxwriter.Workbook(<span class="hljs-keyword">bytesIO)</span><br><span class="hljs-keyword"></span><span class="hljs-comment"># 保存</span><br>workbook.<span class="hljs-keyword">close()</span><br></code></pre></td></tr></table></figure><h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile">stringIO = StringIO()<br><span class="hljs-comment"># 指定想stringIo 中书写信息</span><br>csv_ = csv.writer(stringIO)<br><br><span class="hljs-comment"># 保存</span><br>content_bytes = csv_stringIO_data.getvalue().encode(<span class="hljs-string">&quot;utf-8-sig&quot;</span>)<br><span class="hljs-comment"># 设置到redis中</span><br>redis_conn.r.setex(filename, content_bytes, 5 * 60)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>pandas</tag>
      
      <tag>xlwt</tag>
      
      <tag>xlsxwriter</tag>
      
      <tag>csv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pandas合并excel单元格</title>
    <link href="/2023/11/24/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/pandas%E5%90%88%E5%B9%B6excel%E5%8D%95%E5%85%83%E6%A0%BC/"/>
    <url>/2023/11/24/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/pandas%E5%90%88%E5%B9%B6excel%E5%8D%95%E5%85%83%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="pandas-合并单元格"><a href="#pandas-合并单元格" class="headerlink" title="pandas 合并单元格"></a>pandas 合并单元格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个样本Dataframe</span><br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;qux&#x27;</span>, <span class="hljs-string">&#x27;quux&#x27;</span>, <span class="hljs-string">&#x27;quuz&#x27;</span>], <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>]&#125;)<br><br><span class="hljs-comment"># 合并任意单元格</span><br>writer = pd.ExcelWriter(<span class="hljs-string">&#x27;merged_cells_any.xlsx&#x27;</span>, engine=<span class="hljs-string">&#x27;xlsxwriter&#x27;</span>)<br>df.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;Sheet1&#x27;</span>, index=<span class="hljs-literal">False</span>)<br>workbook = writer.book<br>worksheet = writer.sheets[<span class="hljs-string">&#x27;Sheet1&#x27;</span>]<br>worksheet.set_column(<span class="hljs-string">&#x27;A:C&#x27;</span>, <span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># 合并任意单元格</span><br>worksheet.merge_range(<span class="hljs-string">&#x27;A1:B2&#x27;</span>, <span class="hljs-string">&#x27;Foo Bar&#x27;</span>, workbook.add_format(&#123;<span class="hljs-string">&#x27;align&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;valign&#x27;</span>: <span class="hljs-string">&#x27;vcenter&#x27;</span>, <span class="hljs-string">&#x27;bg_color&#x27;</span>: <span class="hljs-string">&#x27;#DDEBF7&#x27;</span>&#125;))<br>worksheet.merge_range(<span class="hljs-string">&#x27;C2:C3&#x27;</span>, <span class="hljs-string">&#x27;C2-C3&#x27;</span>, workbook.add_format(&#123;<span class="hljs-string">&#x27;align&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;valign&#x27;</span>: <span class="hljs-string">&#x27;vcenter&#x27;</span>, <span class="hljs-string">&#x27;bg_color&#x27;</span>: <span class="hljs-string">&#x27;#DDEBF7&#x27;</span>&#125;))<br>writer.save()<br><br></code></pre></td></tr></table></figure><p><a href="https://www.python100.com/html/15Q9AM175FSQ.html">https://www.python100.com/html/15Q9AM175FSQ.html</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>pandas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql备份与恢复</title>
    <link href="/2023/11/20/mysql/mysql%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <url>/2023/11/20/mysql/mysql%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="逻辑备份使用-mysqldump-实现"><a href="#逻辑备份使用-mysqldump-实现" class="headerlink" title="逻辑备份使用 mysqldump 实现"></a>逻辑备份使用 mysqldump 实现</h2><p>简介: 在mysqldump 命令执行的时候，实际上是将数据库，分成一个文本文件，文件中包含相关表结构的 <code>创建语句</code>和数据的<code>插入语句</code>，数据恢复时就是执行这些语句</p><h3 id="1-备份数据库"><a href="#1-备份数据库" class="headerlink" title="1.备份数据库"></a>1.备份数据库</h3><h4 id="1-1-备份一个数据库"><a href="#1-1-备份一个数据库" class="headerlink" title="1.1 备份一个数据库"></a>1.1 备份一个数据库</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">mysqldump –u <span class="hljs-keyword">user</span> <span class="hljs-title">–h</span> host –p 数据库的名称 &gt; 备份文件名称 .sql<br></code></pre></td></tr></table></figure><p>备注：导出部分表数据直接 在数据库名称后加表名就行</p><h4 id="1-2-备份一个表的部分数据"><a href="#1-2-备份一个表的部分数据" class="headerlink" title="1.2 备份一个表的部分数据"></a>1.2 备份一个表的部分数据</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mysqldump -uroot -p atguigu student <span class="hljs-params">--where</span> = <span class="hljs-string">&quot;id &lt; 10 &quot;</span> &gt; student_part_id10_low_bak <span class="hljs-string">.sql</span><br></code></pre></td></tr></table></figure><p>备注： 备份atguigu，表student id &lt; 10 的数据</p><h4 id="1-3-排除某些表进行恢复"><a href="#1-3-排除某些表进行恢复" class="headerlink" title="1.3 排除某些表进行恢复"></a>1.3 排除某些表进行恢复</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mysqldump -uroot -<span class="hljs-selector-tag">p</span> atguigu <span class="hljs-attr">--ignore-table</span>=atguigu<span class="hljs-selector-class">.student</span> &gt; no_stu_bak .sql<br></code></pre></td></tr></table></figure><h4 id="1-4-备份过程中包含存储过程、函数、事件"><a href="#1-4-备份过程中包含存储过程、函数、事件" class="headerlink" title="1.4 备份过程中包含存储过程、函数、事件"></a>1.4 备份过程中包含存储过程、函数、事件</h4><p>mysqldump 备份默认是不包含存储过程，自定义函数及事件的。可以使用 – routines 或 - R 选项来备份存储过程及函数，使用 – events 或 - E 参数来备份事件。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mysqldump -uroot -p -R -E <span class="hljs-comment">-- databases atguigu &gt; fun_atguigu_bak .sql</span><br></code></pre></td></tr></table></figure><h3 id="2-恢复数据"><a href="#2-恢复数据" class="headerlink" title="2. 恢复数据"></a>2. 恢复数据</h3><h4 id="2-1-单库备份中恢复单库"><a href="#2-1-单库备份中恢复单库" class="headerlink" title="2.1 单库备份中恢复单库"></a>2.1 单库备份中恢复单库</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span> atguigu4&lt; atguigu <span class="hljs-selector-class">.sql</span><br></code></pre></td></tr></table></figure><h4 id="2-2-全库备份中恢复全库"><a href="#2-2-全库备份中恢复全库" class="headerlink" title="2.2 全库备份中恢复全库"></a>2.2 全库备份中恢复全库</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql –u root –<span class="hljs-selector-tag">p</span> &lt; <span class="hljs-attribute">all</span><span class="hljs-selector-class">.sql</span><br></code></pre></td></tr></table></figure><h4 id="2-3-从全库备份中恢复单库"><a href="#2-3-从全库备份中恢复单库" class="headerlink" title="2.3 从全库备份中恢复单库"></a>2.3 从全库备份中恢复单库</h4><p>将单个库的数据从全库中文件中分离出来，放到一个单独的文件中，在使用单独的文件进行恢复</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sed -n <span class="hljs-string">&#x27;/^-- Current Database: `atguigu`/,/^-- Current Database: `/p&#x27;</span> all_database.<span class="hljs-keyword">sql</span> &gt; atguigu.<span class="hljs-keyword">sql</span><br>分离完成后在进行单库恢复<br></code></pre></td></tr></table></figure><h4 id="2-4-从单库备份中恢复单表"><a href="#2-4-从单库备份中恢复单表" class="headerlink" title="2.4 从单库备份中恢复单表"></a>2.4 从单库备份中恢复单表</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 先分离部分表 <br>grep &quot;insert into `class`&quot; atguigu.<span class="hljs-keyword">sql</span> &gt; class_data.<span class="hljs-keyword">sql</span><br># 在数据库中进行恢复(连接数据库的时候在，class_data.<span class="hljs-keyword">sql</span> 同级目录连接), 根据需求 删除多余的语句，只留需要的<span class="hljs-keyword">sql</span>语句<br>use atguigu;<br>mysql&gt; source class_structure.<span class="hljs-keyword">sql</span> ;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected, <span class="hljs-number">1</span> <span class="hljs-built_in">warning</span> ( <span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="1-复制数据库到新的库里（支持跨服务器）"><a href="#1-复制数据库到新的库里（支持跨服务器）" class="headerlink" title="1. 复制数据库到新的库里（支持跨服务器）"></a>1. 复制数据库到新的库里（支持跨服务器）</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">mysqldump  -uroot -p数据库密码 旧的数据库 -–single-transaction <span class="hljs-string">| mysql  -uroot -p数据库密码 新的数据库;</span><br></code></pre></td></tr></table></figure><h4 id="2-导表接口到新的数据库里（支持跨服务器）"><a href="#2-导表接口到新的数据库里（支持跨服务器）" class="headerlink" title="2. 导表接口到新的数据库里（支持跨服务器）"></a>2. 导表接口到新的数据库里（支持跨服务器）</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysqldump</span> -h<span class="hljs-number">127.0.0.1</span> -P3306 -uroot -p密码 -d 旧的数据库| mysql --host=<span class="hljs-number">127.0.0.1</span> -P3306 -uroot -p密码 新的数据库<br></code></pre></td></tr></table></figure><h4 id="3-导指定表到数据库里（支持跨服务器）"><a href="#3-导指定表到数据库里（支持跨服务器）" class="headerlink" title="3. 导指定表到数据库里（支持跨服务器）"></a>3. 导指定表到数据库里（支持跨服务器）</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">mysqldump</span> <span class="hljs-literal">-</span><span class="hljs-comment">uusername</span> <span class="hljs-literal">-</span><span class="hljs-comment">ppassword</span> <span class="hljs-literal">--</span><span class="hljs-comment">databases test</span> <span class="hljs-literal">--</span><span class="hljs-comment">tables table1 table2 |  mysql</span> <span class="hljs-literal">--</span><span class="hljs-comment">host=127</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-comment">P3306</span> <span class="hljs-literal">-</span><span class="hljs-comment">uroot</span> <span class="hljs-literal">-</span><span class="hljs-comment">p密码 新的数据库</span> <span class="hljs-literal">-</span><span class="hljs-comment">c</span><br></code></pre></td></tr></table></figure><h4 id="mysqldump-参数"><a href="#mysqldump-参数" class="headerlink" title="mysqldump 参数"></a>mysqldump 参数</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysqldump其他常用选项如下：<br><br>-- add - <span class="hljs-keyword">drop</span> - <span class="hljs-keyword">database</span> ：在每个 <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> 语句前添加 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> 语句。<br>-- add - <span class="hljs-keyword">drop</span> - tables ：在每个 <span class="hljs-keyword">CREATE</span> TABLE 语句前添加 <span class="hljs-keyword">DROP</span> TABLE 语句。<br>-- add -locking ：用 LOCK TABLES 和 UNLOCK TABLES 语句引用每个表转储。重载转储文件时插入得更快。<br>-- <span class="hljs-keyword">all</span> - <span class="hljs-keyword">database</span> , -A ：转储所有数据库中的所有表。与使用 -- <span class="hljs-keyword">database</span> 选项相同，在命令行中命名所有数据库。<br>-- comment [= <span class="hljs-number">0</span> | <span class="hljs-number">1</span> ] ：如果设置为 <span class="hljs-number">0</span> ，禁止转储文件中的其他信息，例如程序版本、服务器版本和主机。 --skip<br>comments 与 --comments= <span class="hljs-number">0</span> 的结果相同。默认值为 <span class="hljs-number">1</span> ，即包括额外信息。<br>--compact ：产生少量输出。该选项禁用注释并启用 --skip- add - <span class="hljs-keyword">drop</span> - tables 、 -- no - <span class="hljs-keyword">set</span> -names 、 --skip<br>disable - <span class="hljs-keyword">keys</span> 和 --skip- add -locking 选项。<br>--compatible=name ：产生与其他数据库系统或旧的 MySQL 服务器更兼容的输出，值可以为 ansi 、 MySQL323 、<br>MySQL40 、 postgresql 、 oracle 、 mssql 、 db2 、 maxdb 、 no_key_options 、 no_table_options 或者<br>no_field_options 。<br>--complete_insert, -c ：使用包括列名的完整的 <span class="hljs-keyword">INSERT</span> 语句。<br>--debug[=debug_options], - #[debug_options] ：写调试日志。 -- <span class="hljs-keyword">delete</span> ， -D ：导入文本文件前清空表。<br>-- default - character - <span class="hljs-keyword">set</span> = charset ：使用 charsets 默认字符集。如果没有指定，就使用 utf8 。<br>-- <span class="hljs-keyword">delete</span> -- master - logs ：在主复制服务器上，完成转储操作后删除二进制日志。该选项自动启用 - master<br>data 。<br>-- extended - <span class="hljs-keyword">insert</span> ， -<span class="hljs-built_in">e</span> ：使用包括几个 <span class="hljs-keyword">VALUES</span> 列表的多行 <span class="hljs-keyword">INSERT</span> 语法。这样使得转储文件更小，重载文件时可<br>以加速插入。<br>-- flush - logs ， -F ：开始转储前刷新 MySQL 服务器日志文件。该选项要求 RELOAD 权限。<br>-- <span class="hljs-keyword">force</span> ， -f ：在表转储过程中，即使出现 SQL 错误也继续。<br>-- lock - <span class="hljs-keyword">all</span> - tables ， -x ：对所有数据库中的所有表加锁。在整体转储过程中通过全局锁定来实现。该选项自动关<br>闭 --single- <span class="hljs-keyword">transaction</span> 和 -- lock - tables 。<br>-- lock - tables ， -l ：开始转储前锁定所有表。用 READ LOCAL 锁定表以允许并行插入 MyISAM 表。对于事务表（例<br>如 InnoDB 和 BDB ）， --single- <span class="hljs-keyword">transaction</span> 是一个更好的选项，因为它根本不需要锁定表。<br>-- no - <span class="hljs-keyword">create</span> -db ， -n ：该选项禁用 <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-comment">/*!32312 IF NOT EXIST*/</span> db_name 语句，如果给出 -<br>- <span class="hljs-keyword">database</span> 或 -- <span class="hljs-keyword">all</span> - <span class="hljs-keyword">database</span> 选项，就包含到输出中。<br>-- no - <span class="hljs-keyword">create</span> -info ， -t ：只导出数据，而不添加 <span class="hljs-keyword">CREATE</span> TABLE 语句。<br>-- no - data ， -d ：不写表的任何行信息，只转储表的结构。<br>--opt ：该选项是速记，它可以快速进行转储操作并产生一个能很快装入 MySQL 服务器的转储文件。该选项默认开启，<br>但可以用 --skip-opt 禁用。<br>-- <span class="hljs-keyword">password</span> [= <span class="hljs-keyword">password</span> ] ， -p[ <span class="hljs-keyword">password</span> ] ：当连接服务器时使用的密码。<br>-port=port_num ， -P port_num ：用于连接的 TCP/IP 端口号。<br>--protocol=&#123;TCP|SOCKET|PIPE|MEMORY&#125; ：使用的连接协议。<br>-- <span class="hljs-built_in">replace</span> ， -r –<span class="hljs-built_in">replace</span> 和 -- <span class="hljs-keyword">ignore</span> ：控制替换或复制唯一键值已有记录的输入记录的处理。如果指定 --<br><span class="hljs-built_in">replace</span> ，新行替换有相同的唯一键值的已有行；如果指定 -- <span class="hljs-keyword">ignore</span> ，复制已有的唯一键值的输入行被跳过。如果不<br>指定这两个选项，当发现一个复制键值时会出现一个错误，并且忽视文本文件的剩余部分。<br>--silent ， -s ：沉默模式。只有出现错误时才输出。<br>--socket=<span class="hljs-keyword">path</span> ， -S <span class="hljs-keyword">path</span> ：当连接 localhost 时使用的套接字文件（为默认主机）。<br>-- <span class="hljs-keyword">user</span> =user_name ， -u user_name ：当连接服务器时 MySQL 使用的用户名。<br>--verbose ， -v ：冗长模式，打印出程序操作的详细信息。<br>--xml ， -X ：产生 XML 输出。<br>————————————————<br>版权声明：本文为CSDN博主「qq_43085588」的原创文章，遵循CC <span class="hljs-number">4.0</span> <span class="hljs-keyword">BY</span>-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https://blog.csdn.net/qq_43085588/article/details/<span class="hljs-number">132085936</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>备份恢复</tag>
      
      <tag>数据迁移跨服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>celery经常出现worker卡住的情况</title>
    <link href="/2023/11/20/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/celery%E7%BB%8F%E5%B8%B8%E5%87%BA%E7%8E%B0worker%E5%8D%A1%E4%BD%8F%E7%9A%84%E6%83%85%E5%86%B5/"/>
    <url>/2023/11/20/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/celery%E7%BB%8F%E5%B8%B8%E5%87%BA%E7%8E%B0worker%E5%8D%A1%E4%BD%8F%E7%9A%84%E6%83%85%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="在使用celery的时候经常出现任务执行一般卡住，worker被占用，导致celery队列不断增加"><a href="#在使用celery的时候经常出现任务执行一般卡住，worker被占用，导致celery队列不断增加" class="headerlink" title="在使用celery的时候经常出现任务执行一般卡住，worker被占用，导致celery队列不断增加"></a>在使用celery的时候经常出现任务执行一般卡住，worker被占用，导致celery队列不断增加</h3><p>在celery的config的文件中增加配置</p><ol><li>如果当前worker的并发是prefork（多进程）,那么有可能是由于死锁原因造成！ 可以在配置中添加CELERYD_FORCE = True ，这样可以有效防止死锁 。</li><li>如果存在进程hanging的情况，也可以使用time_limit，设定任务的执行超时时间，当超过这个时间的话，就先生成新的进程，并通过信号将hanging的进程杀死<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CELERYD_FORCE</span>=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>celery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>celery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. Cookie、session、token</title>
    <link href="/2023/11/14/web%E7%9F%A5%E8%AF%86/3.uwsgi%E9%83%A8%E7%BD%B2vue%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2404/"/>
    <url>/2023/11/14/web%E7%9F%A5%E8%AF%86/3.uwsgi%E9%83%A8%E7%BD%B2vue%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2404/</url>
    
    <content type="html"><![CDATA[<h3 id="使用nginx部署vue项目后-刷新会找不到页面解决解决方法"><a href="#使用nginx部署vue项目后-刷新会找不到页面解决解决方法" class="headerlink" title="使用nginx部署vue项目后,刷新会找不到页面解决解决方法"></a>使用nginx部署vue项目后,刷新会找不到页面解决解决方法</h3><ol><li><p>增加nginx 配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>    ...<br>    location / &#123;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>以上配置允许Nginx尝试按照以下顺序查找文件：首先尝试匹配实际的文件路径 (u r i ) ，如果找不到匹配的文件，则尝试匹配路径加上斜杠 ( uri)，如果找不到匹配的文件，则尝试匹配路径加上斜杠 (uri)，如果找不到匹配的文件，则尝试匹配路径加上斜杠(uri/)，最后将请求定位到Vue应用的入口文件 (/index.html)。这样可以确保在刷新页面时，Nginx会正确地将请求导向Vue应用。</p></li><li><p>重新加载Nginx配置并重启Nginx服务。<br>整个配置文件和Nginx的位置可能因操作系统和安装方式而有所不同，一般在 Linux 系统下，配置文件路径位于 /etc/nginx/nginx.conf 或 /etc/nginx/sites-available/default。<br>修改配置文件后，要重新加载Nginx配置，可以使用以下命令（需要具有管理员权限）：</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>nginx 部署vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uwsgi</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个view在一行显示</title>
    <link href="/2023/11/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E4%B8%A4%E4%B8%AAview%20%E5%9C%A8%E4%B8%80%E8%A1%8C/"/>
    <url>/2023/11/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E4%B8%A4%E4%B8%AAview%20%E5%9C%A8%E4%B8%80%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cata-text&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cata-text-title&quot;</span>&gt;</span>章节目录<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">t-icon</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cata-icon&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;arrow-up-down-1&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;倒序&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">t-icon</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-text&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;sorted_book_list&quot;</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">sort_type</span> == <span class="hljs-number">0</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>倒序<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-text&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;sorted_book_list&quot;</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">sort_type</span> == <span class="hljs-number">1</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>正序<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">t-divider</span> <span class="hljs-attr">dashed</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>倒序<span class="hljs-tag">&lt;/<span class="hljs-name">t-divider</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="css-实现-了解-flex-flex-wrap"><a href="#css-实现-了解-flex-flex-wrap" class="headerlink" title="css 实现(了解 flex, flex-wrap)"></a>css 实现(了解 flex, flex-wrap)</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.cata-text</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: nowrap;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">7vh</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10</span>rpx;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10</span>rpx;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uwsgi最大监听队列</title>
    <link href="/2023/11/01/uwsgi/uwsgi%E6%9C%80%E5%A4%A7%E7%9B%91%E5%90%AC%E9%98%9F%E5%88%97/"/>
    <url>/2023/11/01/uwsgi/uwsgi%E6%9C%80%E5%A4%A7%E7%9B%91%E5%90%AC%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Listen queue size is greater than the system max net.core.<span class="hljs-built_in">somaxconn</span> (<span class="hljs-number">128</span>).<br></code></pre></td></tr></table></figure><p>意思是：监听的队列大小大于了系统配置的最大值128。也就是说，我们uwsgi最大只能监听128个连接，如果超过这个数量，则无法响应额外的请求了。</p><p>因为在uwsgi的配置文件中设置 listen 大于了128 但是系统不支持</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>修改配置文件/etc/sysctl.conf<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 增加配置</span><br><span class="hljs-attr">net.core.somaxconn</span> = <span class="hljs-number">65535</span><br></code></pre></td></tr></table></figure></li><li>配置生效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">执行<br>sysctl -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>uwsgi</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实现当滚动条滚动一定距离后tab固定在顶部</title>
    <link href="/2023/09/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E7%8E%B0%E5%BD%93%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%BB%9A%E5%8A%A8%E4%B8%80%E5%AE%9A%E8%B7%9D%E7%A6%BB%E5%90%8Etab%E5%9B%BA%E5%AE%9A%E5%9C%A8%E9%A1%B6%E9%83%A8/"/>
    <url>/2023/09/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E5%AE%9E%E7%8E%B0%E5%BD%93%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%BB%9A%E5%8A%A8%E4%B8%80%E5%AE%9A%E8%B7%9D%E7%A6%BB%E5%90%8Etab%E5%9B%BA%E5%AE%9A%E5%9C%A8%E9%A1%B6%E9%83%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="这个情况是在已知上面高度，或者决定滑动多高后固定"><a href="#这个情况是在已知上面高度，或者决定滑动多高后固定" class="headerlink" title="这个情况是在已知上面高度，或者决定滑动多高后固定"></a>这个情况是在已知上面高度，或者决定滑动多高后固定</h3><p><img src="/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F/1695889812413.jpg" alt="数据集"><br><img src="/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2.jpg" alt="数据集"></p><ol><li><p>xx.wxml(主要是 下边这个三目计算 当高度 大于 170 的时候设置一个class)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;view class=&quot;stack-page-tabs &#123;&#123;scrollTop &gt; 170? &#x27;totop&#x27;:&#x27;&#x27;&#125;&#125;&quot;&gt;<br>    &lt;t-tabs<br>      t-class=&quot;t-tabs&quot;<br>      t-class-active=&quot;tabs-external__active&quot;<br>      t-class-item=&quot;tabs-external__item&quot;<br>      defaultValue=&quot;&#123;&#123;0&#125;&#125;&quot;<br>      space-evenly=&quot;&#123;&#123;false&#125;&#125;&quot;<br>      bind:change=&quot;tabChangeHandle&quot;<br>    &gt;<br>      &lt;t-tab-panel<br>        wx:for=&quot;&#123;&#123;tabList&#125;&#125;&quot;<br>        wx:for-index=&quot;index&quot;<br>        wx:key=&quot;index&quot;<br>        label=&quot;&#123;&#123;item.text&#125;&#125;&quot;<br>        value=&quot;&#123;&#123;item.key&#125;&#125;&quot;<br>      /&gt;<br>    &lt;/t-tabs&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></table></figure></li><li><p>wxss(自定义挂在顶部的样式)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.totop</span>&#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#fff</span>; <br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>js</p></li></ol><p>data 中添加属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">scrollTop</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 滚动条滑动距离</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>监听滚动条修改属性(添加在下边)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">onPageScroll</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">scrollTop</span>: e.<span class="hljs-property">scrollTop</span><br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>滑动顶部固定</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序引入tdesign的tabBar</title>
    <link href="/2023/09/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%95%E5%85%A5tdesign%E7%9A%84tabBar/"/>
    <url>/2023/09/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%95%E5%85%A5tdesign%E7%9A%84tabBar/</url>
    
    <content type="html"><![CDATA[<blockquote><p>小程序官方文档 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html</a><br>tdesign 文档 <a href="https://tdesign.tencent.com/miniprogram/components/icon">https://tdesign.tencent.com/miniprogram/components/icon</a></p></blockquote><h3 id="app-json-配置"><a href="#app-json-配置" class="headerlink" title="app.json 配置"></a>app.json 配置</h3><ol><li>在json中增加 tabBar</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;custom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 是否使用自定义组件</span><br>   <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#666666&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;selectedColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#2894FF&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;borderStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>  <span class="hljs-comment">// 所有页面</span><br>     <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;书架&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/bookrack/bookrack&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;书库&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/stack/stack&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;个人中心&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/usercenter/usercenter&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">]</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="新增custom-tab-bar-组件"><a href="#新增custom-tab-bar-组件" class="headerlink" title="新增custom-tab-bar 组件"></a>新增custom-tab-bar 组件</h3><ol><li>data.js tab数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [ <span class="hljs-comment">// 具体的</span><br>  &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tab&#x27;</span>,<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;书架&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;pages/bookrack/bookrack&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;书城&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;pages/stack/stack&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;user&#x27;</span>,<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;个人中心&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;pages/usercenter/usercenter&#x27;</span><br>  &#125;<br>];<br><br></code></pre></td></tr></table></figure><ol start="2"><li>index.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">TabMenu</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data&#x27;</span>;<br><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">active</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">// 默认选中的value</span><br>    <span class="hljs-attr">list</span>: <span class="hljs-title class_">TabMenu</span>,  <span class="hljs-comment">// tab 列表</span><br>  &#125;,<br><br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 点击tab的时候</span><br>    <span class="hljs-title function_">onChange</span>(<span class="hljs-params">event</span>) &#123;<br>      <span class="hljs-comment">// 切换 选中的值</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123; <span class="hljs-attr">active</span>: event.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span> &#125;); <br>      <span class="hljs-comment">// 调用wx切换tab 方法，切换页面</span><br>      wx.<span class="hljs-title function_">switchTab</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>[event.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span>].<span class="hljs-property">url</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>          ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>[event.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span>].<span class="hljs-property">url</span><br>          : <span class="hljs-string">`/<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.data.list[event.detail.value].url&#125;</span>`</span>,<br>      &#125;);<br>    &#125;,<br><br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 初始化页面，主要是 初始化 active , 在需要展示的界面的onshow方法中调用</span><br>      <span class="hljs-keyword">const</span> page = <span class="hljs-title function_">getCurrentPages</span>().<span class="hljs-title function_">pop</span>();<br>      <span class="hljs-keyword">const</span> route = page ? page.<span class="hljs-property">route</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;?&#x27;</span>)[<span class="hljs-number">0</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br>      <span class="hljs-keyword">const</span> active = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">findIndex</span>(<br>        <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>          (item.<span class="hljs-property">url</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;/&#x27;</span>) ? item.<span class="hljs-property">url</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>) : item.<span class="hljs-property">url</span>) ===<br>          <span class="hljs-string">`<span class="hljs-subst">$&#123;route&#125;</span>`</span>,<br>      );<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123; active &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><br></code></pre></td></tr></table></figure><ol start="3"><li>index.json</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;component&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;usingComponents&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;t-tab-bar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tdesign-miniprogram/tab-bar/tab-bar&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;t-tab-bar-item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tdesign-miniprogram/tab-bar-item/tab-bar-item&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;t-icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tdesign-miniprogram/icon/icon&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>index.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">t-tab-bar</span></span><br><span class="hljs-tag"> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;active&#125;&#125;&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">bindchange</span>=<span class="hljs-string">&quot;onChange&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">split</span>=<span class="hljs-string">&quot;&#123;&#123;false&#125;&#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">t-tab-bar-item</span></span><br><span class="hljs-tag"> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;list&#125;&#125;&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-tab-bar-wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">t-icon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&#123;&#123;item.icon&#125;&#125;&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;48rpx&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">t-tab-bar-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">t-tab-bar</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>index.wxss</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.custom-tab-bar-wrapper</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.custom-tab-bar-wrapper</span> <span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20</span>rpx;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="具体提页面初始化tabBar-pages-bookrack-bookrack页面"><a href="#具体提页面初始化tabBar-pages-bookrack-bookrack页面" class="headerlink" title="具体提页面初始化tabBar(pages/bookrack/bookrack页面)"></a>具体提页面初始化tabBar(pages/bookrack/bookrack页面)</h3><ol><li>index.js (在onShow中初始化tabBar)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">onShow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getTabBar</span>().<span class="hljs-title function_">init</span>();<br>  &#125;,<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tdesign的tabBar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按需引入组件</title>
    <link href="/2023/09/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6/"/>
    <url>/2023/09/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="修改全局配置文件-app-json"><a href="#修改全局配置文件-app-json" class="headerlink" title="修改全局配置文件 app.json"></a>修改全局配置文件 app.json</h2><p>添加 lazyCodeLoading 配置</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">在app.<span class="hljs-keyword">json </span>最后添加<br><span class="hljs-string">&quot;lazyCodeLoading&quot;</span>: <span class="hljs-string">&quot;requiredComponents&quot;</span>,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>按需引入组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.认识小程序的基础组成结构</title>
    <link href="/2023/09/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/1-%E8%AE%A4%E8%AF%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84/"/>
    <url>/2023/09/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/1-%E8%AE%A4%E8%AF%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="基础组成"><a href="#基础组成" class="headerlink" title="基础组成"></a>基础组成</h2><p><img src="/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230922222615.png" alt="数据集"></p><ul><li>pages 用来存放所有小程序的页面<ul><li>index 文件（页面项目）<ul><li>.js 文件（页面的脚本文件，存放页面的数据、事件处理函数）</li><li>.json 文件（当前页面的配置文件，配置窗口的外观、表现等）</li><li>.wxml 文件（页面的模板结构文件）</li><li>.wxss 文件（当前页面的样式文件）</li></ul></li></ul></li><li>components 用来存放小程序的自定义组件</li><li>utils 用来存放工具性质的模块（例如：格式化时间的自定义模块）</li><li>app.js 小程序项目的入口</li><li>app.json 小程序项目的全局配置文件</li><li>app.wxss 小程序的全局样式文件</li><li>project.config.json 项目的配置文件</li><li>sitemap.json 用来配置小程序及其页面是否允许被微信索引</li></ul><h2 id="json-配置文件"><a href="#json-配置文件" class="headerlink" title="json 配置文件"></a>json 配置文件</h2><p>在小程序中可以根据不同的 .json 文件，对象程序项目进行不同级别的配置。</p><h3 id="1-项目根目录中的app-json-配置文件"><a href="#1-项目根目录中的app-json-配置文件" class="headerlink" title="1. 项目根目录中的app.json 配置文件"></a>1. 项目根目录中的app.json 配置文件</h3><p>是当前小程序的全局配置文件，包含了小程序的所有页面路径、窗口外观、界面表现、底部tab 等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 用来记录当前小程序所有的路径，小程序会把放在第一位的页面，当作项目首页进行渲染。</span><br>    <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 全局定义小程序所有页面的背景颜色、文字颜色等。</span><br>    <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;custom&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 全局定义小程序组件所使用的样式版本</span><br>  <span class="hljs-attr">&quot;renderer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;skyline&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;rendererOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;skyline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;defaultDisplayBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;disableABTest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sdkVersionBegin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sdkVersionEnd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15.255.255&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;componentFramework&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;glass-easel&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sitemapLocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sitemap.json&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// </span><br>  <span class="hljs-attr">&quot;lazyCodeLoading&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;requiredComponents&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-项目根目录中的project-config-json-配置文件"><a href="#2-项目根目录中的project-config-json-配置文件" class="headerlink" title="2. 项目根目录中的project.config.json 配置文件"></a>2. 项目根目录中的project.config.json 配置文件</h3><ul><li>setting 中保存了编译相关的配置（比如在小程序开发工具中的一些设置体现在这里）<ul><li>setting.checkSiteMap  底部框是否提示提醒警告</li></ul></li><li>projectname 中保存的是项目名称(项目名称 != 小程序名称)</li><li>appid 中保存的是小程序的账号ID<h3 id="3-项目根目录中的-sitemap-json-配置文件"><a href="#3-项目根目录中的-sitemap-json-配置文件" class="headerlink" title="3. 项目根目录中的 sitemap.json 配置文件"></a>3. 项目根目录中的 sitemap.json 配置文件</h3>用来配置小程序页面是否允许微信搜索<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;desc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 配置规则</span><br>  <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;allow&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// disallow 禁止索引</span><br>  <span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span>  <span class="hljs-comment">// 所有页面都可以被索引</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-每个页面文件夹中的-json-配置文件"><a href="#4-每个页面文件夹中的-json-配置文件" class="headerlink" title="4. 每个页面文件夹中的 .json 配置文件"></a>4. 每个页面文件夹中的 .json 配置文件</h3>可以用 .json 文件来对本页面的窗口外观进行配置，页面中的配置项会覆盖 app.json 的 windows 中相同的配置项目</li></ul><h2 id="js-文件"><a href="#js-文件" class="headerlink" title=".js 文件"></a>.js 文件</h2><h3 id="1-app-js"><a href="#1-app-js" class="headerlink" title="1. app.js"></a>1. app.js</h3><p>整个小程序的入口文件</p><h3 id="2-页面的-js文件"><a href="#2-页面的-js文件" class="headerlink" title="2. 页面的.js文件"></a>2. 页面的.js文件</h3><p>页面的入口文件，通过调用 Page() 函数来创建并运行页面</p><h3 id="3-普通的js文件"><a href="#3-普通的js文件" class="headerlink" title="3. 普通的js文件"></a>3. 普通的js文件</h3><p>用来封装公共的方法和属性供页面使用</p>]]></content>
    
    
    <categories>
      
      <category>小程序学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件了解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.基本组件认识和使用 js</title>
    <link href="/2023/09/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%95%E5%85%A5tdesign-miniprogram/"/>
    <url>/2023/09/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%95%E5%85%A5tdesign-miniprogram/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://tdesign.tencent.com/miniprogram/getting-started">https://tdesign.tencent.com/miniprogram/getting-started</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> tdesign-miniprogram -S <span class="hljs-attr">--production</span><br></code></pre></td></tr></table></figure><h2 id="去掉app-json-中的组件方式-v2"><a href="#去掉app-json-中的组件方式-v2" class="headerlink" title="去掉app.json 中的组件方式 v2"></a>去掉app.json 中的组件方式 v2</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v2&quot;</span><br></code></pre></td></tr></table></figure><h2 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h2><p>project.config.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;setting&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;packNpmManually&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;packNpmRelationList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;packageJsonPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./package.json&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;miniprogramNpmDistDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./miniprogram/&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="单独引用"><a href="#单独引用" class="headerlink" title="单独引用"></a>单独引用</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  &quot;usingComponents&quot;: &#123;<br>    &quot;t-<span class="hljs-selector-tag">button</span>&quot;: <span class="hljs-string">&quot;tdesign-miniprogram/button/button&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序tdesign-miniprogram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改pip源</title>
    <link href="/2023/08/30/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%BF%AE%E6%94%B9pip%E6%BA%90/"/>
    <url>/2023/08/30/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%BF%AE%E6%94%B9pip%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p>Linux系统：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mkdir ~/.pip<br>cat &gt; ~/.pip/pip.conf &lt;&lt; EOF<br>[<span class="hljs-keyword">global</span>]<br><span class="hljs-keyword">trusted</span>-host=mirrors.aliyun.com<br><span class="hljs-keyword">index</span>-url=https://mirrors.aliyun.com/pypi/simple/<br></code></pre></td></tr></table></figure><p>Windows系统：<br>首先在window的文件夹窗口输入 ： %APPDATA%<br>然后创建pip文件夹<br>最后创建pip.ini文件，写入如下内容</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">global</span>]<br><span class="hljs-keyword">index</span>-url = https://mirrors.aliyun.com/pypi/simple/<br>[install]<br><span class="hljs-keyword">trusted</span>-host=mirrors.aliyun.com<br></code></pre></td></tr></table></figure><p>或者临时</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple gevent<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pip相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python字典Dict类型底层原理.md</title>
    <link href="/2023/08/29/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/python%E5%AD%97%E5%85%B8Dict%E7%B1%BB%E5%9E%8B%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2023/08/29/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/python%E5%AD%97%E5%85%B8Dict%E7%B1%BB%E5%9E%8B%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>都知道python字典类型时间复杂度是O(1),是以空间换时间的一种数据类型，那么为什么字典的可以这么快？使用的时候又应该注意什么呢？</p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>dict 底层是一个维护这一张哈希表，哈希表中存储了哈希值、键、值。dict的查询速度就是因为哈希值进行提升的。</p><p>备注：哈希值，在python中，不可变对象都又一个唯一哈希值，可使用方法查看： hash(“刘”) </p><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><p>首先将键进行hash运算，得到一个hash值，让后将相应的值存在以该hash值为下表的数组空间中。</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>同样对键进行hash，然后根据这个hash值，从列表中进行下标取值。</p><h2 id="哈希碰撞解决办法"><a href="#哈希碰撞解决办法" class="headerlink" title="哈希碰撞解决办法"></a>哈希碰撞解决办法</h2><pre><code class="hljs">很明显对于这些键进行hash的时候，有的时候会发现hash值是一样的，这就产生了hash碰撞的问题</code></pre><ol><li>开放寻址<br>开放寻址法中，所有的元素都存放在散列表里，当产生哈希冲突时，通过一个探测函数计算出下一个候选位置，如果下一个获选位置还是有冲突，那么不断通过探测函数往下找，直到找个一个空槽来存放待插入元素。</li><li>再哈希法<br>这个方法是按顺序规定多个哈希函数，每次查询的时候按顺序调用哈希函数，调用到第一个为空的时候返回不存在，调用到此键的时候返回其值。</li><li>链地址法<br>将所有关键字哈希值相同的记录都存在同一线性链表中，这样不需要占用其他的哈希地址，相同的哈希值在一条链表上，按顺序遍历就可以找到。</li><li>公共溢出区<br>其基本思想是：所有关键字和基本表中关键字为相同哈希值的记录，不管他们由哈希函数得到的哈希地址是什么，一旦发生冲突，都填入溢出表。<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2></li><li>Python会根据哈希数组的拥挤程度对其扩容。“扩容”指的是:创造更大的数组，这时候会对已经存在的键值对重新进行哈希取余运算保存到其它位置；一般接近 2/3 时，数组就会扩容。扩容后，偏移量的数字个数增加，如数组长度扩容到16时，可以用最右边4位数字作为偏移量。</li><li>往字典里添加新建可能导致扩容，导致哈希数组中键的次序变化。因此，不要再遍历字典的同时进行字典的修改。</li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24.python访问者模式</title>
    <link href="/2023/08/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/24-python%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/08/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/24-python%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><p>访问者模式在实际开发中使用的非常少，因为它比较难以实现并且应用该模式肯定会导致代码的可读性变差，可维护性变差，在没有特别必要的情况下，不建议使用访问者模式。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>允许在运行时将一个或者多个操作应用于一组对象，将操作与对象结构分离。</p><p>访问者模式：主要解决数据与算法的耦合问题，尤其是在数据结构比较稳定，而算法多变的情况下，为了不污染数据本身，访问者会将多种算法独立归档，并在访问数据时根据数据类型自动切换到对象的算法，实现数据的自动响应机制，并确保算法的自由扩展。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象元素（Element）: 被访问的元素接口，定义了一个接收访问者的方法accept(visitor: Visitor),这么做的目的要每一个元素都可以被访问者访问。</li><li>具体元素类（ConcreteElement）: 对accept方法进行具体的实现，这个具体的实现通常情况是使用访问者提供的访问该元素类的方法，accept方法中通常是调用访问者将自己传回去。</li><li>抽象访问者(Visitor): 定义了一系列操作方法，用来处理数据元素，<em>通常都是同名方法，重载形式出现，以具体传入的数据元素进行区分，选择对应的重载方法</em>（python目前没有找到一个类可以创建有多个同名方法的方法）。</li><li>具体访问者(ConcreteVisitor): 实现了访问者接口</li><li>对象结构(ObjectStructure):即聚合对象，持有一个抽象元素的聚合引用，并提供<strong>添加元素、获取元素、移除元素、访问元素</strong>的方法。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>当对象的数据结构相对稳定，而<strong>操作</strong>却经常变化的时候。比如：发送数据、接收数据。</li><li>需要将数据结构与不常用的操作进行分离的时候。比如：扫描文件内容这个动作通常不是文件常用的操作，但对于文件夹和文件说，和数据结构本身没有太大关系（树形结构的遍历操作），扫描是一个额外的动作，如果给每个文件都添加一个扫描操作会太过于重复冗余，这是采用访问者模式是非常合适的，能够很好分离文件自身的遍历操作和外部的扫描操作。</li><li>需要在运行时动态决定使用哪些对象和方法的时候。比如：对于监控系统来说，很多时候需要监控运行时的程序状态，但大多数时候又无法预知对象变成时的状态和参数，这时使用访问者模式就可以动态增加监控行为。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>扩展性好<br> 在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</li><li>复用性好<br> 通过访问者来定义整个对象结构通用的功能，从而提高复用程度。</li><li>分离无关行为<br> 通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>对象结构变化困难<br>在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，者违背了开闭原则。</li><li>违反了依赖倒置原则<br>访问者模式依赖了具体类，而没有依赖抽象类</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>CEO要查看工程师和经理的KPI， CTO要查看工程师和经理的代码量和创新点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Staff</span>:<br>    <span class="hljs-string">&quot;Element：元素接口或者抽象类&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.name = name<br>        self.kpi = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">self, vistor</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Engineer</span>(<span class="hljs-title class_ inherited__">Staff</span>):<br>    <span class="hljs-string">&quot;工程师 具体的元素类，&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">self, vistor</span>):<br>        <span class="hljs-keyword">return</span> vistor.visit_e(self)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getCodeLines</span>():<br>        <span class="hljs-keyword">return</span> random.randint(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-title class_ inherited__">Staff</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">self, vistor</span>):<br>        <span class="hljs-keyword">return</span> vistor.visit_m(self)<br>    <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getProducts</span>():<br>        <span class="hljs-keyword">return</span> random.randint(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br><br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Visitor</span>:<br>    <span class="hljs-comment"># 抽象访问者</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">visit_e</span>(<span class="hljs-params">self, engineer: Engineer</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">visit_m</span>(<span class="hljs-params">self, manager: Manager</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CEOVisitor</span>(<span class="hljs-title class_ inherited__">Visitor</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;变动修改&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">visit_e</span>(<span class="hljs-params">self, engineer: Engineer</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;关注程序员的kpi</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            engineer (Engineer): _description_</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;工程师: &quot;</span> + engineer.name + <span class="hljs-string">&quot;, KPI: &quot;</span> + <span class="hljs-built_in">str</span>(engineer.kpi))<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">visit_m</span>(<span class="hljs-params">self, manager: Manager</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;经理: &quot;</span> + manager.name + <span class="hljs-string">&quot;, KPI: &quot;</span> + <span class="hljs-built_in">str</span>(manager.kpi))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CTOVisitor</span>(<span class="hljs-title class_ inherited__">Visitor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">visit_e</span>(<span class="hljs-params">self, engineer: Engineer</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;工程师: &quot;</span> + engineer.name + <span class="hljs-string">&quot;, 代码行数: &quot;</span> + <span class="hljs-built_in">str</span>(engineer.getCodeLines()))<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">visit_m</span>(<span class="hljs-params">self, manager: Manager</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;经理: &quot;</span> + manager.name + <span class="hljs-string">&quot;, 产品数量: &quot;</span> + <span class="hljs-built_in">str</span>(manager.getProducts()))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessReport</span>:<br>    mStaffs = []<br>    mStaffs.append(Manager(<span class="hljs-string">&quot;经理-A&quot;</span>))<br>    mStaffs.append(Engineer(<span class="hljs-string">&quot;工程师-A&quot;</span>))<br>    mStaffs.append(Manager(<span class="hljs-string">&quot;经理-B&quot;</span>))<br>    mStaffs.append(Engineer(<span class="hljs-string">&quot;工程师-B&quot;</span>))<br>    mStaffs.append(Manager(<span class="hljs-string">&quot;经理-C&quot;</span>))<br>    mStaffs.append(Engineer(<span class="hljs-string">&quot;工程师-C&quot;</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">showReport</span>(<span class="hljs-params">self, visitor: Visitor</span>):<br>        <span class="hljs-keyword">for</span> staff <span class="hljs-keyword">in</span> self.mStaffs:<br>            staff.accept(visitor)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    report = BusinessReport()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=========== CEO看报表 ===========&quot;</span>)<br>    report.showReport(CEOVisitor())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=========== CTO看报表 ===========&quot;</span>)<br>    report.showReport(CTOVisitor())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>访问者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23.python解释器模式</title>
    <link href="/2023/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23-python%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23-python%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h1><p>使用频率不高，通常用来描述如何构建一个简单“语言”的语法解释器。他只是在一些非常特定的领域被用到，比如编译器、规则引擎、正则表达式、SQL解析等。不过，了解它的实现原理同样很重要，能帮助你思考如何通过更简洁的规则来表示复杂的逻辑。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>用于定义语言的语法规则表示，并提供解释器来处理句子中的语法。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象表达式(AbstractExpression): 定义解释器接口，约定解释器的操作，主要包含 interpret()</li><li>终结符表达式(TerminalExpression): 用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体的终结符表达式与之对应。(比如在r = r1 + r2, + 就是非终结符， r1, r2 就是终结符)</li><li>非终结表达式(NonTerminalExpression): 用来实现文法中与非终结符相关的操作，文法中的每条规则都对应一个非终结表达式。</li><li>环境类(context)： 包含各个解释器需要的数据或者公共的功能，一般用来传递所有解释器共享的数据。（比如： r = r1 + r2, 我们给r1 赋值100， 给 r2赋值200， 这些信息需要放在环境类，很多情况下通过字典充当环境角色。）</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>当语言的文法比较简单，并且执行的效率不是关键</li><li>当问题重复出现，且可以用一种简单的语言进行表达的时候</li><li>当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>易于改变和扩展文法：因为在解释器模式中使用类来表示语言的文法规则，因此就可以通过继承等机制改变或者扩展文法，每一个文法规则都可以表示为一个类，因此我们可以快速的实现一个迷你的语言。</li><li>实现文法比较容易： 在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂</li><li>增加新的解释表达式比较方便： 如果用户需要增加新的解释表达式只需要对应增加一个新的表达式类就可以了。原有的表达式类不需要修改。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>对于复杂文法难以维护：在解释器中一条规则至少要定义一个类，因此一个语言中如果有太多的文法规则，就会使类的个数急剧增加，当值系统的维护难以管理。</li><li>执行效率低： 在解释器模式中大量的使用了循环和递归调用，所有复杂的句子执行起来，整个过程也非常的繁琐。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> abstractmethod, ABCMeta<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Expression</span>(metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;抽象表达式接口</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        metaclass (_type_, optional): _description_. Defaults to ABCMeta.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumExpression</span>(<span class="hljs-title class_ inherited__">Expression</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;终结符表达式</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        Expression (_type_): _description_</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.key = key<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(self.key)<br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddExpression</span>(<span class="hljs-title class_ inherited__">Expression</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;非终结符表达式 加法</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        Expression (_type_): _description_</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num1: Expression, num2: Expression</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.left_expression = num1<br>        self.right_expression = num2<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.left_expression.interpret() + self.right_expression.interpret()<br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubExpression</span>(<span class="hljs-title class_ inherited__">Expression</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;非终结符表述式 减法</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        Expression (_type_): _description_</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num1: Expression, num2: Expression</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.left_expression = num1<br>        self.right_expression = num2<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.left_expression.interpret() - self.right_expression.interpret()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MulExpression</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;非终结表达式 乘法</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        Exception (_type_): _description_</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num1: Expression, num2: Expression</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.left_expression = num1<br>        self.right_expression = num2<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.left_expression.interpret() * self.right_expression.interpret()<br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DivExpression</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;非终结表达式 除法</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        Exception (_type_): _description_</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num1: Expression, num2: Expression</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.left_expression = num1<br>        self.right_expression = num2<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.left_expression.interpret() / self.right_expression.interpret()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        环境类</span><br><span class="hljs-string">        这里可以简单写成一个map + 映射AddExpression</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, expression: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.__elements = expression.split(<span class="hljs-string">&quot; &quot;</span>)<br>        self.__numbers: Expression = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_numbers</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> self.__elements[: <span class="hljs-built_in">int</span>((<span class="hljs-built_in">len</span>(self.__elements) + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>)]:    <br>            self.__numbers.append(NumExpression(item))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> self.__elements[<span class="hljs-built_in">int</span>((<span class="hljs-built_in">len</span>(self.__elements) + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>):]:<br>            left_number = self.__numbers.pop(<span class="hljs-number">0</span>)<br>            right_number = self.__numbers.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> item == <span class="hljs-string">&quot;+&quot;</span>:<br>                result = AddExpression(left_number, right_number).interpret()<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-string">&quot;-&quot;</span>:<br>                result = SubExpression(left_number, right_number).interpret()<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-string">&quot;*&quot;</span>:<br>                result = MulExpression(left_number, right_number).interpret()<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-string">&quot;/&quot;</span>:<br>                result = DivExpression(left_number, right_number).interpret()<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;表述式错误&quot;</span>)<br>            self.__numbers.insert(<span class="hljs-number">0</span>, NumExpression(result))<br>        <span class="hljs-keyword">return</span> self.__numbers.pop(<span class="hljs-number">0</span>).interpret()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    context = Context(<span class="hljs-string">&quot;1 2 3 + *&quot;</span>)<br>    context.set_numbers()<br>    <span class="hljs-built_in">print</span>(context.interpret())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>解释器模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22.python迭代器模式</title>
    <link href="/2023/08/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22-python%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/08/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22-python%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><p>迭代器模式是我们学习一个设计时很少用到的，但编码中经常会用到，因为迭代器已经成为一个基础的类库，直接用来遍历对象。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>迭代器提供一种对容器对象中的各个元素进行访问的方法，而又不需要暴露该对象的内部细节。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。</li><li>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</li><li>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 has_next()、reset()、next() 等方法。</li><li>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><p>减少程序中重复的遍历代码<br>对于放入一个集合容器中的多个对象来说，访问必然涉及遍历算法。如果我们不将遍历算法封装到容器里(比如: list、set、dict),那么就需要使用容器的人自行去实现遍历算法，这样容易造成很多重复的循环和条件判断语句出现，不利于代码的复用和扩展，同时还会暴露不同容器的内部结构。而是用迭代器模式是将遍历算法作为容器对象自身的一种属性方法来使用，能够有效的避免很多重复的代码，同时又不暴露内部结构。</p></li><li><p>当需要为遍历不同的集合结构提共一个统一的接口时或者当访问一个集合对象的内容而无需暴露其内部细节的表示时。<br> 迭代器模式把对不同模式类的访问逻辑抽象出来，这样在不用暴露集合内部结构的情况下，可以隐藏不同集合遍历需要使用的算法，同时还能够对外提供更为简便的访问算法接口</p></li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>迭代器模式支持以不同方式遍历一个集合对象，在同一个集合对象上可以定义多种遍历方式，在迭代器模式中只需要用一个不同的迭代器替换原有的迭代器，即可改变遍历算法，也可以定义迭代器的子类以支持新的遍历方式。</li><li>迭代器简化了集合类。由于引入了迭代器，在原有的集合对象中不需要再自行提供数据遍历方法，这样可以简化集合类的设计。</li><li>再迭代器模式中，由于引入了抽象层，增加新的集合类和迭代器类都很方便，无需修改原有代码，满足‘基于接口编程’和‘开闭原则’的要求。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>由于迭代器模式将存储数据和遍历数据的职责分离，增加了类的个数，这在一定程度上增加了系统的复杂性。</li><li>抽象迭代器的设计难度较大，需要充分考虑到系统将来的扩展。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li><p>设计模式概念实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> abstractmethod, ABCMeta<br><br><br><span class="hljs-comment"># 抽象迭代器接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Iterator</span>(metaclass=ABCMeta):<br>    <br>    <span class="hljs-comment"># 重置游标</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># 游标后移</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># 判断是否还有下一个</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_next</span>(<span class="hljs-params">self</span>)-&gt;<span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># 获取当前游标指向的值</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">current_item</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 抽象聚合</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListList</span>(metaclass=ABCMeta):<br><br>    <span class="hljs-comment"># 获取迭代器方法</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">iterator</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 主题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Topic</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.name = name<br><br><br><span class="hljs-comment"># 具体迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TopicIterator</span>(<span class="hljs-title class_ inherited__">Iterator</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, topics</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.topics = topics<br>        self.current = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 重置游标</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.current = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 游标后移</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span>(self.has_next):<br>            self.current += <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 判断是否还有下一个</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_next</span>(<span class="hljs-params">self</span>)-&gt;<span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> self.current &lt; <span class="hljs-built_in">len</span>(self.topics)<br><br>    <span class="hljs-comment"># 获取当前游标指向的值</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">current_item</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.topics[self.current]<br><br><br><span class="hljs-comment"># 具体聚合</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TopicList</span>(<span class="hljs-title class_ inherited__">ListList</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, topics</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.topics = topics<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">iterator</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> TopicIterator(self.topics)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    topics = []<br>    topics.append(Topic(<span class="hljs-string">&quot;t0&quot;</span>))<br>    topics.append(Topic(<span class="hljs-string">&quot;t1&quot;</span>))<br>    topics.append(Topic(<span class="hljs-string">&quot;t2&quot;</span>))<br>    topics.append(Topic(<span class="hljs-string">&quot;t3&quot;</span>))<br>    topicList = TopicList(topics=topics)<br>    iterator1 = topicList.iterator()<br>    <span class="hljs-keyword">while</span>(iterator1.has_next()):<br>        topic = iterator1.current_item()<br>        <span class="hljs-built_in">print</span>(topic.name)<br>        iterator1.<span class="hljs-built_in">next</span>()<br></code></pre></td></tr></table></figure></li><li><p>python3 实现<br>在python3中每一个类有 <strong>iter</strong> （返回迭代器对象本身） 和 <strong>next</strong> （获取下一个对象）方法可实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">（具体迭代器方法）<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.data: <span class="hljs-built_in">list</span> = data<br>        self.current = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.current &gt;= <span class="hljs-built_in">len</span>(self.data):<br>            <span class="hljs-keyword">raise</span> StopIteration<br>        <br>        result = self.data[self.current]<br>        self.current += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> result<br>    <br>my_iterator = MyIterator([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> my_iterator:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迭代器模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21.python备忘录模式</title>
    <link href="/2023/08/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21-python%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/08/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21-python%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将的对象恢复到原先保存的状态。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>Originator 发起人角色: 要求被备份的角色，包含创建备忘录和恢复备忘录角色的功能。</li><li>Caretaker 看护人: 客户端经过看护人访问备忘录。</li><li>Memento 备忘录角色: 存储发起人的内部状态</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>需要保存一个对象在某一时刻的状态时，可以使用备忘录模式。</li><li>不希望外界直接访问对象内部状态时。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>提供了一种状态恢复的实现机制，使得用户可以方便的回到一个特定的历史步骤，当新的状态无效或者存在问题的时候，可以使用暂时存储起来的备忘录进行恢复。</li><li>实现了对信息的封装，一个备忘录对象是一种发起者对象状态的表示，不会被其他代码所改动。备忘录保存了发起者的状态，采用集合来存储备忘录可以实现多次撤销的操作。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>资源消耗过大，如果需要保存的发起者类的成员变量比较多，就不可避免的需要占用大量的存储空间，每保存一次对象的状态，都需要消耗一定系统资源。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, state</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.state = state<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_state</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.state<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Originator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, state</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.state = state<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_memento</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 创建备忘录</span><br>        <span class="hljs-keyword">return</span> Memento(self.state)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">restore_memento</span>(<span class="hljs-params">self, memento</span>):<br>        <span class="hljs-comment"># 恢复备忘录</span><br>        self.state = memento.get_state()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_state</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.state<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_state</span>(<span class="hljs-params">self, state</span>):<br>        self.state = state<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.mementos = []<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_memento</span>(<span class="hljs-params">self, memento</span>):<br>        self.mementos.append(memento)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_memento</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">return</span> self.mementos[index]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    originator = Originator(<span class="hljs-string">&quot;状态1&quot;</span>)<br>    memento = originator.create_memento()<br>    caretaker = Caretaker()<br>    caretaker.add_memento(memento=memento)<br>    <span class="hljs-built_in">print</span>(originator.get_state())<br><br>    originator.set_state(<span class="hljs-string">&quot;状态2&quot;</span>)<br>    memento = originator.create_memento()<br>    caretaker.add_memento(memento=memento)<br>    <span class="hljs-built_in">print</span>(originator.get_state())<br><br>    <span class="hljs-comment"># 恢复</span><br>    memento = caretaker.get_memento(<span class="hljs-number">0</span>)<br>    originator.restore_memento(memento)<br>    <span class="hljs-built_in">print</span>(originator.get_state())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20.python状态模式</title>
    <link href="/2023/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20-python%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20-python%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><p>备注: 状态模式和策略模式区别： 状态模式不同状态下做的事情不同，而策略模式做的都是同一件事情。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的累。<br>用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象状态类</li><li>具体状态类：根据具体场景来实现状态改变后的具体场景</li><li>上下文场景类： 包含抽象状态类的引用，调用具体状态类。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>对象根据自身状态的变化来进行不同行为的操作时，比如：购物订单状态。</li><li>对象需要根据自身变量的当前值改变行为，不期望使用大量if-else语句时，比如，商品库存状态</li><li>对于某些确定的状态和行为，不想使用重复代码时，比如，某一个会员当天的购物浏览记录。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>将所有与某个状态有关的行为放到一个类中，并且可以方便的增加新的状态，只需要改变对象状态即可改变对象的行为。</li><li>允许状态转换逻辑与状态对象合成一体，而不是某个巨大的条件语句块。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>状态模式的使用必然会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li><li>状态模式对开闭原则的支持并不好（添加新的状态类需要修改那些负责状态转换的源代码。）</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br> <br><span class="hljs-comment"># 定义抽象状态类， 定义开关接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_on</span>(<span class="hljs-params">self, switch</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_off</span>(<span class="hljs-params">self, switch</span>):<br>        <span class="hljs-keyword">pass</span><br> <br><span class="hljs-comment"># 定义具体类：2个开关状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OnState</span>(<span class="hljs-title class_ inherited__">State</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_on</span>(<span class="hljs-params">self, switch</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;now on&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_off</span>(<span class="hljs-params">self, switch</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;switching off...&quot;</span>)<br>        switch.change_state(OffState())<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OffState</span>(<span class="hljs-title class_ inherited__">State</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_on</span>(<span class="hljs-params">self, switch</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;switching on...&quot;</span>)<br>        switch.change_state(OnState())<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_off</span>(<span class="hljs-params">self, switch</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;no off&quot;</span>)<br>        <br><br><span class="hljs-comment"># 上下文场景类：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Switch</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.state = OffState()<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">change_state</span>(<span class="hljs-params">self, state</span>):<br>        self.state = state<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_on</span>(<span class="hljs-params">self</span>):<br>        self.state.switch_on(self)<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_off</span>(<span class="hljs-params">self</span>):<br>        self.state.switch_off(self)<br><br><span class="hljs-comment"># 创建实例</span><br>switch = Switch()<br>switch.switch_on() <span class="hljs-comment"># 输出：switching on...</span><br>switch.switch_on() <span class="hljs-comment"># 无任何输出</span><br>switch.switch_off()<span class="hljs-comment"># 输出：switching off..</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>状态模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.python中介者模式</title>
    <link href="/2023/07/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19-python%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/07/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19-python%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><p>中介租房，中介可以为租客和房东交换信息，这样租客不需要知道太多房东，只需要把自己需求告诉中介，中介负责将房东信息反馈给租户，房东同理</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>定义一个单独的（中介）对象，来封装一组对象之间的交互，将这组对象之间的交互委派给中介对象交互，避免对象之间的交互</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象的中介者(AbstractMediator): 包含一个沟通同事间消息的方法。</li><li>具体中介者(ConcteteMediator): 实现沟通同事间消息的方法</li><li>抽象同事类(Collegue): 保存一个中介者对象的实例，包含一个和中介者通讯和获取消息的方法。</li><li>具体同事类(ConcteteCollegue): 实现和中介者通讯和获取消息的方法</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解的时候</li><li>一个对象由于引用了其他的很多对象，并且直接和这些对象进行通讯，导致难以复用该对象</li><li>想要通过一个中间类来封装多个类中的行为时，而又不想生成太多的子类，此时可以通过中介者模式解决，在中介者中定义对象的交互的公共行为，如果需要改变行为则可以在增加新的中介类</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>简化了对象之间的交互，用中介者和同事的一对多代替了原来的同事之间的多对多的交互。更好理解，更好维护</li><li>将各个同事就对象进行解耦，中介者有利于各个同事之间的松耦合，可以独立的改变或者复用每一个同事或者中介。</li><li>可以减少子类生成，中介者将原本分布于多个对象的行为集中在一起，改变这些行为只需要生成新的中介者的子类即可。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>在具体中介者类中包含了大量同事之间的交互细节，可能会导致中介者类变得非常的复杂，增加维护难度。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>实现一个房东、租客、中介的例子<br>房东将房租信息告诉中介，<br>租客将需求告诉中介，将房东和租客的信息进行一个交流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-comment"># 抽象中介者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self._house_owner: HouseOwner = <span class="hljs-literal">None</span><br>        self._tenant: Tenant = <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 知晓出租者和租客的信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_house_owner</span>(<span class="hljs-params">self, house_owner: <span class="hljs-string">&#x27;HouseOwner&#x27;</span></span>):<br>        self._house_owner = house_owner<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_tenant</span>(<span class="hljs-params">self, tenant: <span class="hljs-string">&#x27;Tenant&#x27;</span></span>):<br>        self._tenant = tenant<br><br>    <br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">contact</span>(<span class="hljs-params">self, message: <span class="hljs-built_in">str</span>, person: <span class="hljs-string">&#x27;Person&#x27;</span></span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><br><span class="hljs-comment"># 抽象同事类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, mediator: Mediator</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.name = name<br>        self.mediator = mediator<br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">contact</span>(<span class="hljs-params">self, message</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_message</span>(<span class="hljs-params">self, message</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 具体同事类，房东</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseOwner</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, mediator: Mediator</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(name, mediator)<br>    <br>    <span class="hljs-comment"># 与中介联系的方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">contact</span>(<span class="hljs-params">self, message</span>):<br>        self.mediator.contact(message, self)<br><br>    <span class="hljs-comment"># 获取租房信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_message</span>(<span class="hljs-params">self, message: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;出租者<span class="hljs-subst">&#123;self.name&#125;</span>获取到的信息:<span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br><br><br><span class="hljs-comment"># 具体同时类，租客</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tenant</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, mediator: Mediator</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(name, mediator)<br><br>    <span class="hljs-comment"># 与中介联系的方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">contact</span>(<span class="hljs-params">self, message</span>):<br>        self.mediator.contact(message, self)<br><br>    <span class="hljs-comment"># 获取租房信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_message</span>(<span class="hljs-params">self, message: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;租房者<span class="hljs-subst">&#123;self.name&#125;</span>获取到的信息:<span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br><br>    <br><span class="hljs-comment"># 具体的中介者(中介机构)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MediatorStructure</span>(<span class="hljs-title class_ inherited__">Mediator</span>):<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">contact</span>(<span class="hljs-params">self, message: <span class="hljs-built_in">str</span>, person: <span class="hljs-string">&#x27;Person&#x27;</span></span>):<br>        <span class="hljs-keyword">if</span> person == self._house_owner:<br>            <span class="hljs-comment"># 如果房主和中介通讯则，获取租房信息</span><br>            self._tenant.get_message(message=message)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 如果是租房者，则房主获得信息</span><br>            self._house_owner.get_message(message=message)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 中介机构</span><br>    mediator = MediatorStructure()<br><br>    <span class="hljs-comment"># 房主</span><br>    house_owner = HouseOwner(name=<span class="hljs-string">&quot;张三&quot;</span>, mediator=mediator)<br>    <span class="hljs-comment"># 租客</span><br>    tenant = Tenant(name=<span class="hljs-string">&quot;李四&quot;</span>, mediator=mediator)<br><br>    <span class="hljs-comment"># 中介收集信息</span><br>    mediator.set_house_owner(house_owner=house_owner)<br>    mediator.set_tenant(tenant=tenant)<br><br>    <span class="hljs-comment"># 说出需求</span><br>    tenant.contact(<span class="hljs-string">&quot;需要在天通苑获取一套两居室&quot;</span>)<br>    house_owner.contact(<span class="hljs-string">&quot;在天通苑出租一套两居室&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中介者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18.python命令模式</title>
    <link href="/2023/07/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18-python%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/07/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18-python%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>在实际开发中如果不支持将函数作为参数进行传递，就可以借助命令模式。 将函数封装成对象，将这个对象用作参数传递。</p><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>将请求封装为一个对象，这样可以使用不同的请求参数化其他对象（将不同请求依赖注入到其他对象），并且能够支持请求（命令）的排队执行、记录日志、撤销等功能。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>客户类创建必要的接收器（Receiver）对象。</li><li>抽象命令（Command）对象并且将步骤（1）创建的接收器对象配置给它。</li><li>具体命令对象（ConcreteCommand）实现执行方法. 通常会持有接收者的引用，并调用接收者的功能来完成命令。</li><li>调用者 Invoker. 要求命令对象执行请求。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求</li><li>系统需要支持命令的撤销操作和恢复操作。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦</li><li>增加和删除命令非常方便。采用命令模式增加和删除命令不会影响其他类。</li><li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>使用命令模式可能导致某些系统有过多的具体命令类。</li><li>系统结构更复杂</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>模拟酒店后厨的出餐流程<br>服务员：即调用者角色，由她来发起命令<br>厨师：接收者，真正执行命令的对象<br>订单： 命令中包含订单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-comment"># 菜单</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, dining_table: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.__dining_table = dining_table <span class="hljs-comment"># 餐桌号</span><br>        self.__food_menu = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># 菜名和份数</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dining</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__dining_table<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_food_menu</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__food_menu<br><br><br><span class="hljs-comment"># 厨师类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chef</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_food</span>(<span class="hljs-params">self, num, food_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num&#125;</span>份,<span class="hljs-subst">&#123;food_name&#125;</span>&quot;</span>)<br>    <br><br><span class="hljs-comment"># 抽象命令接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 具体命令</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderCommand</span>(<span class="hljs-title class_ inherited__">Command</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, receiver: Chef, order: Order</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;_summary_</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            receiver (Chef): 接收者对象</span><br><span class="hljs-string">            order (Order): 菜单</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.receiver = receiver<br>        self.order = order<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.order.get_dining()&#125;</span>桌的订单:&quot;</span>)<br>        <span class="hljs-keyword">for</span> food, num <span class="hljs-keyword">in</span> self.order.get_food_menu().items():<br>            self.receiver.make_food(num=num, food_name=food)<br><br><br><span class="hljs-comment"># 调用者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Waiter</span>:<br>    <span class="hljs-comment"># 可以持有多个命令对象</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.commands: <span class="hljs-type">List</span>[Command] = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_commands</span>(<span class="hljs-params">self, command: Command</span>):<br>        self.commands.append(command)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">order_up</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;服务员：有新的订单，请师父开始制作&quot;</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> self.commands:<br>            item.execute()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    order1 = Order(<span class="hljs-number">10</span>)<br>    order1.get_food_menu().update(&#123;<span class="hljs-string">&quot;蛋炒饭&quot;</span>: <span class="hljs-number">1</span>&#125;)<br>    order1.get_food_menu().update(&#123;<span class="hljs-string">&quot;蛋炒面&quot;</span>: <span class="hljs-number">1</span>&#125;)<br><br>    order2 = Order(<span class="hljs-number">11</span>)<br>    order2.get_food_menu().update(&#123;<span class="hljs-string">&quot;水煮肉&quot;</span>: <span class="hljs-number">1</span>&#125;)<br>    order2.get_food_menu().update(&#123;<span class="hljs-string">&quot;米饭&quot;</span>: <span class="hljs-number">1</span>&#125;)<br><br>    <span class="hljs-comment"># 创建接收者</span><br>    chef = Chef()<br>    cmd1 = OrderCommand(chef, order1)<br>    cmd2 = OrderCommand(chef, order2)<br><br>    waiter = Waiter()<br>    waiter.set_commands(cmd1)<br>    waiter.set_commands(cmd2)<br>    waiter.order_up()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.简单实现系统中增加缓存数据</title>
    <link href="/2023/07/19/web%E7%9F%A5%E8%AF%86/2.%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%A2%9E%E5%8A%A0%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/07/19/web%E7%9F%A5%E8%AF%86/2.%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%A2%9E%E5%8A%A0%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>系统中数据越来越多，接口请求频繁，在数据库和view中增加一个缓存层，业务先从redis中查询，查询不到再去数据库中查，并更新到redis中</li><li>这个缓存实际上取值方式和更新方式都是一样的，只是需要加载到redis的数据不一样，所以采用一个简单的模板方法来实现。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> library.database_work.db_rw <span class="hljs-keyword">import</span> mysql_coon<br><span class="hljs-keyword">from</span> library.redisHandler <span class="hljs-keyword">import</span> redis_conn<br><br><span class="hljs-comment"># 基础缓存类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCacheBase</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-comment"># cache 前缀</span><br>    __cls_first_key = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;REDIS_BASE_KEY&#125;</span>_cache_data_&quot;</span><br>    <span class="hljs-comment"># 缓存类别标识</span><br>    cache_first_key = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># 过期时间 单位秒</span><br>    ex = <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">key_</span>(<span class="hljs-params">cls, key</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取 加前缀的keu</span><br><span class="hljs-string">        :param key: 待加前缀的key</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> cls.__cls_first_key + cls.cache_first_key + key<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">keys_</span>(<span class="hljs-params">cls, keys: <span class="hljs-built_in">list</span></span>)-&gt;<span class="hljs-built_in">list</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        对批量key 加上前缀</span><br><span class="hljs-string">        :param keys: 待加前缀的keys</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> [cls.key_(item) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> keys]<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">cls, key: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取单个缓存</span><br><span class="hljs-string">        :param key:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> cls.batch_get([key])<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">cls, key: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        删除单个缓存</span><br><span class="hljs-string">        :param key:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        cls.batch_delete([key])<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">batch_delete</span>(<span class="hljs-params">cls, keys: <span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-comment"># 批量删除key</span><br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:<br>            redis_conn.del_key(cls.key_(key))<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">batch_get</span>(<span class="hljs-params">cls, key_list: <span class="hljs-built_in">list</span></span>):<br>        have_first_keys: <span class="hljs-built_in">list</span> = cls.keys_(key_list)<br>        <span class="hljs-comment"># 从redis 中获取数据</span><br>        values = redis_conn.mget(have_first_keys)<br>        tmp_result: <span class="hljs-built_in">dict</span> = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(key_list, values))<br>        <span class="hljs-comment"># 获取需要加载的keys(没有前缀的)</span><br>        have_data_dict, need_load_keys = cls.__filter_need_key(tmp_result)<br>        <span class="hljs-comment"># 获取需要加载的数据 key为没有前缀的key</span><br>        need_load_data: <span class="hljs-built_in">dict</span> = cls.load_data(need_load_keys=need_load_keys)<br>        <span class="hljs-comment"># 增加到缓存中</span><br>        cls.__put(need_load_data)<br>        <span class="hljs-comment"># 将数据拼接到结果中</span><br>        have_data_dict.update(need_load_data)<br>        <span class="hljs-keyword">return</span> have_data_dict<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__filter_need_key</span>(<span class="hljs-params">cls, data: <span class="hljs-built_in">dict</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        返回有效数据和需要重新加载的keys</span><br><span class="hljs-string">        :param data:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        need_load_keys = []<br>        have_data_dict = &#123;&#125;<br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> data.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> value:<br>                need_load_keys.append(key)<br>            <span class="hljs-keyword">else</span>:<br>                have_data_dict[key] = json.loads(value)<br>        <span class="hljs-keyword">return</span> have_data_dict, need_load_keys<br><br><span class="hljs-meta">    @classmethod</span><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>(<span class="hljs-params">cls, need_load_keys: <span class="hljs-built_in">list</span>, *args, **kwargs</span>)-&gt;<span class="hljs-built_in">dict</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        具体类需要实现的地方，从数据库查询数据</span><br><span class="hljs-string">        :param need_load_keys: 需要加载的key 没有前缀</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__put</span>(<span class="hljs-params">cls, data: <span class="hljs-built_in">dict</span></span>):<br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> data.items():<br>            have_first_keys = cls.key_(key)<br>            value = json.dumps(value, cls=NpEncoder)<br>            redis_conn.<span class="hljs-built_in">set</span>(have_first_keys, value, ex=cls.ex)<br><br><span class="hljs-comment"># mysql 查询</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptModel</span>:<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dept_info</span>():<br>        sql = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        select distinct visit_dept_name, visit_dept_code, quality_step from mrq_pat_menzhen mpm </span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> mysql_coon.select_fetchall(sql)<br><br><br><span class="hljs-comment"># 继承基础缓存类，书写loda_data 方法，在实际应用中，数据库的查询可以写道专门的model方法，load_data书写数据格式处理的方法。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptInfoCache</span>(<span class="hljs-title class_ inherited__">RedisCacheBase</span>):<br>    <span class="hljs-comment"># 缓存类别标识</span><br>    cache_first_key = <span class="hljs-string">&quot;dept&quot;</span><br><br>    key_func = &#123;<br>        <span class="hljs-string">&quot;住院&quot;</span>: DeptModel.get_dept_info,<br>    &#125;<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>(<span class="hljs-params">cls, need_load_keys: <span class="hljs-built_in">list</span>=<span class="hljs-literal">None</span>, *args, **kwargs</span>)-&gt;<span class="hljs-built_in">dict</span>:<br>        data: <span class="hljs-built_in">dict</span> = &#123;&#125;<br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> need_load_keys:<br>            db_data = cls.get_dept(data=cls.key_func.get(key, DeptModel.get_dept_info)(), key=key)<br>            data[key] = db_data<br>        <span class="hljs-keyword">return</span> data<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dept</span>(<span class="hljs-params">cls, data: <span class="hljs-built_in">list</span>, key: <span class="hljs-built_in">str</span></span>):<br>        depts: <span class="hljs-built_in">list</span> = []<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>            depts.append(item)<br>        <span class="hljs-comment"># 将病区整合到科室后边</span><br>        depts_dict = cls.get_dept_and_word(depts)<br>        <span class="hljs-keyword">return</span> [&#123;<span class="hljs-string">&quot;dept_name&quot;</span>: dept_name, <span class="hljs-string">&quot;ward_name&quot;</span>: <span class="hljs-string">&quot;,&quot;</span>.join(ward_name)&#125; <span class="hljs-keyword">for</span> dept_name, ward_name <span class="hljs-keyword">in</span> depts_dict.items()]<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dept_and_word</span>(<span class="hljs-params">data: <span class="hljs-built_in">list</span></span>)-&gt;<span class="hljs-built_in">dict</span>:<br>        tmp_dict = &#123;<br><br>        &#125;<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-comment"># 入院科室</span><br>            tmp_dict.setdefault(item[<span class="hljs-string">&quot;dept_admission_to_name&quot;</span>], <span class="hljs-built_in">set</span>())<br>            tmp_dict[item[<span class="hljs-string">&quot;dept_admission_to_name&quot;</span>]].add(item[<span class="hljs-string">&quot;district_admission_to_name&quot;</span>])<br>            <span class="hljs-comment"># 当前科室</span><br>            tmp_dict.setdefault(item[<span class="hljs-string">&quot;now_dept_name&quot;</span>], <span class="hljs-built_in">set</span>())<br>            tmp_dict[item[<span class="hljs-string">&quot;now_dept_name&quot;</span>]].add(item[<span class="hljs-string">&quot;now_district_name&quot;</span>])<br>            <span class="hljs-comment"># 出院科室</span><br>            tmp_dict.setdefault(item[<span class="hljs-string">&quot;dept_discharge_from_name&quot;</span>], <span class="hljs-built_in">set</span>())<br>            tmp_dict[item[<span class="hljs-string">&quot;dept_discharge_from_name&quot;</span>]].add(item[<span class="hljs-string">&quot;district_discharge_from_name&quot;</span>])<br>        <span class="hljs-keyword">return</span> tmp_dict<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    DeptInfoCache.delete(<span class="hljs-string">&quot;住院&quot;</span>)<br>    <span class="hljs-built_in">print</span>(DeptInfoCache.get(<span class="hljs-string">&quot;住院&quot;</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17.责任链模式</title>
    <link href="/2023/07/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17-python%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/07/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17-python%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>避免将一个请求的发送者与接收者耦合在一起，让多个对象都有机会处理请求，将接收请求的对象连接成一条链，并且沿着这条链传递请求，直到有一个对象能够处理它为止。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li><li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li><li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>在运行时需要动态的使用多个关联对象来处理同一次请求时。比如，请假流程、员工入职流程】编译打包发布上线流程等。</li><li>不想让使用者知道具体的处理逻辑时。比如，做权限校验的登录拦截器。</li><li>需要动态更换处理对象时。比如，工单处理系统、网关API过滤规则系统等。</li><li>职责链模式常被用在框架开发中，用来实现框架的过滤器、拦截器功能让框架的使用者在不修改源码的情况下，添加新的过滤拦截功能。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>降低对象（请求发送者和接收者）之间的耦合度</li><li>增加系统的可扩展性：可以根据需求增加新的请求处理类</li><li>增强了给对象指派职责的灵活性：当工作流程发生改变，可以动态的改变链内的成员或者修改他们的次序，也可动态第新增或者删除责任。</li><li>简化了对象之间的连接： 一个对象只需要保持一个指向其后继者的引用，不需要保持其他所有处理者的引用，避免了众多的 if else 语句</li><li>责任分担： 每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li><li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将收到一定影响。</li><li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误涉及而导致系统出错，可能会造成循环调用。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>游戏一共 3 个关卡<br>进入第二关需要第一关的游戏得分大于等于 80<br>进入第三关需要第二关的游戏得分大于等于 90</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 玩游戏的方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>()-&gt;<span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> random.randint(<span class="hljs-number">80</span>, <span class="hljs-number">100</span>)<br><br><br><span class="hljs-comment"># 抽象处理者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractHandler</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 下一个处理者</span><br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_next</span>(<span class="hljs-params">self, <span class="hljs-built_in">next</span>: <span class="hljs-string">&#x27;AbstractHandler&#x27;</span></span>):<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 具体处理者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstPassHandler</span>(<span class="hljs-title class_ inherited__">AbstractHandler</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始玩第一关...&quot;</span>)<br>        score = play()<br>        <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> self.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;得分：<span class="hljs-subst">&#123;score&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">next</span>.handler()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;结束, 得分: <span class="hljs-subst">&#123;score&#125;</span>&quot;</span>)<br><br><br><span class="hljs-comment"># 具体处理者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondPassHandler</span>(<span class="hljs-title class_ inherited__">AbstractHandler</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始玩第二关...&quot;</span>)<br>        score = play()<br>        <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span> <span class="hljs-keyword">and</span> self.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;得分：<span class="hljs-subst">&#123;score&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">next</span>.handler()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;结束, 得分: <span class="hljs-subst">&#123;score&#125;</span>&quot;</span>)<br><br><br><span class="hljs-comment"># 具体处理者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThirdPassHandler</span>(<span class="hljs-title class_ inherited__">AbstractHandler</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始玩第三关...&quot;</span>)<br>        score = play()<br>        <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">95</span> <span class="hljs-keyword">and</span> self.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;得分：<span class="hljs-subst">&#123;score&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">next</span>.handler()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;结束, 得分: <span class="hljs-subst">&#123;score&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    first_handler = FirstPassHandler()<br>    second_handler = SecondPassHandler()<br>    third_handler = ThirdPassHandler()<br><br>    first_handler.set_next(second_handler)<br>    second_handler.set_next(third_handler)<br><br>    first_handler.handler()<br>            <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>策略模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16.策略模式</title>
    <link href="/2023/07/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16-python%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/07/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16-python%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>定义一系列算法，将每一个算法封装起来，并使他们可以相互替换，策略模式让算法可以独立于使用它的客户端。将定义、创建、使用进行解耦<br>例如： 出行，可以选择，公交，火车，飞机。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象策略类(Strategy): 定义抽象方法</li><li>具体策略类A(ConcreteStrategyA): 实现策略方法</li><li>具体策略类B(ConcreteStrategyB): 实现策略方法</li><li>上下文类(Context): 进行算法的调用， 依赖Strategy</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>一个系统需要动态的在集中算法中选择一种时，可以将算法封装到策略类中。方便替换新旧接口</li><li>一个类定义了多种行为，并且这写行为在这个类的操作中以多个条件语句的形式出现，可以将每个条件分支移入各自的策略类中以代替这些条件语句</li><li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。<br><img src="/images/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png" alt="应用场景"></li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>策略类之间可以自由切换（由于策略类都实现同一个接口，所以使他们之间可以自由切换）</li><li>易于扩展（增加一个新的策略，只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合‘开闭原则’； 避免多重条件选择，体现面向对象思想）</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li><li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>需求：（使用策略模式进行，并消除项目中大量if else）<br>物流行业中，通常会涉及到EDI报文(XML格式文件)传输和回执接收，每发送一份EDI报文，后续都会收到与之关联的回执(标识盖数据在第三方系统中的流转状态)。</p><p>列举几种回执类型： MT1101、MT2101、MT4101、MT8104, 系统在收到不同的回执报文后，会执行对应的业务逻辑处理，我们就业回执处理为演示案例。</p><ol><li><p>书写回执类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span><br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Receipt</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, message: <span class="hljs-built_in">str</span>, type_: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.__message = message<br>        self.__type_ = type_<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_type</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__type_<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_message</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__message<br><br></code></pre></td></tr></table></figure></li><li><p>抽象策略接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiptHandleStrategy</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handleReceipt</span>(<span class="hljs-params">self, receipt: Receipt</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            声明处理报文的方法</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>具体策略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 处理报文MT1101</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT1101ReceiptHandleStrategy</span>(<span class="hljs-title class_ inherited__">ReceiptHandleStrategy</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handleReceipt</span>(<span class="hljs-params">self, receipt: Receipt</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解析报文MT1101:&quot;</span>+receipt.get_message())<br><br><br><span class="hljs-comment"># 处理报文MT2101</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT2101ReceiptHandleStrategy</span>(<span class="hljs-title class_ inherited__">ReceiptHandleStrategy</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handleReceipt</span>(<span class="hljs-params">self, receipt: Receipt</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解析报文MT2101:&quot;</span>+receipt.get_message())<br></code></pre></td></tr></table></figure></li><li><p>环境类（上下文）执行策略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiptStrategyContext</span>:<br>    __receiptHandleStrategy: ReceiptHandleStrategy = <span class="hljs-literal">None</span><br>    <br>    <span class="hljs-comment"># 设置策略</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setReceiptHandleStrategy</span>(<span class="hljs-params">self, receiptHandleStrategy: ReceiptHandleStrategy</span>):<br>        self.__receiptHandleStrategy = receiptHandleStrategy<br><br>    <span class="hljs-comment"># 调用策略类中方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handleReceipt</span>(<span class="hljs-params">self, receipt: Receipt</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> receipt:<br>            <span class="hljs-keyword">return</span><br>        self.__receiptHandleStrategy.handleReceipt(receipt=receipt)<br></code></pre></td></tr></table></figure></li><li><p>采用策略工厂和枚举类去除大量 if else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 枚举类定义报文映射关系</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiptStrategyEnum</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    MT1011 = MT1101ReceiptHandleStrategy()<br>    MT2101 = MT2101ReceiptHandleStrategy()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getHandleStrategy</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.value<br><br><br><span class="hljs-comment"># 策略工厂，取出对应报文的策略(该方法也可以用 getattr(ReceiptStrategyEnum, &quot;type_&quot;).value) 来替换</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiptStrategyFactory</span>:<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getHandleStrategy</span>(<span class="hljs-params">type_: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">return</span> ReceiptStrategyEnum[type_].getHandleStrategy()<br><br></code></pre></td></tr></table></figure></li><li><p>客户端执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 模拟回执</span><br>    <span class="hljs-type">List</span> = [<br>        Receipt(<span class="hljs-string">&quot;MT1011回执信息&quot;</span>, <span class="hljs-string">&quot;MT1011&quot;</span>),<br>        Receipt(<span class="hljs-string">&quot;MT2101回执信息&quot;</span>, <span class="hljs-string">&quot;MT2101&quot;</span>),<br>    ]<br><br>    context: ReceiptStrategyContext = ReceiptStrategyContext()<br><br>    <span class="hljs-keyword">for</span> receipt <span class="hljs-keyword">in</span> <span class="hljs-type">List</span>:<br>        strategy: ReceiptHandleStrategy = ReceiptStrategyFactory.getHandleStrategy(receipt.get_type())<br>        context.setReceiptHandleStrategy(strategy)<br>        context.handleReceipt(receipt=receipt)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>策略模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql锁表问题</title>
    <link href="/2023/06/29/mysql/mysql%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2023/06/29/mysql/mysql%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在语句查询或者更新插入数据锁表后的处理</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><p>相关信息查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>、查看正在进行中的事务<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.INNODB_TRX<br><br><span class="hljs-number">2</span>、查看正在锁的事务<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.INNODB_LOCKS;<br><br><span class="hljs-number">3</span>、查看等待锁的事务<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.INNODB_LOCK_WAITS;<br><br><span class="hljs-number">4</span>、查询是否锁表<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">OPEN</span> TABLES <span class="hljs-keyword">where</span> In_use <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>;<br>在发生死锁时，这几种方式都可以查询到和当前死锁相关的信息。<br><br><span class="hljs-number">5</span>、查看最近死锁的日志<br><span class="hljs-keyword">show</span> engine innodb status<br><br><span class="hljs-number">6.</span> 查看正在执行的语句<br><span class="hljs-keyword">show</span> processlist<br></code></pre></td></tr></table></figure></li><li><p>找到等待时间长的语句根据pid杀死</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">kill pid<br></code></pre></td></tr></table></figure></li><li><p>如果杀死后语句进入 killed 状态一直阻塞</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">退出mysql进行mysql表检查（相关命令mysqlcheck）<br><br><span class="hljs-number">1.</span> 执行某个表的检查优化<br>mysqlcheck <span class="hljs-comment">--auto-repair --database db_A --user=root --password</span><br><span class="hljs-number">2.</span> 执行所有库的检查优化<br>mysqlcheck <span class="hljs-comment">--auto-repair --database  --user=root --password</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql值为json数据的相关操作</title>
    <link href="/2023/06/29/mysql/mysql%E5%80%BC%E4%B8%BAjson%E6%95%B0%E6%8D%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/06/29/mysql/mysql%E5%80%BC%E4%B8%BAjson%E6%95%B0%E6%8D%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>mysql 支持json数据类型的存储，那这些数据的更新就涉及json的一些修改操作，那就需要考虑如何使用sql进行安全的更新。<br>mysql json 支持 数组、整数、浮点数、字符串、布尔、null 以及嵌套的json对象。</p><blockquote><p><a href="https://cloud.tencent.com/developer/article/1525726?from=15425">https://cloud.tencent.com/developer/article/1525726?from=15425</a></p></blockquote><h2 id="二、数据介绍"><a href="#二、数据介绍" class="headerlink" title="二、数据介绍"></a>二、数据介绍</h2><p><img src="/images/mysql%E6%95%B0%E6%8D%AE.png" alt="数据集"></p><p>其中包含字符串，数组和嵌套数组。</p><h2 id="三、查询数据"><a href="#三、查询数据" class="headerlink" title="三、查询数据"></a>三、查询数据</h2><p>方法介绍</p><table><thead><tr><th>函数</th><th>介绍</th></tr></thead><tbody><tr><td>json_contains(json_doc,val[,path])</td><td>判断是否包含某个json值</td></tr><tr><td>json_contains_path(json_doc,one_or_all,path[,path]…)</td><td>判断是否有某个路径</td></tr><tr><td>json_extract(json_doc,path[,path])</td><td>提取json值</td></tr><tr><td>json_keys(json_doc[,path])</td><td>提取json中的键值结果为json数组</td></tr><tr><td>json_search(json_doc, one_or_all, search_str[,escape_char[,path]…])</td><td>按给定字符串关键字搜索json，返回匹配的路径</td></tr><tr><td>json_depth(json_doc)</td><td>返回json文档的最大深度</td></tr><tr><td>json_length(json_doc[,path])</td><td>返回json值得类型</td></tr><tr><td>json_valid()</td><td>判断是否为合法json文档</td></tr><tr><td>column-&gt;path json_extract</td><td>简洁写法5.7.9开始支持</td></tr><tr><td>column-&gt;&gt;path json_unquote(column -&gt; path)</td><td>简洁写法5.7.13开始支持相当于 JSON_UNQUOTE(JSON_EXTRACT())</td></tr><tr><td>Json_ARRAY(val)</td><td>用于查询数组中是否包含该值</td></tr></tbody></table><ol><li><p>要查询value值为某个的，(查询key为a，value=c的数据。)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test2 t <span class="hljs-keyword">where</span> text <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$.a&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>取出json对象中提取指定的值。（json_extract）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> JSON_EXTRACT(text, <span class="hljs-string">&#x27;$.a&#x27;</span>) <span class="hljs-keyword">FROM</span> test2 t ;<br></code></pre></td></tr></table></figure><p><img src="/images/mysql2.png" alt="查询结果"></p></li><li><p>查询json，存在某个键值对的和2效果相似 (JSON_CONTAINS)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test2 <span class="hljs-keyword">WHERE</span> JSON_CONTAINS(`text` , <span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;c&quot;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/images/mysql3.png" alt="查询结果"></p></li><li><p>查询json，value 是列表的，列表第零位为1的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test2 t <span class="hljs-keyword">where</span>  text <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$.a[0]&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/images/mysql4.png" alt="查询结果"></p></li><li><p>查询json， value 是字典列表的，第零位的value为某值的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test2 t <span class="hljs-keyword">where</span>  text <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$.a[0].hello&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;word&#x27;</span> ;<br></code></pre></td></tr></table></figure><p><img src="/images/mysql5.png" alt="查询结果"></p></li><li><p>查询json, value 中某个值为 word 的（数据格式 [{“type”: “10”, “mobile”: “13545678900”, “countryCode”: “86”}]）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> mobile_json<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27;$[*].mobile&#x27;</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%135%&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>JsonArray 类型字段的精确查询（ [{“type”: “10”, “mobile”: “13545678900”, “countryCode”: “86”}]）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> JSON_CONTAINS(mobile_json,<span class="hljs-built_in">JSON_OBJECT</span>(<span class="hljs-string">&#x27;mobile&#x27;</span>, &quot;13545678900&quot;))<br></code></pre></td></tr></table></figure></li><li><p>查询 数组包含1的，（结构：{“a”: [1, 2, 3, 1]}）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test2 t <span class="hljs-keyword">where</span> JSON_CONTAINS(text<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27;$.a&#x27;</span>, <span class="hljs-built_in">Json_ARRAY</span>(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure></li><li><p>查询 数组包含1的，（结构： [1, 2, 3, 1]）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test2 t <span class="hljs-keyword">where</span> JSON_CONTAINS(text, <span class="hljs-built_in">Json_ARRAY</span>(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、更新数据"><a href="#四、更新数据" class="headerlink" title="四、更新数据"></a>四、更新数据</h2><table><thead><tr><th>函数</th><th>介绍</th></tr></thead><tbody><tr><td>json_array_append(json_doc,path,val[,path,val]…)</td><td>末尾添加数组元素，如果原有值是数值或json对 象，则转成数组后，再添加元素</td></tr><tr><td>json_array_insert(json_doc,path,val[,path,val]…)</td><td>插入数组元素</td></tr><tr><td>json_insert(json_doc,path,val[,path,val]…)</td><td>插入值（插入新值，但不替换已经存在的旧值）</td></tr><tr><td>json_merge(json_doc,json_doc[,json_doc]…)</td><td>合并json数组或对象</td></tr><tr><td>json_remove(json_doc,path[,path]…)</td><td>删除json数据</td></tr><tr><td>json_replace(json_doc,path,val[,path,val]…)</td><td>替换值（只替换已经存在的旧值）</td></tr><tr><td>json_set(json_doc,path,val[,path,val])</td><td>设置值（替换旧值，并插入不存在的新值）</td></tr><tr><td>json_unquote(val)</td><td>去除json字符串的引号，将值转成string类型</td></tr><tr><td>CAST(‘jsonString’ as json)</td><td>可将json字符串转为json对象格式</td></tr></tbody></table><ol><li>新增key或者更新key<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> test2 <span class="hljs-keyword">set</span> text<span class="hljs-operator">=</span>json_set(text, <span class="hljs-string">&#x27;$.g&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;$.i&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li></ol><p>2.只更新key(key不存在则不管)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> test2 <span class="hljs-keyword">set</span> text<span class="hljs-operator">=</span>json_replace(text, <span class="hljs-string">&#x27;$.g&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;$.m&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>更新列表中某个下标的某个key<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> test2 <span class="hljs-keyword">set</span> text<span class="hljs-operator">=</span>json_replace(text, <span class="hljs-string">&#x27;$.a[0].hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="五、删除数据"><a href="#五、删除数据" class="headerlink" title="五、删除数据"></a>五、删除数据</h2><ol><li>删除key<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> test2 <span class="hljs-keyword">set</span> text<span class="hljs-operator">=</span>json_remove(text, <span class="hljs-string">&#x27;$.a&#x27;</span>) <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql值为json数据的相关操作</title>
    <link href="/2023/06/29/django/django%E4%BD%BF%E7%94%A8redis%E9%9B%86%E7%BE%A4%E5%81%9A%E7%BC%93%E5%AD%98/"/>
    <url>/2023/06/29/django/django%E4%BD%BF%E7%94%A8redis%E9%9B%86%E7%BE%A4%E5%81%9A%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h3 id="1-使用redis集群做cache-缓存"><a href="#1-使用redis集群做cache-缓存" class="headerlink" title="1. 使用redis集群做cache 缓存"></a>1. 使用redis集群做cache 缓存</h3><p>配置</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs clean">CACHES = &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;BACKEND&quot;</span>: <span class="hljs-string">&quot;django_redis.cache.RedisCache&quot;</span>,<br>        <span class="hljs-string">&quot;LOCATION&quot;</span>: [<br>            <span class="hljs-string">&quot;redis://192.168.8.42:7000&quot;</span>,<br>            <span class="hljs-string">&quot;redis://192.168.8.42:7001&quot;</span>,<br>            <span class="hljs-string">&quot;redis://192.168.8.42:7002&quot;</span>,<br>            <span class="hljs-string">&quot;redis://192.168.8.42:7003&quot;</span>,<br>            <span class="hljs-string">&quot;redis://192.168.8.42:7004&quot;</span>,<br>            <span class="hljs-string">&quot;redis://192.168.8.42:7005&quot;</span>,<br>        ],<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;REDIS_CLIENT_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rediscluster.RedisCluster&#x27;</span>,      # 连接类<br>            <span class="hljs-string">&#x27;CONNECTION_POOL_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rediscluster.connection.ClusterConnectionPool&#x27;</span>,   # 连接池类<br>            <span class="hljs-string">&#x27;CONNECTION_POOL_KWARGS&#x27;</span>: &#123;     # 连接池参数<br>                <span class="hljs-string">&#x27;skip_full_coverage_check&#x27;</span>: <span class="hljs-literal">True</span>  # 连接报错时加参数：config get cluster-require-full-coverage<br>            &#125;,<br>        &#125;,<br>        # <span class="hljs-string">&quot;KEY_PREFIX&quot;</span>: <span class="hljs-string">&quot;myapp&quot;</span>,  # key前缀，默认为<span class="hljs-string">&#x27;&#x27;</span><br>        # <span class="hljs-string">&quot;VERSION&quot;</span>: <span class="hljs-number">1</span>,  # 版本号<br>        # <span class="hljs-string">&quot;KEY_FUNCTION&quot;</span>: <span class="hljs-string">&quot;cache_ext.key_function.make_key&quot;</span>,  # 自定义前缀规则，默认 KEY_PREFIX:VERSION:key<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>备注：</p><ol><li>如果报错，认证有问题则修改 redis 方式：redis://:<a href="mailto:&#112;&#97;&#115;&#x73;&#119;&#x6f;&#114;&#x64;&#64;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#56;&#x2e;&#56;&#46;&#x34;&#x32;">&#112;&#97;&#115;&#x73;&#119;&#x6f;&#114;&#x64;&#64;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#56;&#x2e;&#56;&#46;&#x34;&#x32;</a>:7005 password 支持空字符串</li><li>如果集群访问有问题则LOCATION只用一个地址</li></ol><h3 id="2-session-是使用过cache"><a href="#2-session-是使用过cache" class="headerlink" title="2. session 是使用过cache"></a>2. session 是使用过cache</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">SESSION_CACHE_ALIAS</span> = <span class="hljs-string">&#x27;default&#x27;</span><br><span class="hljs-comment"># SESSION_COOKIE_AGE = 3600 # 默认两周单位秒</span><br><span class="hljs-attr">SESSION_COOKIE_DOMAIN</span> = None <span class="hljs-comment"># session cookie域名 默认没有设置就是当前域名</span><br><span class="hljs-attr">SESSION_COOKIE_HTTPONLY</span> = <span class="hljs-literal">True</span> <span class="hljs-comment"># 设置session cookie是httponly</span><br><span class="hljs-attr">SESSION_COOKIE_NAME</span> = f<span class="hljs-string">&#x27;session_qc_&#123;REDIS_BASE_KEY&#125;&#x27;</span> <span class="hljs-comment"># session cookie的名字</span><br><span class="hljs-attr">SESSION_COOKIE_PATH</span> = <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-comment"># session cookie的path</span><br><span class="hljs-attr">SESSION_COOKIE_SECURE</span> = <span class="hljs-literal">False</span> <span class="hljs-comment"># session cookie的secure</span><br><span class="hljs-attr">SESSION_ENGINE</span> = <span class="hljs-string">&#x27;django.contrib.sessions.backends.cache&#x27;</span> <span class="hljs-comment"># session存贮位置默认db</span><br><span class="hljs-attr">SESSION_EXPIRE_AT_BROWSER_CLOSE</span> = <span class="hljs-literal">False</span><br><span class="hljs-attr">SESSION_SAVE_EVERY_REQUEST</span> = <span class="hljs-literal">True</span>  <span class="hljs-comment"># session超时机制是否生效, 只有在为True时，SESSION_EXPIRE_AT_BROWSER_CLOSE 才会生效</span><br><br></code></pre></td></tr></table></figure><h3 id="3-报错"><a href="#3-报错" class="headerlink" title="3. 报错"></a>3. 报错</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">Django：Could<span class="hljs-built_in"> not</span> find backend <span class="hljs-string">&#x27;django_redis.cache.RedisCache&#x27;</span>: cannot <span class="hljs-keyword">import</span><span class="hljs-built_in"> name</span> <span class="hljs-string">&#x27;six&#x27;</span><br></code></pre></td></tr></table></figure><p>3.1 原因django 版本太高回退到 2.2.7 版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip3</span> install django==<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>3.2 依旧报错</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">File &quot;/usr/local/lib/python3.6/site-packages/django/db/backends/mysql/operations.py&quot;, <span class="hljs-type">line</span> <span class="hljs-number">146</span>, <span class="hljs-keyword">in</span> last_executed_query<br>query = query.decode(errors=<span class="hljs-string">&#x27;replace&#x27;</span>)<br>AttributeError: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-keyword">object</span> has <span class="hljs-keyword">no</span> <span class="hljs-keyword">attribute</span> <span class="hljs-string">&#x27;decode&#x27;</span><br></code></pre></td></tr></table></figure><p>解决办法，将文件 146 行 decode改成encode<br>修改后的结果</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">query</span> = <span class="hljs-keyword">query</span>.<span class="hljs-keyword">encode</span>(errors=&#x27;<span class="hljs-keyword">replace</span>&#x27;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>session. cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15.模板方法模式</title>
    <link href="/2023/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15-python%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15-python%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>模板方法是一种基于继承的代码复用技术，它是一种类行为模式，模板方法模式其结构中只存在父类与子类之间的继承关系。<br>主要作用是提高程序的复用性和可扩展性：</p><ul><li>复用性是指，所有子类可以服用父类中提供的模板方法代码。</li><li>扩展性是指，框架通过模板模式提供扩展点，让框架用户可以在不修改框架源码的情况下，基于扩展点定制化框架的功能。</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在操作中定义算法的框架，将一些步骤推迟到子类中。模板方法让子类在不改变算法结构的情况下重新定义算法的某些步骤。</p><p>算法：可以理解为广义上的业务逻辑，并不是特指某一个实际的算法，定义中所说的算法的框架就是模板。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象父类(AbstractTemplate): 定义了一个算法的所有步骤(方法)和执行方法加hook(钩子方法，可以在子类中选择性的重写), 某些步骤可以延迟在子类中实现，但是流程（执行方法），还是在该方法中定义。</li><li>具体方法(Concreate): 实现抽象父类中的某些步骤。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>多个类有相同的方法，并且逻辑可以共同使用时。</li><li>将通用的算法或固定流程设计为模板，在每一个具体的子类中再继续优化算法步骤或流程步骤时。</li><li>重构超长代码时，发现某一个经常使用的共有方法。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>在父类中形式化的定义一个算法，而由它的子类实现细节处理，在子类实现详细的代码处理时，<strong>并不会改变父类算法中步骤的执行顺序</strong></li><li>模板方法可以实现一种反向的控制结构，通过子类覆盖父类的钩子方法，来决定某一个特定步骤是否需要执行。</li><li>在模板方法模式中可以通过子类来覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更换和增加新的子类很方柏霓，符合单一职责原则和开闭原则。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>对每个不同的实现都需要定义一个子类，这回导致类的个数增加，系统更加庞大，设计也更加抽象。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>P2P公司的借款系统中有一个利息计算模块，利息计算流程是这样的：</p><ul><li>用户登录系统，登录时需要出入账号密码，如果登录失败（例如用户名密码错误）,系统给出提示</li><li>如果登录成功，则根据用户的借款类型不同，使用不同的利息计算方式进行计算。</li><li>系统需要显示利息。</li></ul><ol><li><p>抽象模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>(metaclass=abc.ABCMeta):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">drlf, account: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span></span>)-&gt;<span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;步骤一： 用户名密码验证</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            account (str): _description_</span><br><span class="hljs-string">            password (str): _description_</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            bool: _description_</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span>(account == <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&#x27;123456&#x27;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;步骤二: 计算利息(延迟在子类中实现的)</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;钩子方法</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;显示利息&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self, account: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;执行方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            account (str): _description_</span><br><span class="hljs-string">            password (str): _description_</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.validate(account=account, password=password):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用户名密码错误&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.calculate()<br>            self.display()<br><br></code></pre></td></tr></table></figure></li><li><p>具体方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoanSevenDays</span>(<span class="hljs-title class_ inherited__">Account</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;借款周期是7天，无利息！仅收取贷款金额的1%的服务费。&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;借款无利息&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoanOneMonth</span>(<span class="hljs-title class_ inherited__">Account</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;借款周期是30天，利息为贷款金额的10%。&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>代码调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    sevenDays = LoanSevenDays()<br>    sevenDays.handle(account=<span class="hljs-string">&quot;test&quot;</span>, password=<span class="hljs-string">&quot;123456&quot;</span>)<br><br>    oneMonthDays = LoanOneMonth()<br>    oneMonthDays.handle(account=<span class="hljs-string">&quot;test&quot;</span>, password=<span class="hljs-string">&quot;123456&quot;</span>) <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板方法模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14.观察者模式</title>
    <link href="/2023/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14-python%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14-python%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式的应用场景非常广泛，小到代码层面的解耦，大到架构层面的系统解耦，再或者一些产品的设计思路。</p><p>我们常说的基于事件驱动的架构，其实也是观察者模式的一种最佳实践，当我们观察摸一个对象时，对象传递出的每一个行为都被看成是一个事件，观察者通过处理每一个事件来完成自身的操作处理。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>定义对象之间的一对多依赖关系，这样当一个对象改变时，他的<strong>所有依赖项都会自动得到通知更新</strong>。</p><p>在观察者模式中发生变化的对象成为观察目标，而被通知的对象成为观察者，一个观察目标可以应对多个观察者，而且这些观察者之间可以没有任何相互关系，可以根据自己的需求增加和删除观察者。</p><p>别名： 发布订阅者模式。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>红路灯模式为例介绍</p><ol><li>抽象被观察者(Subject): 定义了被观察者的方法，并实现了消息的订阅添加和发送通知&lt;或者在具体观察者中实现&gt;； 添加车和人的消息订阅，并将红灯还是绿灯展示给人和车</li><li>具体被观察者(ConcreteSubject): 实现具体业务，只是先期的变化业务，不需要关心通知业务。</li><li>抽象观察者(Observer): 声明 doEvent 方法</li><li>具体观察者(ConcreteObserver): 实现接收到信号后需要执行的业务。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>当一个对象状态的改变需要改变其他对象时。比如：商品库存数量发生变化时，需要通知商品详情页、购物车等系统改变数量。</li><li>当一个对象发生改变时只想要发送通知，而不是需要知道接受者是谁。比如：订阅微信公众号的文章，发送者通过公众号发送，订阅者并不知道哪些用户订阅了公众号。</li><li>需要创建一种链式触发机制时。 比如：在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象，这样通过观察者模式能够很好的实现。</li><li>微博或朋友圈发送的场景。这观察者模式的典型应用场景，一个人发微博或朋友圈，只要是关联的朋友都会收到通知；一旦取消关注，此人以后将不会收到相关通知。</li><li>需要建立基于事件触发的场景。比如： 基于Java UI 的编程，所有键盘和鼠标事件都是由它的侦听器对象和指定函数处理，当用户点击鼠标时，订阅鼠标单击事件的函数将被调用，并将上下问数据作为方法参数传递给他。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>降低了目标和观察者之间的耦合关系，两者之间是抽象耦合关系</li><li>被观察者发送通知，所有注册的观察者都会收到消息，实现广播机制</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li><li>如果被观察者有循环以来的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>实现一个购房，抽奖摇号，摇号完成后，将消息分别通过短信发送给用户，和记录到MQ中。<br>抽奖摇号：被观察者<br>消息发送记录： 观察者</p><ol><li><p>相关实现类（实现的辅助类）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LotteryResult</span>:<br>    <span class="hljs-comment"># 用户抽奖结果对象</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, uid, msg, dateTime</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.uid = uid<br>        self.msg = msg<br>        self.dateTime = dateTime<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getUid</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.uid<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getMsg</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.msg<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawHouseService</span>:<br>    <span class="hljs-comment"># 摇号操作</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lots</span>(<span class="hljs-params">uid</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(uid) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;恭喜id为<span class="hljs-subst">&#123;uid&#125;</span>,中签&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;很遗憾id为<span class="hljs-subst">&#123;uid&#125;</span>,没有中签&quot;</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;很遗憾id为<span class="hljs-subst">&#123;uid&#125;</span>,没有中签&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>观察者管理方法（非必须）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventManager</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;管理者接口</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        metaclass (_type_, optional): _description_. Defaults to abc.ABCMeta.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 监听器集合</span><br>        self.__listeners = []<br>    <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">self, listener</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;订阅</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            listener (_type_): 监听对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.__listeners.append(listener)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unsubscribe</span>(<span class="hljs-params">self, listener</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;取消订阅</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            listener (_type_): _description_</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.__listeners.remove(listener)<br><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">notice</span>(<span class="hljs-params">self, result: LotteryResult</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;通知</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            result (LotteryResult): 摇号结果</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> self.__listeners:<br>            item.doEvent(result=result)<br></code></pre></td></tr></table></figure></li><li><p>抽象被观察者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubjectService</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.eventManage = EventManager()<br>        <span class="hljs-comment"># 订阅</span><br>        self.eventManage.subscribe(MessageEventListener)  <span class="hljs-comment"># 短信</span><br>        self.eventManage.subscribe(MQEventListener)  <span class="hljs-comment"># MQ</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lotteryAndMsg</span>(<span class="hljs-params">self, uid: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发送通知</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            Stringuid (_type_): _description_</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        lotteryResult = self.lottery(uid=uid)<br>        self.eventManage.notice(lotteryResult)<br><br><span class="hljs-meta">    @abc.abstractclassmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lottery</span>(<span class="hljs-params">self, uid: <span class="hljs-built_in">str</span></span>)-&gt;LotteryResult:<br>        <span class="hljs-comment"># 开奖</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>具体被观察者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LotteryService</span>(<span class="hljs-title class_ inherited__">SubjectService</span>):<br>    <span class="hljs-comment"># 具体被观察者</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lottery</span>(<span class="hljs-params">self, uid: <span class="hljs-built_in">str</span></span>) -&gt; LotteryResult:<br>        <span class="hljs-comment"># 摇号</span><br>        result = DrawHouseService.lots(uid=uid)<br>        <span class="hljs-keyword">return</span> LotteryResult(uid=uid, msg=result, dateTime=datetime.datetime.now())<br></code></pre></td></tr></table></figure></li><li><p>抽象观察者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventListener</span>(abc.ABCMeta):<br>    <span class="hljs-comment"># 抽象观察者</span><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">doEvent</span>(<span class="hljs-params">result: LotteryResult</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;事件处理</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            slef (_type_): _description_</span><br><span class="hljs-string">            result (LotteryResult): 处理结果</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>具体观察者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageEventListener</span>(<span class="hljs-title class_ inherited__">EventListener</span>):<br>    <span class="hljs-comment"># 具体观察者(发送短信)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">doEvent</span>(<span class="hljs-params">result: LotteryResult</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;发送短信通知，用户ID: <span class="hljs-subst">&#123;result.getUid()&#125;</span>, 您的摇号结果为: <span class="hljs-subst">&#123;result.getMsg()&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MQEventListener</span>(<span class="hljs-title class_ inherited__">EventListener</span>):<br>    <span class="hljs-comment"># 具体观察者（记录数据到MQ）</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">doEvent</span>(<span class="hljs-params">result: LotteryResult</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;记录用户的摇号结果(MQ)，用户ID: <span class="hljs-subst">&#123;result.getUid()&#125;</span>, 摇号结果为: <span class="hljs-subst">&#123;result.getMsg()&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>主方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    lotterServer = LotteryService()<br>    lotterResult = lotterServer.lotteryAndMsg(uid=<span class="hljs-string">&quot;123&quot;</span>)<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>观察者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13.组合模式</title>
    <link href="/2023/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13-python%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13-python%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式和组合关系不一样，组合模式使用于解决树形结构的场景，更多的是处理对象组织结构之间的问题，而组合关系则是通过将不同对象封装起来完成一个统一功能。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>将对象组合成属性结构一表示整个部分的层次结构，组合模式可以让用户统一对待单个对象和对象的组合。</p><p>比如： 在计算机中目录结构， 包含了文件夹和文件两种元素，文件夹可以包含，文件夹和文件。使文件夹形成一个树形结构。</p><ol><li>透明组合模式：<br>抽象根节点中声明了所有用与管理成员对象的方法，这样做的好处是确保了所有构建类都有相同的接口。透明组合模式也是组合模式的标准形式。</li></ol><p>透明组合模式的缺点是不够安全，因为叶子对象和容器对象的本质上是有区别的，叶子对象不可能有下一层次的对象，即不可能包含成员对象，因此有些方法对其是没有意义的，在代码运行不会出错，但是在运行阶段如果调用这些方法可能会出错(可以在相应方法中进行处理)。</p><ol start="2"><li>安全组合模式<br>在抽象构建角色中没有声明任何用于管理成员对象的方法，而是在树枝节点类中声明并实现这些方法（只声明了业务方法）。安全组合模式的缺点是不够透明，因为叶子构建和容器构建具有不同的方法，且容器构建中那些用于管理成员对象的方法没有在抽象构建类中定义，因此客户端不能完全针对抽象编程，必须有区别的对待叶子构建和容器构建。</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象根节点(Component): 声明了所有子类共有的行为和属性</li><li>树枝节点(Composite): 实现了根节点中定义的行为，其中有一个属性可以用于存储子节点。</li><li>叶子节点(Leaf): 叶子节点下没有其他分支了是系统层次遍历的最小单位。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>处理一个树形结构，比如：公司人员组织架构、订单信息等。</li><li>跨越多个层次结构聚合数据，比如统计文件夹下文件总数。</li><li>统一处理一个结构中的多个对象，比如，遍历文件夹下所有xml类型文件内容。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>组合模式可以清楚的定义分层次的复杂对象，表示对象的全部或部分层次，他让客户端忽略了层次的差异，方便对整个层次结构进行控制。</li><li>客户端可以一致的使用一个组合结构或者其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码</li><li>在组合模式中增加新的树枝节点和叶子节点都很方便，无需对现有类库进行任何修改，符合 开闭原则。</li><li>组合模式为属性结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的属性结构，但对树形结构的控制却非常简单。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>使用组合模式的前提在于，业务场景必须能够表示成树形结构。所以应用场景有一定的局限性，并不是一种很常用的设计模式。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>我们实现一个计算机的文件结构，如图所示<br><img src="/images/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.png" alt="组合模式示例"></p><ol><li><p>抽象目录根节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>(metaclass=abc.ABCMeta):<br>    <br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 回去文件名</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getSize</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取文件大小</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, entry</span>):<br>        <span class="hljs-comment"># 目录下添加文件</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printList</span>(<span class="hljs-params">self, prefix: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;显示指定目录下得文件信息</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;文件信息（供客户看， print显示）</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            str: _description_</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.getName()&#125;</span>(<span class="hljs-subst">&#123;self.getSize()&#125;</span>)&quot;</span><br><br>    <span class="hljs-comment"># 直接调用对象显示</span><br>    __repr__ = __str__<br><br><br></code></pre></td></tr></table></figure></li><li><p>文件叶子节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>(<span class="hljs-title class_ inherited__">Entry</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, size: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.__name = name<br>        self.__size = size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getSize</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, entry</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().add(entry)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printList</span>(<span class="hljs-params">self, prefix: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-comment"># 输出文件信息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;prefix&#125;</span>/<span class="hljs-subst">&#123;self&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>文件夹树枝节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Directory</span>(<span class="hljs-title class_ inherited__">Entry</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.__name = name<br>        self.__entry_list = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, entry: Entry</span>):<br>        self.__entry_list.append(entry)<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getSize</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;递归将文件加下所有文件大小相加</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            _type_: _description_</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        size: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> self.__entry_list:<br>            size += item.getSize()<br>        <span class="hljs-keyword">return</span> size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printList</span>(<span class="hljs-params">self, prefix: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;遍历文件夹下文件</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            prefix (str): 要遍历得文件名</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;prefix&#125;</span>/<span class="hljs-subst">&#123;self&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> self.__entry_list:<br>            item.printList(prefix+<span class="hljs-string">&quot;/&quot;</span>+self.getName())<br>        <br><br></code></pre></td></tr></table></figure></li><li><p>客户调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 根节点</span><br>    rootDir = Directory(<span class="hljs-string">&quot;root&quot;</span>)<br><br>    <span class="hljs-comment"># 根节点下有一个bin文件夹</span><br>    binDir = Directory(<span class="hljs-string">&quot;bin&quot;</span>)<br>    <span class="hljs-comment"># 把bin 放到根目录下</span><br>    rootDir.add(binDir)<br>    <span class="hljs-comment"># bin 目录下有vi 和 test 文件夹</span><br>    viDir = Directory(<span class="hljs-string">&quot;vi&quot;</span>)<br>    binDir.add(viDir)<br>    testDir = Directory(<span class="hljs-string">&quot;test&quot;</span>)<br>    binDir.add(testDir)<br><br>    <span class="hljs-comment"># 根目录下还有同一个 tmp 文件夹</span><br>    tmpDir = Directory(<span class="hljs-string">&quot;tmp&quot;</span>)<br>    rootDir.add(tmpDir)<br><br>    <span class="hljs-comment"># 根目录下还有一个 usr 目录</span><br>    usrDir = Directory(<span class="hljs-string">&#x27;usr&#x27;</span>)<br>    rootDir.add(usrDir)<br><br>    <span class="hljs-comment"># usr 下还有一个mysql</span><br>    mysqlDir = Directory(<span class="hljs-string">&quot;mysql&quot;</span>)<br>    usrDir.add(mysqlDir)<br><br>    <span class="hljs-comment"># mysql 下有 my.conf 和 test.db文件</span><br>    mysqlDir.add(File(<span class="hljs-string">&quot;my.conf&quot;</span>, <span class="hljs-number">200</span>))<br>    mysqlDir.add(File(<span class="hljs-string">&quot;test.db&quot;</span>, <span class="hljs-number">500</span>))<br><br>    <span class="hljs-comment"># 查看root目录下文件</span><br>    rootDir.printList(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">/root(700)<br>/root/bin(0)<br>/root/bin/vi(0)<br>/root/bin/test(0)<br>/root/tmp(0)<br>/root/usr(700)<br>/root/usr/mysql(700)<br>/root/usr/mysql/my.conf(200)<br>/root/usr/mysql/test.db(500)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12.享元模式</title>
    <link href="/2023/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12-python%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12-python%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，从而让我们能在有限的内存容量中载入更过对象。</p><p>比如：在计算机中26个英文字母，使用就是用了享元的概念： a = “c”  b = “c”  a is b  为 True, 也就是说a 和 b 取得值地址是一样得是一个对象。（26个英文字母取用就是用了享元得概念）</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>享元模式包含两种状态：</p><ol><li>内部状态： 不会随着环境得变化而变化得科共享部分（共享类）。</li><li>外部状态： 指得是随着环境得变化而变化得不可以共享得部分（普通类）。<br>结构：</li><li>抽象享元角色（Flyweight）:声明了具体的享元角色需要实现的公共方法。</li><li>可共享的角色（Concrete Flyweight）: 可共享的具体的享元角色。（在python中一定范围的数字被作为共享角色； a=128 b=128  a is b）</li><li>非共享角色（Unshared Flyweight）: 不需要被共享的角色，普通类 （在python中一定范围外的数字被作为非共享角色; a=1000 b=1000 a is b）</li><li>享元工厂（FlyweightFactory）: 在工厂里对享元角色创建管理，使用单例确保享元池是单例的</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>一个系统有大量相同或者相似的对象，造成内存大量耗费(如数据库的数据连接池)</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>极大的减少了内存中相似或者相同对象数量，节约资源</li><li>享元模式的外部状态相对独立，且不影响内部状态。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂</li></ol><h2 id="讨论（单例和享元模式）"><a href="#讨论（单例和享元模式）" class="headerlink" title="讨论（单例和享元模式）"></a>讨论（单例和享元模式）</h2><ol><li>其实现方式不一样，单例是一个类只有一个唯一的实例，而享元可以有多个实例，只是通过一个共享容器来存储不同的对象。</li><li>享元模式是为了节约内存空间，提升程序性能，而单例模式则主要是出于共享状态的目的。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>比如 5子棋，白子和黑子是共享的，不一样的只是位置坐标</p><ol><li><p>抽象共享棋子角色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GobangFlyweight</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-comment"># 共享的颜色棋子</span><br>    __color: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;显示位置&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>具体享元角色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gobang</span>(<span class="hljs-title class_ inherited__">GobangFlyweight</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, color: <span class="hljs-built_in">str</span></span>):<br>        self.__color = color<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">self, coordinate:Coordinate</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.__color&#125;</span>棋子显示在x:<span class="hljs-subst">&#123;coordinate.x&#125;</span>, y:<span class="hljs-subst">&#123;coordinate.y&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>不可共享角色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coordinate</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.x = x<br>        self.y = y<br></code></pre></td></tr></table></figure></li><li><p>享元池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GobangFactory</span>:<br>    <span class="hljs-comment"># 享元池</span><br>    pool = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, <span class="hljs-string">&quot;_instance&quot;</span>):<br>            <span class="hljs-comment"># 没有的话创建,并继承成原本的 __new__ 方法</span><br>            cls._instance = <span class="hljs-built_in">super</span>(GobangFactory, cls).__new__(cls)<br>        <span class="hljs-keyword">return</span> cls._instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 放入黑色棋子</span><br>        self.pool[<span class="hljs-string">&quot;blcak&quot;</span>] = Gobang(<span class="hljs-string">&quot;black&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getGobang</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">str</span></span>)-&gt;GobangFlyweight:<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.pool:<br>            gobang = Gobang(key)<br>            self.pool[key] = gobang<br>            <span class="hljs-keyword">return</span> gobang<br>        <span class="hljs-keyword">return</span> self.pool.get(key)<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    gobang = GobangFactory()<br>    a1 = gobang.getGobang(<span class="hljs-string">&quot;black&quot;</span>)<br><br>    a1.display(Coordinate(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>    a2 = gobang.getGobang(<span class="hljs-string">&quot;black&quot;</span>)<br>    a2.display(Coordinate(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">print</span>(a1 <span class="hljs-keyword">is</span> a2)<br><br>    b1 = gobang.getGobang(<span class="hljs-string">&quot;write&quot;</span>)<br>    b1.display(Coordinate(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))<br>    b2 = gobang.getGobang(<span class="hljs-string">&quot;write&quot;</span>)<br>    b2.display(Coordinate(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(b1 <span class="hljs-keyword">is</span> b2)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>享元模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11.外观模式</title>
    <link href="/2023/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11-python%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11-python%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>外观模式也叫门面模式：为子系统中的一组接口提供统一的接口，定义了更高级别的接口，使子系统更易于使用且外部程序不需要关心内部子系统的具体细节。</p><p><img src="/images/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%E5%9B%BE%E4%B8%80.png" alt="外观模式"></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>外观类（Facade）： 进行组合多个子系统</li><li>子系统类（SubSystem）：具体的功能</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>简化复杂系统。比如：开发一套电商系统后（包含订单，商品，支付，会员等系统），我们不能让用户依次使用这些系统后才能完成商品的购买，而是需要一个门户网站或手机App供用户在线购物。</li><li>减少客户端处理的系统数量。比如在web系统中，需要处理 Database数据库、Model业务对象等，器对使用Database对象就需要打开数据库、关闭连接等操作，然后转换为Model业务对象，如果能够创建一个数据库使用的门面（DAO层），那么实现以上过程会容易的多。</li><li>一个系统（或对象）为多个系统（或对象）工作，比如：线程池就是一个外观模式，为系统提供了统一的线程对象的创建、销毁、使用等。</li><li>联合更多的系统来扩展原有系统。例如：人脸识别，我们可以不需要自行研发，使用其他公司的。</li><li>作为一个简洁的中间层。比如：在秒杀、库存、钱包等场景中，我们需要共享 有状态的数据时（库存、账户里的钱），在不改变原有系统的前提下，通过一个中间的共享层（将商品库存总数放在redis中），就能统一进行各种服务。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>对客户端屏蔽了子系统组件，减少了客户端所需要处理的对象数目，并使子系统使用起来更容易，通过引入外观模式，客户端代码将变得简单，与之关联的对象也减少了。</li><li>它实现了子系统与客户端之前的松耦关系，使得子系统的变化不会影响到调用它的客户端，只需要调整外观类即可。</li><li>一个系统的修改对其他子系统没有任何影响，儿子系统内部变化也不会影响到外观对象。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>不能很好的控制客户端直接使用子系统，如果客户端访问子系统类做太多的限制则减少了可变性和灵活性</li><li>如果设计不当，增加性的子系统可能需要修改外观类的源代码。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>实现一个智能音箱一键开启 TV（电视）、Light（电灯）、AirCondition（空调）</p></blockquote><ol><li><p>子系统</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打开灯&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">off</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;关闭灯&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打开电视&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">off</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;关闭关闭电视&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AirCondition</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打开空调&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">off</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;关闭空调&quot;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>音箱外观系统</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartAppliancesFacade</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.__light = Light()<br>        self.__tv = TV()<br>        self.__airContition = AirCondition()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">self, message: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;打开&quot;</span> <span class="hljs-keyword">in</span> message:<br>            self.on()<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;关闭&quot;</span> <span class="hljs-keyword">in</span> message:<br>            self.off()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对不起没有听清楚，请再说一次&quot;</span>)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on</span>(<span class="hljs-params">self</span>):<br>        self.__light.on()<br>        self.__tv.on()<br>        self.__airContition.on()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">off</span>(<span class="hljs-params">self</span>):<br>        self.__light.off()<br>        self.__tv.off()<br>        self.__airContition.off()<br><br><br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    smartAppliances = SmartAppliancesFacade()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一键开启=============&quot;</span>)<br>    smartAppliances.say(<span class="hljs-string">&quot;打开家电&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一键关闭=============&quot;</span>)<br>    smartAppliances.say(<span class="hljs-string">&quot;关闭家电&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">一键开启=============<br>打开灯<br>打开电视<br>打开空调<br>一键关闭=============<br>关闭灯<br>关闭关闭电视<br>关闭空调<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>外观模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10.装饰器模式</title>
    <link href="/2023/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10-python%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10-python%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>再不修改原有方法的基础上动态的给一个对象添加一些额外的职责，就扩展功能而言，装饰着模式提供了一种比使用子类更灵活的替代方案。（其原理和特点和python的装饰器一样）</p><p>本章节讲解，会先以规范的设计模式来进行代码实现，其次会用python的装饰器来实现</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象构建角色(Component): 它是具体构建和抽象装饰类的共同父类</li><li>具体构建角色(ConcreteComponent): 它是抽象构建角色的子类，用于定义具体的构建对象，（被装饰的类，包含基础功能）</li><li>抽象装饰角色(Decorator): 它是抽象构建角色的子类，用于给具体构建角色增加职责。</li><li>具体装饰角色(ConcreteDecorator): 他是抽象装饰类的子类，实现抽象装饰觉得的功能，未具体构建角色增加功能</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>快速的动态扩展和撤销一个类的功能场景。比如有的场景下对API接口的安全性要求高，就可以使用装饰模式加密传输，不高的可以不适用。</li><li>不支持继承扩展类的场景，或者系统中已经存在大量通过继承产生的子类</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>对于扩展一个对象的功能，装饰器模式比继承更加灵活，不会导致类的个数急剧增加。</li><li>可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以再运行时选择不同的具体装饰类，从而实现不同的行为。</li><li>可以对一个类进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合可以创造不同的行为组合，得到更强大的对象</li><li>具体构建类和具体装饰类可以独立变化，再不修改基础方法的情况下，为其增加功能。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>在使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于他们之间相互连接的方式有所不同，而不是他们的类或者属性值不同，会占用更多的资源，一定程度影响性能</li><li>装饰器模式比继承更加灵活，但是也更容易出错，对于多次装饰的对象，再排查错误时比较麻烦。</li></ol><h2 id="标准装饰器模式实现-实现文件读写功能，并使用装饰器为其增加加密解密功能"><a href="#标准装饰器模式实现-实现文件读写功能，并使用装饰器为其增加加密解密功能" class="headerlink" title="标准装饰器模式实现(实现文件读写功能，并使用装饰器为其增加加密解密功能)"></a>标准装饰器模式实现(实现文件读写功能，并使用装饰器为其增加加密解密功能)</h2><ol><li><p>文件抽象构建角色(Component 声明了方法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataLoaderComponent</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-comment"># 抽象的文件读写方法</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 读</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-comment"># 写</span><br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>具体文件构建角色(ConcreteComponent, 实现抽象构建角色)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDataLoaderComponent</span>(<span class="hljs-title class_ inherited__">DataLoaderComponent</span>):<br>    <span class="hljs-comment"># 具体文件读写构建角色</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, file_path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># file_pat: 文件路径</span><br>        self.file_path = file_path<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 读</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> r:<br>            data = r.read()<br>        <span class="hljs-keyword">return</span> data<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-comment"># 写</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> w:<br>            w.write(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li><li><p>抽象文件装饰角色(Decorator， 实现Component)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataLoderDecorator</span>(<span class="hljs-title class_ inherited__">DataLoaderComponent</span>):<br>    <span class="hljs-comment"># 抽象文件读写装饰角色</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, dataLoader: DataLoaderComponent</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;_summary_</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            dataLoader (DataLoaderComponent): 对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.dataLoader = dataLoader<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.dataLoader.read()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">return</span> self.dataLoader.write(data)<br><br></code></pre></td></tr></table></figure></li><li><p>具体文件装饰角色(ConcreteDecorator, 继承DataLoderDecorator)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EncryptionDataDecorator</span>(<span class="hljs-title class_ inherited__">DataLoderDecorator</span>):<br>    <span class="hljs-comment"># 具体文件读写装饰角色</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, dataLoader: DataLoaderComponent</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(dataLoader)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        data = <span class="hljs-built_in">super</span>().read()<br>        <span class="hljs-built_in">print</span>(data)<br>        <span class="hljs-keyword">return</span> self.decode(data=data)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">str</span></span>):<br>        data = self.encode(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().write(data)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">str</span></span>)-&gt;<span class="hljs-built_in">str</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            base64加密</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> base64.b64encode(data.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).decode()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;base64解密&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> base64.b64decode(data).decode()<br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    file_path = <span class="hljs-string">r&quot;test.txt&quot;</span><br>    <span class="hljs-comment"># 创建基础文件对象</span><br>    base_data = BaseDataLoaderComponent(file_path=file_path)<br>    <span class="hljs-comment"># 创建装饰对象</span><br>    encryption = EncryptionDataDecorator(base_data) <br>    <span class="hljs-comment"># 写文件</span><br>    status = encryption.write(<span class="hljs-string">&quot;name:刘勇, age: 23&quot;</span>)<br>    <span class="hljs-built_in">print</span>(status)<br>    <span class="hljs-comment"># 读文件</span><br>    info = encryption.read()<br>    <span class="hljs-built_in">print</span>(info)<br></code></pre></td></tr></table></figure></li></ol><h2 id="python装饰器模式实现-实现文件读写功能，并使用装饰器为其增加加密解密功能"><a href="#python装饰器模式实现-实现文件读写功能，并使用装饰器为其增加加密解密功能" class="headerlink" title="python装饰器模式实现(实现文件读写功能，并使用装饰器为其增加加密解密功能)"></a>python装饰器模式实现(实现文件读写功能，并使用装饰器为其增加加密解密功能)</h2><ol><li>书写装饰器（为类写的装饰器, 如果是为函数写装饰器第一个self参数不需要， 如果装饰器需要有自己的参数，那就再外边再套一层用于接收参数）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_write</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-comment"># 加密写装饰器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">str</span>, *args, **kwargs</span>):<br>        data = base64.b64encode(data.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).decode()<br>        <span class="hljs-keyword">return</span> func(self, data)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_read</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-comment"># 解密读装饰器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">self</span>):<br>        data = func(self)<br>        <span class="hljs-keyword">return</span> base64.b64decode(data).decode()<br>    <span class="hljs-keyword">return</span> wrapper<br><br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li>具体文件构建角色(ConcreteComponent, 实现抽象构建角色)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDataLoaderComponent</span>(<span class="hljs-title class_ inherited__">DataLoaderComponent</span>):<br>    <span class="hljs-comment"># 具体文件读写构建角色</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, file_path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># file_pat: 文件路径</span><br>        self.file_path = file_path<br><br>    <span class="hljs-comment"># 用装饰器为方法装饰</span><br><span class="hljs-meta">    @decode_read</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 读</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> r:<br>            data = r.read()<br>        <span class="hljs-keyword">return</span> data<br><br><span class="hljs-meta">    @encode_write</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-comment"># 写</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> w:<br>            w.write(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ol start="3"><li>调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    file_path = <span class="hljs-string">r&quot;test.txt&quot;</span><br>    base_data = BaseDataLoaderComponent(file_path=file_path)<br>    status = base_data.write(<span class="hljs-string">&quot;name:刘勇, age: 23&quot;</span>)<br>    <span class="hljs-built_in">print</span>(status)<br>    info = base_data.read()<br>    <span class="hljs-built_in">print</span>(info)<br><br></code></pre></td></tr></table></figure></li></ol><p class="note note-primary">比较两种根据情况使用，在python中装饰器是一个自带的方法，应用也比较广泛，自我理解，在使用python开发可以优先使用python装饰器方式。如果需要对一个方法进行多次装饰的时候，考虑使用标准装饰器模式</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>桥接模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.桥接模式</title>
    <link href="/2023/04/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9-python%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9-python%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>将抽象与实现分离，是他们可以独立变化。用组合关系代替继承关系来实现，从而降低抽象和实现这两个可变维度的耦合度。</p><p>用一种巧妙的方式处理多层继承存在的问题。用抽象关联来取代传统的多层继承，将类之间的静态继承转变为动态的组合关系，使系统更加灵活，易于扩展，有效的控制了类的个数（避免了继承层次的指数级爆炸）</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象化 (Abstraction) 角色： 定义抽象类，并包含一个对实现化对象(Implementor)的引用。</li><li>实现化(Implementor)角色： 定义实现化角色的接口，负责定义角色必须的行为和属性，供扩展抽象化角色调用。</li><li>扩展抽象化(Refined Abstraction)角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li>具体实现化（Concrete Implementor）角色：对实现化看i恶的的实现。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><p>现在画图需要，大、中、小，三种型号的12种颜色， 一种方案，使用 36支 蜡笔（12支中号、12支大号、12支小号）；另一种是准备（大、中、小 三种型号的毛笔，在准备12种颜料）可以理解为是桥接模式</p><p> 型号和颜色是两个独立的维度。</p><pre><code class="hljs"> 抽象化： 毛笔 扩展抽象化： 大号毛笔、中号毛笔、小号毛笔 实现化角色： 颜色（上色功能） 具体实现化： 黑色、白色、蓝色</code></pre></li><li><p>需要在某一种统一写一下增加更过组件时。 例如：支付， 分为微信支付，支付宝支付，其中包含 密码支付、指纹支付、人脸支付。</p><p>如果用抽象工厂方式需要建立两个工厂，每个微信支付工厂包含（密码支付、指纹支付、人脸支付）， 支付宝工厂也包含（密码支付、指纹支付、人脸支付）；那这个时候我们可以考虑，使用桥接模式来实现。</p></li><li><p>需要提供独立性的应用程序。比如： 不同数据库的JDBC驱动、硬盘驱动等。</p></li><li><p>拆分复杂的类对象时，当一个大类包含大量独对象和方法时，极不方便阅读，也不方便修改。</p></li><li><p>希望从多个维度扩展时。 比图： 系统功能性和非功能性角度，业务或技术角度等。</p></li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>将类分为实体（抽象）和功能（实现）维度，将其解耦，使得实体和功能可以沿各自的维度变化。</li><li>提高了系统扩展性，两个维度可以任意扩展，不需要修改原有系统，符合开闭原则。</li><li>解决了多继承模式违背单一原则，复用性差的问题。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li><li>桥接模式要求正确识别出两个独立变化的维度，因此具有一定的局限性。如何正确划分维度比较重要</li></ol><p class="note note-primary">与组合模式比较，桥接模式是将同级的进行组装，而组合模式关注的重点是从部分到整体（具体的学习到组合模式在考虑）</p><h2 id="代码实现（场景2）"><a href="#代码实现（场景2）" class="headerlink" title="代码实现（场景2）"></a>代码实现（场景2）</h2><p>前提： 要识别出一个类所具有的两个独立变化维度，将他们设计未两个独立的继承等级结构，为两个维度提供抽象层，并建立抽象耦合。</p><p>支付抽象化(PayAbstraction):</p><pre><code class="hljs">支付渠道子类（扩展抽象化WeixinRefinedAbstraction）：微信支付支付渠道子类（扩展抽象化ZhifubaoRefinedAbstraction）：支付宝支付</code></pre><p>支付方式实现化（Implementor）:</p><pre><code class="hljs">支付模式实现（具体实现化 FaceConcreteImplementor）：人脸支付支付模式实现（具体实现化 FingerConcreteImplementor）：指纹支付支付模式实现（具体实现化 CipherConcreteImplementor）：密码支付</code></pre><ol><li>支付实现化 (Implementor)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PayImplementor</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">security</span>(<span class="hljs-params">uid: <span class="hljs-built_in">str</span></span>)-&gt;<span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;安全校验</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            uid (str): 用户id</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            bool: 校验状态</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>具体实现化(Concrete Implementor):</li></ol><ul><li>人脸支付<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FaceConcreteImplementor</span>(<span class="hljs-title class_ inherited__">PayImplementor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">security</span>(<span class="hljs-params">self, uid: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;人脸支付，开始校验人脸信息 ----&gt;<span class="hljs-subst">&#123;uid&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure></li><li>指纹支付<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FingerConcreteImplementor</span>(<span class="hljs-title class_ inherited__">PayImplementor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">security</span>(<span class="hljs-params">self, uid: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;指纹支付，开始校验指纹信息 ----&gt;<span class="hljs-subst">&#123;uid&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li><li>密码支付<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CipherConcreteImplementor</span>(<span class="hljs-title class_ inherited__">PayImplementor</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">security</span>(<span class="hljs-params">self, uid: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;密码支付，开始校验密码信息 ----&gt;<span class="hljs-subst">&#123;uid&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>支付抽象化（Abstraction）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PayAbstraction</span>(metaclass=abc.ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, payModel: PayImplementor</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.payModel = payModel<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">doPay</span>(<span class="hljs-params">self, uid: <span class="hljs-built_in">str</span>, orderId: <span class="hljs-built_in">str</span>, amount: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;支付</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            uid (str): 用户id</span><br><span class="hljs-string">            orderId (str): 订单号</span><br><span class="hljs-string">            amount (int): 金额</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>扩展抽象化</p></li></ol><ul><li><p>微信支付</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeixinRefinedAbstraction</span>(<span class="hljs-title class_ inherited__">PayAbstraction</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, payModel: PayImplementor</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(payModel)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">doPay</span>(<span class="hljs-params">self, uid: <span class="hljs-built_in">str</span>, orderId: <span class="hljs-built_in">str</span>, amount: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-comment"># 进行支付</span><br>        status: <span class="hljs-built_in">bool</span> = self.payModel.security(uid)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> status:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;微信支付失败: <span class="hljs-subst">&#123;uid&#125;</span>, <span class="hljs-subst">&#123;orderId&#125;</span>, <span class="hljs-subst">&#123;amount&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">500</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;微信支付成功: <span class="hljs-subst">&#123;uid&#125;</span>, <span class="hljs-subst">&#123;orderId&#125;</span>, <span class="hljs-subst">&#123;amount&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure></li><li><p>支付宝支付</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> <span class="hljs-constructor">ZhifubaoRefinedAbstraction(PayAbstraction)</span>:<br>    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>, <span class="hljs-params">payModel</span>: PayImplementor)</span> -&gt; None:<br>        super<span class="hljs-literal">()</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">payModel</span>)</span><br><br>    def <span class="hljs-keyword">do</span><span class="hljs-constructor">Pay(<span class="hljs-params">self</span>, <span class="hljs-params">uid</span>: <span class="hljs-params">str</span>, <span class="hljs-params">orderId</span>: <span class="hljs-params">str</span>, <span class="hljs-params">amount</span>: <span class="hljs-params">int</span>)</span>:<br>        # 进行支付<br>        status: <span class="hljs-built_in">bool</span> = self.payModel.security(uid)<br>        <span class="hljs-keyword">if</span> not status:<br>            print(f<span class="hljs-string">&quot;支付宝支付失败: &#123;uid&#125;, &#123;orderId&#125;, &#123;amount&#125;&quot;</span>)<br>            return <span class="hljs-number">500</span><br>        print(f<span class="hljs-string">&quot;支付宝支付成功: &#123;uid&#125;, &#123;orderId&#125;, &#123;amount&#125;&quot;</span>)<br>        return <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 微信密码支付</span><br>    cipherPay = CipherConcreteImplementor()<br>    weixinCipher = WeixinRefinedAbstraction(cipherPay)<br>    weixinCipher.doPay(uid=<span class="hljs-string">&quot;111&quot;</span>, orderId=<span class="hljs-string">&quot;1990001&quot;</span>, amount=<span class="hljs-number">10</span>)<br>    <br>    <span class="hljs-comment"># 支付宝密码支付</span><br>    zhifubaoCipher = ZhifubaoRefinedAbstraction(cipherPay)<br>    zhifubaoCipher.doPay(uid=<span class="hljs-string">&quot;111&quot;</span>, orderId=<span class="hljs-string">&quot;1990001&quot;</span>, amount=<span class="hljs-number">10</span>)<br><br><br>    <span class="hljs-comment"># 微信人脸</span><br>    facePay = FaceConcreteImplementor()<br>    weixinFace = WeixinRefinedAbstraction(facePay)<br>    weixinFace.doPay(uid=<span class="hljs-string">&quot;111&quot;</span>, orderId=<span class="hljs-string">&quot;1990001&quot;</span>, amount=<span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># 支付宝人脸</span><br>    zhifubaoFace = ZhifubaoRefinedAbstraction(facePay)<br>    zhifubaoFace.doPay(uid=<span class="hljs-string">&quot;111&quot;</span>, orderId=<span class="hljs-string">&quot;1990001&quot;</span>, amount=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></li><li><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">密码支付，开始校验密码信息 ----&gt;111<br>微信支付成功: 111, 1990001, 10<br>密码支付，开始校验密码信息 ----&gt;111<br>支付宝支付成功: 111, 1990001, 10<br>人脸支付，开始校验人脸信息 ----&gt;111<br>微信支付成功: 111, 1990001, 10<br>人脸支付，开始校验人脸信息 ----&gt;111<br>支付宝支付成功: 111, 1990001, 10<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>桥接模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8.适配器模式</title>
    <link href="/2023/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8-python%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8-python%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>将一个类的接口转换成客户希望的另外一个接口，使得原来由于接口不兼容而不能一起工作的那些类可以一起工作。 分为:</p><ol><li>类适配器(通过继承扩展来实现)</li><li>对象适配器(通过在一个类中定义另一个来调用实现)</li></ol><p>前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>目标接口 Target: 当前业务所期待的接口，它可以时抽象类或者接口</li><li>适配者类（源接口类） Adaptee： 他是具体被访问和适配的类或者接口</li><li>适配器类 Adapter: 他是一个转换器，将适配者类 转换成 目标接口，让客户访问。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>要开发新功能，原有接口返回数据格式不满足，或者功能不满足，可以通过适配者模式</li><li>一开始项目对接的 A 方接口，项目已经开发完成了，现在和A方合作到期了改成B方接口，改项目不实际，所以用适配者模式将 B方接口是配成，现有项目满足的。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>客户端通过适配器可以透明的调用目标接口</li><li>复用现存的类，程序员不需要修改原有代码</li><li>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。</li><li>增加代码于都难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>需求：现有几口返回姓名，年龄和编号格式这样:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt"><br>&#123;<br>    &quot;name&quot;: [&quot;小明&quot;, &quot;小白&quot;, &quot;小黑&quot;, &quot;小红&quot;],<br>    &quot;age&quot;: [20, 21, 22, 18],<br>    &quot;number&quot;: [&quot;001&quot;, &quot;002&quot;, &quot;003&quot;, &quot;004&quot;]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>项目修改，改成这样：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">[<br>    &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 20, &#x27;number&#x27;: &#x27;001&#x27;&#125;, <br>    &#123;&#x27;name&#x27;: &#x27;小白&#x27;, &#x27;age&#x27;: 21, &#x27;number&#x27;: &#x27;002&#x27;&#125;, <br>    &#123;&#x27;name&#x27;: &#x27;小黑&#x27;, &#x27;age&#x27;: 22, &#x27;number&#x27;: &#x27;003&#x27;&#125;, <br>    &#123;&#x27;name&#x27;: &#x27;小红&#x27;, &#x27;age&#x27;: 18, &#x27;number&#x27;: &#x27;004&#x27;&#125;<br>]<br><br></code></pre></td></tr></table></figure><h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><ol><li><p>目标接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Target</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>源接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">self</span>):<br>        data =  &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: [<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;小白&quot;</span>, <span class="hljs-string">&quot;小黑&quot;</span>, <span class="hljs-string">&quot;小红&quot;</span>],<br>            <span class="hljs-string">&quot;age&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">18</span>],<br>            <span class="hljs-string">&quot;number&quot;</span>: [<span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>, <span class="hljs-string">&quot;004&quot;</span>]<br>        &#125;<br>        <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure></li><li><p>适配器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span>(<span class="hljs-title class_ inherited__">Target</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.old_obj = Adaptee()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">self</span>):<br>        data = self.old_obj.request()<br>        result = []<br>        <span class="hljs-keyword">for</span> name, age, number <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(data[<span class="hljs-string">&quot;name&quot;</span>], data[<span class="hljs-string">&quot;age&quot;</span>], data[<span class="hljs-string">&quot;number&quot;</span>]):<br>            result.append(&#123;<span class="hljs-string">&quot;name&quot;</span>: name, <span class="hljs-string">&quot;age&quot;</span>: age, <span class="hljs-string">&quot;number&quot;</span>: number&#125;)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ad = Adapter()<br>data = ad.request()<br><span class="hljs-built_in">print</span>(data)<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><ol><li><p>目标接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Target</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>源接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>(<span class="hljs-params">self</span>):<br>        data =  &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: [<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;小白&quot;</span>, <span class="hljs-string">&quot;小黑&quot;</span>, <span class="hljs-string">&quot;小红&quot;</span>],<br>            <span class="hljs-string">&quot;age&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">18</span>],<br>            <span class="hljs-string">&quot;number&quot;</span>: [<span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-string">&quot;002&quot;</span>, <span class="hljs-string">&quot;003&quot;</span>, <span class="hljs-string">&quot;004&quot;</span>]<br>        &#125;<br>        <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure></li><li><p>适配器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span>(Target,Adaptee):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">self</span>):<br>        data = self.get_data()<br>        result = []<br>        <span class="hljs-keyword">for</span> name, age, number <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(data[<span class="hljs-string">&quot;name&quot;</span>], data[<span class="hljs-string">&quot;age&quot;</span>], data[<span class="hljs-string">&quot;number&quot;</span>]):<br>            result.append(&#123;<span class="hljs-string">&quot;name&quot;</span>: name, <span class="hljs-string">&quot;age&quot;</span>: age, <span class="hljs-string">&quot;number&quot;</span>: number&#125;)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ad = Adapter()<br>data = ad.request()<br><span class="hljs-built_in">print</span>(data)<br><br></code></pre></td></tr></table></figure></li></ol><p>讨论：<br>类适配器模式与对象适配器模式的区别</p><p>如果一个被适配源类中有大量的方法，使用类适配器模式比较容易，只需要让 Adapter 类继承被适配的源类即可。而此时使用对象适配器模式则要在 Adapter 类中明确写出 Target 角色中的每个方法，并且在每个方法中要一一调用被适配的源类中的相应方法。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>适配器模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7.代理模式</title>
    <link href="/2023/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7-python%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7-python%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>有些情况下，用户不能或者不想直接访问具体对象，需要通过中介来完成某项任务，中介就是代理对象。（通过不改变原始类的情况下，通过代理类来给原始类附加功能）</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象主题类： 通过接口或者抽象类声明正式主题和代理对象实现的业务</li><li>真实主题类： 实现抽象主题的具体业务</li><li>代理类： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，他可以访问、控制或者扩展真实主题的功能</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>在django应用程序中的，中间件就是代理模式，在中间件中对所有请求进行预处理或者访问限制</li><li>orm 程序访问数据库</li><li>页面缓存功能，也属于代理方式（代理模式的应用场景很多）</li><li>当需要对一个对象的访问提供一些额外的操作的时，可以使用代理模式。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>代理模式在客户与目标对象之间起到一个中介作用和保护目标对象的作用</li><li>代理对象可以扩展目标对象的功能（例如：对访问的限制、缓存、加速等，也可以做些预处理）</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>代理模式会造成系统设计中类的增加,增加系统的复杂度</li><li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢</li></ol><p class="note note-primary">思考：在代理模式中我们是不是也可以判断用户的需求代理不同的对象。就像我告诉中介我要找什么样子的房子，中介根据我的期望联系房东，那这样的话是不是跟策略模式很像？从另一预处理角度来说是不是和装饰器模式很想？具体我们后边分析</p><h2 id="代码实现（我们实现简单的sql预检测）"><a href="#代码实现（我们实现简单的sql预检测）" class="headerlink" title="代码实现（我们实现简单的sql预检测）"></a>代码实现（我们实现简单的sql预检测）</h2><ol><li><p>抽象主题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractDBSubject</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">select</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>具体主题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DBSubject</span>(<span class="hljs-title class_ inherited__">AbstractDBSubject</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">select</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行查询<span class="hljs-subst">&#123;sql&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行插入<span class="hljs-subst">&#123;sql&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行删除<span class="hljs-subst">&#123;sql&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行更新<span class="hljs-subst">&#123;sql&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DBAccessProxy</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.DB = DBSubject()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">select</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;select&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> sql:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该sql有问题&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.DB.select(sql)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> sql:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该sql有问题&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.DB.insert(sql)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> sql:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该sql有问题&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.DB.delete(sql)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, sql</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;update&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> sql:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该sql有问题&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.DB.update(sql)<br><br><br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    db_p = DBAccessProxy()<br>    db_p.select(<span class="hljs-string">&quot;select * from pat_visit&quot;</span>)<br>    db_p.insert(<span class="hljs-string">&quot;insert into pat_visit(name) values(&#x27;xx&#x27;);&quot;</span>)<br>    db_p.delete(<span class="hljs-string">&quot;delete from pat_visit&quot;</span>)<br>    db_p.update(<span class="hljs-string">&quot;update pat_visit set name=&#x27;xx&#x27;&quot;</span>)<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理模式模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.原型模式</title>
    <link href="/2023/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6-python%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6-python%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>用于创建重复的对象，同时又能保证性能；简单理解就是一个对象的产生可以不由0起步，直接从一个已经具备一定雏形的对象克隆（节约创建对象所产生的开支），然后再修改为所需对象。<br>类似：python 用的 copy 方法。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>（java结构，通过继承Cloneable 重写clone 实现， python3 可以借助 copy实现）</p><ol><li>抽象原型（Prototype）: 一个接口，负责定义对象复制自身的方法</li><li>具体原型（ConcretePrototype）: 实现Prototype接口的类，具体原型实现抽象原型中的方法，以便所创建的对象调用该方法复制自己。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>类初始化消耗资源过多 : 如果类初始化时消耗过多的资源 , 如这个类中某个成员占用大量内存 , 为了节省开销 ;</li><li>初始化繁琐耗时 : 类对象创建时经过大量的计算 , 或与本地资源 ( 数据库 , 文件 ) 频繁交互 , 每次创建消耗大量的 CPU 与 时间资源 ;</li><li>构造函数复杂 : 类中定义的构造函数复杂 ;</li><li>实例对象数量庞大 : 如果在内存中循环创建了很多该实例对象 , 就可以使用原型模式复用不用的对象 , 用于创建新对象 ;</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>简化了新对象的创建过程，提高了效率</li><li>性能高， 使用原型模式复用的方式创建实例对象 , 比使用构造函数重新创建对象性能要高 ; ( 针对类实例对象开销大的情况 )</li><li>可以使用深克隆的方法保存对象状态，使其原型模式将对象复制一份并将其状态保存起来，以便再需要的时候使用，比如恢复到某一历史状态，可以辅助实现撤销操作。<br> 例如： 聊天消息，上线发布流程，需要撤销操作的程序等。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>注意深拷贝浅拷贝</li><li>在修改属性的时候需要注意</li></ol><p class="note note-primary">原型模式可以借助python的copy来实现复制（copy就相当于中间的复制方法，注意其深拷贝(copy.deepcopy)和浅拷贝(copy.copy())）</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li><p>具体类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, authors, price, **rest</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            name: 名字，</span><br><span class="hljs-string">            author: 作者</span><br><span class="hljs-string">            proce: 价格</span><br><span class="hljs-string">            **rest: 其他属性</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.name = name<br>        self.authors = authors<br>        self.price = price<br>        self.__dict__.update(rest)<br><br>    <span class="hljs-comment"># 返回对象信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        mylist = []<br>        ordered = OrderedDict(<span class="hljs-built_in">sorted</span>(self.__dict__.items()))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ordered.keys():<br>            mylist.append(<span class="hljs-string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, ordered[i]))<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;price&#x27;</span>:<br>                mylist.append(<span class="hljs-string">&#x27;$&#x27;</span>)<br>            mylist.append(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(mylist)<br></code></pre></td></tr></table></figure></li><li><p>python简单复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    b1 = Book(name=<span class="hljs-string">&quot;书籍A&quot;</span>, authors=<span class="hljs-string">&quot;A&quot;</span>, price=<span class="hljs-number">10</span>)<br><br>    b2 = copy.deepcopy(b1)<br>    b2.name = <span class="hljs-string">&quot;书籍B&quot;</span><br>    b2.authoe = <span class="hljs-string">&quot;B&quot;</span><br>    b2.price = <span class="hljs-number">15</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (b1, b2):<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;========&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>打印</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">authors: A<br>name: 书籍A<br>price: 10$<br><br>authoe: B<br>authors: A<br>name: 书籍B<br>price: 15$<br></code></pre></td></tr></table></figure></li><li><p>按书中方式复制（扩展）, 实现clone 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prototype</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.objects = <span class="hljs-built_in">dict</span>()    <span class="hljs-comment"># 初始化一个原型列表</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">self, identifier, obj</span>):<br>        <span class="hljs-comment"># 在原型列表中注册原型对象</span><br>        self.objects[identifier] = obj<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unregister</span>(<span class="hljs-params">self, identifier</span>):<br>        <span class="hljs-comment"># 从原型列表中删除原型对象</span><br>        <span class="hljs-keyword">del</span> self.objects[identifier]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">self, identifier, **attr</span>):<br>        <span class="hljs-comment"># 根据 identifier 在原型列表中查找原型对象并克隆</span><br>        found = self.objects.get(identifier)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Incorrect object identifier: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(identifier))<br>        obj = copy.deepcopy(found)<br>        obj.__dict__.update(attr)   <span class="hljs-comment"># 用新的属性值替换原型对象中的对应属性</span><br>        <span class="hljs-keyword">return</span> obj<br></code></pre></td></tr></table></figure></li><li><p>客户复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    b1 = Book(name=<span class="hljs-string">&quot;书籍A&quot;</span>, authors=<span class="hljs-string">&quot;A&quot;</span>, price=<span class="hljs-number">10</span>)<br><br>    prototype = Prototype()<br>    cid = <span class="hljs-string">&#x27;b1&#x27;</span><br>    prototype.register(cid, b1)<br>    b2 = prototype.clone(cid, name=<span class="hljs-string">&quot;书籍B&quot;</span>, authors=<span class="hljs-string">&quot;B&quot;</span>, price=<span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (b1, b2):<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure></li><li><p>打印</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">authors: A<br>name: 书籍A<br>price: 10$<br><br>authors: B<br>name: 书籍B<br>price: 10$<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建造者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.抽象工厂模式</title>
    <link href="/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4-python%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4-python%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>在工厂方法中，一个工厂只生产一种产品，抽象工厂可以理解为一个产品族（系列产品、生态）, 例如：小米工厂， 可以生产手机、生产电视、音响。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象工厂， 提供工厂的创建产品接口</li><li>具体工厂, 实现抽象工厂并创建具体产品，同一个产品族的产品由一个工厂创建</li><li>抽象产品，代表的一个大类的产品</li><li>具体产品，对抽象产品的具体化</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>系统中有多个产品族，每个工厂创建一族单属于不同等级的产品，系统一次只能消费某一组的产品，即同族产品一起使用</li></ol><p>例如：在支付的时候，微信支付和支付宝支付应该是两个工厂，其中，微信支付包含，单次扣费，周期扣费，签约，免密，调起支付； 支付宝支付同样。微信支付和支付宝支付分别属于两个产品族。在使用微信支付的时候只会用微信支付的实现方式，在使用支付宝支付的时候只会使用支付宝的实现方式</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>可以在类的内部对产品中相关联的多等级产品共同管理，而不必专门引入新的类来进行管理</li><li>需要产品族时，抽象工厂可以保证客户端始终只使用一个产品的产品组。</li><li>增强了产品的可扩展性，当需要增加一个行的产品族时，不需要修改原代码，满足开闭原则。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度</li></ol><h2 id="代码实现-实现小米工厂"><a href="#代码实现-实现小米工厂" class="headerlink" title="代码实现(实现小米工厂)"></a>代码实现(实现小米工厂)</h2><ol><li><p>抽象工厂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsFactory</span>(metaclass=ABCMeta):<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_phone</span>(<span class="hljs-params">self </span>):<br>        <span class="hljs-comment"># 造手机</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createTV</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 造电视</span><br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>定义抽象产品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsPhone</span>(metaclass=ABCMeta):<br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#手机</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsTV</span>(metaclass=ABCMeta):<br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 电视</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>具体产品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiPhone</span>(<span class="hljs-title class_ inherited__">AbsPhone</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建一个小米手机&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiTV</span>(<span class="hljs-title class_ inherited__">AbsTV</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建一个小米电视&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaPhone</span>(<span class="hljs-title class_ inherited__">AbsPhone</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建一个华为手机&quot;</span>)<br><br><br><span class="hljs-comment"># 具体产品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaTV</span>(<span class="hljs-title class_ inherited__">AbsTV</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建一个华为电视&quot;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>具体工厂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MiFactory</span>(<span class="hljs-title class_ inherited__">AbsFactory</span>):<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_phone</span>(<span class="hljs-params">cls</span>):<br>        miphone = MiPhone()<br>        <span class="hljs-keyword">return</span> miphone<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_tv</span>(<span class="hljs-params">cls</span>):<br>        miTV = MiTV()<br>        <span class="hljs-keyword">return</span> miTV<br><br><br><span class="hljs-comment"># 华为工厂</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaFacrory</span>(<span class="hljs-title class_ inherited__">AbsFactory</span>):<br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_phone</span>(<span class="hljs-params">cls</span>):<br>        huaphone = HuaPhone()<br>        <span class="hljs-keyword">return</span> huaphone<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_tv</span>(<span class="hljs-params">cls</span>):<br>        huaTV = HuaTV()<br>        <span class="hljs-keyword">return</span> huaTV<br></code></pre></td></tr></table></figure></li><li><p>客户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    miphone = MiFactory.create_phone()<br>    miphone.show()<br>    miTV = MiFactory.create_tv()<br>    miTV.show()<br><br>    huaPhone = HuaFacrory.create_phone()<br>    huaPhone.show()<br>    huaTV = HuaFacrory.create_tv()<br>    huaTV.show()<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>抽象工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.工厂方法模式</title>
    <link href="/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3-python%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3-python%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>创建产品对象定义一个工厂接口，并将实际创建推迟到子类。核心工厂类不在负责产品的创建，于是核心类就变成了一个抽象的工厂角色，只负责具体工厂子类必须实现的接口。进一步抽象的好处是，工厂方法模式可以使系统在不修改特定工厂角色的情况下引入新产品，满足开闭原则。</p><p>通俗点讲： 一个软件公司， 有好多产品线（抽象工厂），然后创建了一个部门（工厂），产品被拆分为很多块的概念（抽象产品），每块由一个程序员来实现（具体产品）一个简单的血汗工厂出来了。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>抽象产品类: 设置产品应有的属性和方法</li><li>具体产品: 实现产品的属性和方法</li><li>抽象工厂： 声明生产产品方法</li><li>具体工厂: 生产具体的产品呢</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>客户指向知道具体二点工厂，不用知道具体怎么建造产品，只关心品牌</p><ol><li>例如电视工厂，有小米电视工厂（只生产小米的电视）， 华为电视工厂（只生产华为的电视）。</li><li>在游戏开发中有很多敌人角色，有坦克、飞机、战船等，只需要将角色创建交给具体的工厂就行，不需要知道角色怎么创建。工厂只需要取下命令建就行具体的交给流水线，不需要工厂管理者知道具体流水线怎么操作。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>用户只需要知道具体工厂的名称就可以，不需要知道具体的创建过程。</li><li>灵活性增强，对于新产品创建只需要多一个工厂类，哪个产品除了问题就找那个具体的创建者就好了（像不像，你们公司要新开一个产品线，直接新建一个产品部门）</li><li>典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他具体实现类。… 哎</li></ol><p>通俗讲：每个人只需要知道自己需要什么就行具体实现不需要自己取了解，例如：客户只需要一个产品，产品只需要一个功能，程序员来实现。（客户不需要知道产品怎么弄，只需要告诉产品我要什么，产品找程序员实现，产品也不需要管你程序员怎么实现，产品找到你跟你说要怎么功能，你就得给我做出来）</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>类的个数容易过多，增加复杂度，产品越来越多，工厂越来越多。</li><li>一个工厂只能生产一种产品，此弊端有抽象工厂解决</li></ol><h2 id="代码实现-应用场景2的实例"><a href="#代码实现-应用场景2的实例" class="headerlink" title="代码实现 应用场景2的实例"></a>代码实现 应用场景2的实例</h2><ol><li><p>抽象产品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsProduct</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>具体产品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AirplaneProduct</span>(<span class="hljs-title class_ inherited__">AbsProduct</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    飞机</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;建造了一个飞机&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TankProduct</span>(<span class="hljs-title class_ inherited__">AbsProduct</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    坦克</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;建造了一个坦克&quot;</span><br><br></code></pre></td></tr></table></figure></li><li><p>抽象工厂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactory</span>(metaclass=abc.ABCMeta):<br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">newProduct</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>具体工厂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AirplaneFactory</span>(<span class="hljs-title class_ inherited__">AbstractFactory</span>):<br>    <span class="hljs-comment"># 飞机工厂</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">newProduct</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> AirplaneProduct()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TankFactory</span>(<span class="hljs-title class_ inherited__">AbstractFactory</span>):<br>    <span class="hljs-comment"># 坦克工厂</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">newProduct</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> TankProduct()<br><br></code></pre></td></tr></table></figure></li><li><p>客户需求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 我要一个飞机</span><br>airplane_factory = AirplaneFactory()<br>airplane_factory.newProduct()<br>airplane.show()<br><span class="hljs-comment"># 我再要一个坦克</span><br>tank_factory = TankFactory()<br>tank_factory.newProduct()<br>tank.show()<br><br></code></pre></td></tr></table></figure></li></ol><p>考虑： 那接受客户需求分发到具体产品创建这个过程应该用什么好呢？</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工厂方法模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.建造者模式</title>
    <link href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5-python%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5-python%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>对于建造者模式，它主要是将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。适用于那些产品对象的内部结构比较复杂。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>产品类：包含组成的各个部件</li><li>抽象建造者：包含创建各个部件的抽象方法的接口，还包含一个返回复杂产品的方法。</li><li>具体建造者： 实现builder接口， 完成复杂产品的各个部件的具体创建方法。</li><li>指挥者： 他调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>模式的应用场景建造者模式区别于工厂模式的是针对复杂对象的创建。也就是说创建简单对象的时候使用工厂模式就行，而创建复杂对象可以考虑建造者模式。当需要创建的产品具备复杂创建过程时，可以抽出共性创建工程，然后交友具体实现类自定义创建流程，使得同样得创建行为可以生产出不同产品，分离了创建与表示，使创建产品的灵活性大大增加。</p><ol><li>相同的方法，不同的执行顺序，产生不同的结果。</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的结果又不相同。</li><li>产品类非常复杂，或者产品类中不同的调用顺序产生不同的作用。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>封装性好，构造和表示分离</li><li>扩展性好，各个具体的构建者相互独立，有利于系统的解耦</li><li>客户端不必知道产品内部组成的细节，建造者可以对创建过程细化，而不对其他模块产生任何影响，便于控制细节风险。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>产品的组成部分必须相同，这限制了其使用范围</li><li>如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大。</li></ol><h2 id="和工厂模式比较"><a href="#和工厂模式比较" class="headerlink" title="和工厂模式比较"></a>和工厂模式比较</h2><p>建造者和工厂模式的关注点不同： 建造者模式注重零部件的组装过程，而工厂方法更注重零部件的创建不关心产品的组成部分，但两者可以结合使用。</p><p class="note note-primary">建造者（Builder）模式在应用过程中可以根据需要改变，如果创建的产品种类只有一种，只需要一个具体建造者，这时可以省略掉抽象建造者，甚至可以省略掉指挥者角色。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p> 计算机由CPU、GPU、内存、硬盘组成</p><ol><li><p>定义产品类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__cpu = <span class="hljs-string">&quot;&quot;</span><br>        self.__gpu = <span class="hljs-string">&quot;&quot;</span><br>        self.__memery = <span class="hljs-string">&quot;&quot;</span><br>        self.__hd = <span class="hljs-string">&quot;&quot;</span><br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setCput</span>(<span class="hljs-params">self, cpu</span>):<br>       self.__cpu = cpu<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getCput</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> self.__cpu<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setGpu</span>(<span class="hljs-params">self, gpu</span>):<br>       self.__gpu = gpu<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getGpu</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> self.__gpu<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setMemery</span>(<span class="hljs-params">self, memery</span>):<br>       self.__memery = memery<br>   <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getMemery</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> self.__memery<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">setHd</span>(<span class="hljs-params">self, hd</span>):<br>       self.__hd = hd<br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">getHd</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> self.__hd<br>   <br>   <span class="hljs-comment"># 返回产品内容</span><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;computer, [&#123;cpu: %s&#125;, &#123;gpu: %s&#125;, &#123;memery: %s&#125;, &#123;hd: %s&#125;]&quot;</span> %(self.__cpu, self.__gpu, self.__memery, self.__hd)<br></code></pre></td></tr></table></figure></li><li><p>定义抽象建造者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Builders</span>(metaclass=abc.ABCMeta):<br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setCpu</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setGpu</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setMemery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setHd</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod   </span><span class="hljs-comment"># 返回产品对象 </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure></li><li><p>具体建造者（具体的创建过程）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 高版本</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HightBuilders</span>(<span class="hljs-title class_ inherited__">Builders</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.computer = Computer()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setCpu</span>(<span class="hljs-params">self</span>):<br>        self.computer.setCpu(<span class="hljs-string">&quot;i7 8750Hk&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setGpu</span>(<span class="hljs-params">self</span>):<br>        self.computer.setGpu(<span class="hljs-string">&quot;RTX2080&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setMemery</span>(<span class="hljs-params">self</span>):<br>        self.computer.setMemery(<span class="hljs-string">&quot;32G&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setHd</span>(<span class="hljs-params">self</span>):<br>        self.computer.setHd(<span class="hljs-string">&quot;512ssd + 2T机械&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.computer<br><br><br><span class="hljs-comment"># 低版本</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LowBuilders</span>(<span class="hljs-title class_ inherited__">Builders</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.computer = Computer()<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setCpu</span>(<span class="hljs-params">self</span>):<br>        self.computer.setCpu(<span class="hljs-string">&quot;i5 7500u&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setGpu</span>(<span class="hljs-params">self</span>):<br>        self.computer.setGpu(<span class="hljs-string">&quot;gtx640mx&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setMemery</span>(<span class="hljs-params">self</span>):<br>        self.computer.setMemery(<span class="hljs-string">&quot;8G&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setHd</span>(<span class="hljs-params">self</span>):<br>        self.computer.setHd(<span class="hljs-string">&quot;1T机械&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.computer<br><br></code></pre></td></tr></table></figure></li><li><p>指挥者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self, cb</span>):<br>        cb.setCpu()<br>        cb.setGpu()<br>        cb.setMemery()<br>        cb.setHd()<br>        <span class="hljs-keyword">return</span> cb.build()<br></code></pre></td></tr></table></figure></li><li><p>客户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    director = Director()<br>    <span class="hljs-comment"># 我需要一个高配置的电脑</span><br>    hightBuilders = HightBuilders()<br>    <span class="hljs-comment"># 指挥者去让建造者建造</span><br>    computer = director.build(hightBuilders)<br>    <span class="hljs-built_in">print</span>(computer)<br>    <span class="hljs-comment"># 我需要一个低配置的电脑</span><br>    lowBuilders = LowBuilders()<br>    computer2 = director.build(lowBuilders)<br>    <span class="hljs-built_in">print</span>(computer2)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建造者模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.单例模式</title>
    <link href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2-python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2-python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个类只有会创建一个实例.</p><p>注意： 一个类只会被创建一次，每次创建的时候，这个对象属性会被刷新。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>需要频繁创建的一些类，使用单例可以降低系统的内存压力（日志对象）</li><li>某类要求只生成一个对象的时候</li><li>某些创建实例时占用资源较多，或实例化耗时较长，且经常使用</li><li>对于一些控制硬件级别的操作，或者从系统上来讲应当是单一控制逻辑的操作，如果有多个实例，则系统会完全乱套。</li><li>当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>单例模式可以保证内存中只有一个实例，减少内存开销</li><li>避免对资源的多重占用</li><li>设置全局访问点，可以优化和共享资源访问</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>单例模式一般没有接口，扩展困难，只能修改原来代码，违背开闭原则。</li><li>在并发测试中，不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。</li><li>单例模式在功能代码通常卸载一个类中，如果功能涉及不合理，很容易违背单一职责原理。</li></ol><h2 id="实现（python）"><a href="#实现（python）" class="headerlink" title="实现（python）"></a>实现（python）</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>在python中使用 import 引入对象使用，则就是单例模式（因为在第一次使用import加载后，会生成 .pyc文件，后面读都只会读这个文件），且这种方式是线程安全的。</p><p>在test1.py中，创建一个类并实例化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>test = Test()<br></code></pre></td></tr></table></figure><p>在test2.py中引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> test1 <span class="hljs-keyword">import</span> test<br></code></pre></td></tr></table></figure><h3 id="方法2-代码实现（线程安全）"><a href="#方法2-代码实现（线程安全）" class="headerlink" title="方法2 代码实现（线程安全）"></a>方法2 代码实现（线程安全）</h3><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 判断 该类中有没有_instance属性</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, <span class="hljs-string">&quot;_instance&quot;</span>):<br>            <span class="hljs-comment"># 没有的话创建,并继承成原本的 __new__ 方法</span><br>            cls._instance = <span class="hljs-built_in">super</span>(Singleton, cls).__new__(cls)<br>        <span class="hljs-keyword">return</span> cls._instance<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br></code></pre></td></tr></table></figure><p>测试(多线程测试)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">arg</span>):<br>    obj = Singleton()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-built_in">id</span>(obj))<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    t = threading.Thread(target=task,args=[i,])<br>    t.start()<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br>id 1966023888<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 简介</title>
    <link href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式可以多个组合使用使其更适合项目</p><p>不可过度使用设计模式（避免降低代码可读性）</p><h2 id="六大设计原则："><a href="#六大设计原则：" class="headerlink" title="六大设计原则："></a>六大设计原则：</h2><ol><li>单一职责原则：一个类只负责完成一个职责或者功能。（不要设计大而全的类，而是要设计力度小，功能单一的类） <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">类中的代码行数、函数、属性过多。<br>类的依赖过多<br>私有方法过多<br>类中大量的方法都在集中操作几个属性<br></code></pre></td></tr></table></figure></li><li>开放封闭原则： 软件中的对象、类、模块和函数对扩展应该是开放的，但对于修改是封闭的。这意味着应该用抽象定义结构，用具体实现扩展细节，以此确保软件系统开发和维护过程的可靠性。 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">需求发生变化时，应该采取扩展的方式实现，而不是修改。<br></code></pre></td></tr></table></figure></li><li>里氏替换原则：子类能够替换程序中对象出现的任何地方，并且保证原来的程序的逻辑行为不变及正确性不被破坏。 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">替换：面向对象语言所支持的多态特性。<br>通过接口就可以知道方法的行为。<br></code></pre></td></tr></table></figure></li><li>接口分离原则：要为各个类建立他们需要的专用接口，而不是视图去建立一个很庞大的接口供所有依赖它的类去调用。</li><li>依赖倒置原则：在设计代码架构时，高层模块不应该依赖低层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">高层模块抽取低层模块的共性，形成抽象。<br>保持始终依赖抽象，而不是实现。（例如一些类，参数或者属性的类型应该是抽象接口，而不是具体实现）<br></code></pre></td></tr></table></figure></li><li>迪米特法则：一个类/模块对其他类/模块有越少的了解越好。简单来说迪米特法则想要表达的思想就是：不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">可以通过第三方转发的方式进行调用，降低类与类之间的耦合。<br></code></pre></td></tr></table></figure></li></ol><h2 id="创建型模式（5）"><a href="#创建型模式（5）" class="headerlink" title="创建型模式（5）"></a>创建型模式（5）</h2><pre><code class="hljs">对象实例化的模式，创建型模式用于解耦对象的实例化过程</code></pre><ol><li>单例模式， <a href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2-python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">go</a></li><li>工厂方法模式, <a href="/2023/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3-python%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">go</a></li><li>抽象工厂模式, <a href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4-python%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/">go</a></li><li>建造者模式, <a href="/2023/04/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5-python%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/">go</a></li><li>原型模式, <a href="/2023/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6-python%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/">go</a></li></ol><h2 id="结构型模式（7）"><a href="#结构型模式（7）" class="headerlink" title="结构型模式（7）"></a>结构型模式（7）</h2><pre><code class="hljs">把类或对象结合在一起形成一个更大的结构. 前者采用继承来组织接口和类，后者采用关联来组合对象</code></pre><ol><li>代理模式，<a href="/2023/04/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7-python%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">go</a></li><li>适配器模式，<a href="/2023/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8-python%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">go</a></li><li>桥接模式，<a href="/2023/04/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9-python%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/">go</a></li><li>装饰器模式，<a href="/2023/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10-python%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/">go</a></li><li>外观模式，<a href="/2023/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11-python%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">go</a></li><li>享元模式，<a href="/2023/04/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12-python%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/">go</a></li><li>组合模式，<a href="/2023/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13-python%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">go</a></li></ol><h2 id="行为型模式（11）"><a href="#行为型模式（11）" class="headerlink" title="行为型模式（11）"></a>行为型模式（11）</h2><pre><code class="hljs">类和对象如何交互，行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成一个任务。涉及划分责任和算法。</code></pre><ol><li><p>观察者模式, <a href="/2023/05/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14-python%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>模板模式, <a href="/2023/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15-python%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>策略模式, <a href="/2023/07/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16-python%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>责任链模式, <a href="/2023/07/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17-python%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>命令模式, <a href="/2023/07/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18-python%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>中介者模式, <a href="/2023/07/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19-python%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>状态模式, <a href="/2023/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20-python%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>备忘录模式, <a href="/2023/08/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21-python%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>迭代器模式, <a href="/2023/08/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22-python%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>解释器模式, <a href="/2023/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23-python%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/">go</a></p></li><li><p>访问者模式, <a href="/2023/08/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/24-python%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/">go</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. Cookie、session、token</title>
    <link href="/2023/04/04/web%E7%9F%A5%E8%AF%86/1.cookie%E3%80%81session%E3%80%81token%E4%BA%86%E8%A7%A3/"/>
    <url>/2023/04/04/web%E7%9F%A5%E8%AF%86/1.cookie%E3%80%81session%E3%80%81token%E4%BA%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>在应用程序中，一个用户的所有请求应该属于一个用户，简单说，一个用户进行的所有操作，都应该是对当前用户的操作。但是目前很多程序使用的是 HTTP 协议，但是HTTP协议本身是无状态的协议，简单说，一次请求结束，客户端和服务器就断开连接了，下一次请求就无法跟踪会话，所以诞生了 Cookie、Session、Token集中方式。</li></ul><h2 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1.Cookie"></a>1.Cookie</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul><li>服务器给客户端办法了一个通行证，每个人，访问的时候呆着通行证，那这样每次访问服务器就知道是谁访问的了，那么每次做的操作就是对通行证上这个人进行操作。</li><li>Cookie是存储在客户端的一种机制，如果浏览器禁止Cookie那么，这种认证方式就失效了</li><li>Cookie 除了可以使用字符串，也可以是用base64图片 </li></ul><h3 id="1-2-流程"><a href="#1-2-流程" class="headerlink" title="1.2 流程"></a>1.2 流程</h3><ul><li>在用户第一次请求或者登录服务器的时候，服务器给客户端发一个cookie（服务端会将Cookie加入到HttpResponse中），下次请求的时候带上这个cookie就行(一般浏览器会自己帮着处理这个过程)。</li></ul><h3 id="1-3-Cookie有效期"><a href="#1-3-Cookie有效期" class="headerlink" title="1.3 Cookie有效期"></a>1.3 Cookie有效期</h3><ul><li>Cookie的maxAge决定着Cookie的有效期，单位为秒（Second)</li><li>maxAge 值为-1 则表示，只在当前窗口以及子窗口有效。</li></ul><h3 id="1-4-Cookie的安全性"><a href="#1-4-Cookie的安全性" class="headerlink" title="1.4 Cookie的安全性"></a>1.4 Cookie的安全性</h3><ul><li>可以设置Cookie的secure属性为true。浏览器只会在HTTPS和SSL等安全协议中传输此类Cookie。</li><li>可以对Cookie进行加密，防止别人伪造Cookie(如果是明文，别人随便伪造一个通行证，去访问服务器，就存在安全隐患)</li></ul><h3 id="1-5-禁止跨域访问"><a href="#1-5-禁止跨域访问" class="headerlink" title="1.5 禁止跨域访问"></a>1.5 禁止跨域访问</h3><ul><li>例如百度的网站不会使用谷歌的Cookie</li></ul><h3 id="1-6-应用"><a href="#1-6-应用" class="headerlink" title="1.6 应用"></a>1.6 应用</h3><ul><li>Cookies最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。另一个重要应用场合是“购物车”之类处理。用户可能会在一段时间内在同一家网站的不同页面中选择不同的商品，这些信息都会写入Cookies，以便在最后付款时提取信息。</li></ul><h2 id="2-Session"><a href="#2-Session" class="headerlink" title="2.Session"></a>2.Session</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ul><li>Session是服务器端使用的一种记录客户端状态的机制，使用上比Cookie简单一些，相应的也增加了服务器的存储压力。</li></ul><h3 id="2-2-流程"><a href="#2-2-流程" class="headerlink" title="2.2 流程"></a>2.2 流程</h3><ul><li>用户在第一次请求服务器的时候，会创建一个此用户的session（用户信息一般时Object所以会存放一些用户信息，现在一般存放在 mysql、redis 或者其他的存储系统中), 然后把session_id 放回给客户端</li><li>客户端在以后访问服务器的时候带着session_id，服务器拿到session_id 后会根据session_id，去取session信息，检验用户是否登录然后拿到用户相应信息</li></ul><h3 id="2-3-session的有效期"><a href="#2-3-session的有效期" class="headerlink" title="2.3 session的有效期"></a>2.3 session的有效期</h3><ul><li>一般超过时间没有访问的session会从服务器删除们就失效了</li></ul><h3 id="2-4-使用"><a href="#2-4-使用" class="headerlink" title="2.4 使用"></a>2.4 使用</h3><ul><li>结合Cookie来一起使用，Cookie 存放 Session_id信息，服务器存放Session信息</li><li>URL地址重定向（解决浏览器禁止使用token的情况）, 将Session_id 写到url中然后重新访问带这个session_id的地址，来做到带着session_id访问。</li></ul><h3 id="2-5-优点"><a href="#2-5-优点" class="headerlink" title="2.5 优点"></a>2.5 优点</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">session</span> 传输数据少，数据结构灵活：相较于 cookie 来说，<span class="hljs-keyword">session</span> 存储在服务端，客户端仅保留换取 <span class="hljs-keyword">session</span> 的用户凭证。因此传输数据量小，速度快。<br><span class="hljs-keyword">session</span> 更安全：检验、生成、验证都是在服务端按照指定规则完成，而 cookie 可能被客户端通过 js 代码篡改。<br></code></pre></td></tr></table></figure><h3 id="2-6缺点"><a href="#2-6缺点" class="headerlink" title="2.6缺点"></a>2.6缺点</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">服务器是有状态的。多台后端服务器无法共享 <span class="hljs-keyword">session</span>。解决方法是，专门准备一台 <span class="hljs-keyword">session</span> 服务器，关于 <span class="hljs-keyword">session</span> 的所有操作都交给它来调用。而服务器之间的调用，可以走内网 ip，走 RPC 调用（不走 http）这个方法没试过，一般我都是将 <span class="hljs-keyword">session</span>存到redis或者mysql中。<br></code></pre></td></tr></table></figure><h2 id="3-Token"><a href="#3-Token" class="headerlink" title="3.Token"></a>3.Token</h2><h3 id="3-1-流程"><a href="#3-1-流程" class="headerlink" title="3.1 流程"></a>3.1 流程</h3><ul><li>用户第一次登录后，服务器会生成一个Token 令牌，并将此令牌返回给客户端，以后访问，客户端带上这个Token就行</li><li>Token 一般时用户信息加上签名和过期时间进行的加密数据。<h3 id="3-2-有效期"><a href="#3-2-有效期" class="headerlink" title="3.2 有效期"></a>3.2 有效期</h3></li><li>一般有效期由token中的过期时间来决定</li><li>在有效器到期后可以采用refresh token 流程来更新过期时间（用token里的信息加上新的过期时间进行加密）<h3 id="3-3-优点："><a href="#3-3-优点：" class="headerlink" title="3.3 优点："></a>3.3 优点：</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">支持跨域访问: Cookie是不允许垮域访问的，<span class="hljs-keyword">token</span>支持；<br><br>无状态： <span class="hljs-keyword">token</span>无状态，session有状态的；<br><br>去耦: 不需要绑定到一个特定的身份验证方案。<span class="hljs-keyword">Token</span>可以在任何地方生成，只要在 你的API被调用的时候， 你可以进行<span class="hljs-keyword">Token</span>生成调用即可；<br><br>更适用于移动应用: Cookie不支持手机端访问的；<br><br>性能: 在网络传输的过程中，性能更好；<br><br>基于标准化: 你的API可以采用标准化的 JSON Web <span class="hljs-keyword">Token</span> (JWT). 这个标准已经存在 多个后端库（.<span class="hljs-keyword">NET</span>, Ruby, Java,Python, PHP）和多家公司的支持（如： Firebase,Google, Microsoft）。<br></code></pre></td></tr></table></figure><h3 id="3-4-缺点"><a href="#3-4-缺点" class="headerlink" title="3.4 缺点"></a>3.4 缺点</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">占带宽，正常情况下要比 session_id 更大，需要消耗更多流量，挤占更多带宽，假如你的网站每月有 <span class="hljs-number">10</span> 万次的浏览器，就意味着要多开销几十兆的流量。听起来并不多，但日积月累也是不小一笔开销。实际上，许多人会在 <span class="hljs-keyword">JWT </span>中存储的信息会更多；<br><br>无法在服务端注销，那么久很难解决劫持问题；<br><br>性能问题，<span class="hljs-keyword">JWT </span>的卖点之一就是加密签名，由于这个特性，接收方得以验证 <span class="hljs-keyword">JWT </span>是否有效且被信任。但是大多数 Web 身份认证应用中，<span class="hljs-keyword">JWT </span>都会被存储到 Cookie 中，这就是说你有了两个层面的签名。听着似乎很牛逼，但是没有任何优势，为此，你需要花费两倍的 CPU 开销来验证签名。对于有着严格性能要求的 Web 应用，这并不理想，尤其对于单线程环境。<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>web知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cookie</tag>
      
      <tag>session</tag>
      
      <tag>token</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2. 位运算</title>
    <link href="/2023/04/03/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2023/04/03/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>从现代计算机中所有的数据二进制的形式存储在设备中。即 0、1 两种状态，计算机对二进制数据进行的运算(+、-、*、/)都是叫位运算，即将符号位共同参与运算的运算。</p><table><thead><tr><th>符号</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为0，相异为1</td></tr><tr><td>~</td><td>取反</td><td>0变1，1变0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td></tr></tbody></table><h1 id="一、异或-概念"><a href="#一、异或-概念" class="headerlink" title="一、异或 概念"></a>一、异或 概念</h1><ol><li>异或的符号 ^</li><li>如果两个数不相同，则异或的结果为1；如果两个数相同，则异或的结果为0</li><li>基础异或概念 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> ^ <span class="hljs-number">0</span> # 结果为<span class="hljs-number">1</span><br><span class="hljs-attribute">1</span> ^ <span class="hljs-number">1</span> # 结果为<span class="hljs-number">0</span><br><span class="hljs-attribute">x</span> ^ (-<span class="hljs-number">1</span>) = -x<br></code></pre></td></tr></table></figure></li><li>异或是二进制的数按位进行异或 <figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">例如：5 ^ 3<br>就是101 ^<span class="hljs-number"> 011 </span><br>按位置：<span class="hljs-number"> 1 </span>^<span class="hljs-number"> 0 </span>= 1,<span class="hljs-number"> 0 </span>^<span class="hljs-number"> 1 </span>= 1,<span class="hljs-number"> 1 </span>^<span class="hljs-number"> 1 </span>=<span class="hljs-number"> 0 </span>结果为<span class="hljs-number"> 110 </span>转10进制 6<br></code></pre></td></tr></table></figure></li><li>满足交换律，结合律，自反率（ A ^ B ^ B = A ^ 0 = A）</li><li>将两个数异或的结果与其中一个数异或能得到另一个结果：例如 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span> = <span class="hljs-number">4</span><br><span class="hljs-attribute">b</span> = <span class="hljs-number">5</span><br><span class="hljs-attribute">z</span> = x ^ b <br><span class="hljs-attribute">z</span> ^ b = x = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="题目一、-a-3-b-2-交换两个数"><a href="#题目一、-a-3-b-2-交换两个数" class="headerlink" title="题目一、 a = 3,  b = 2 交换两个数"></a>题目一、 a = 3,  b = 2 交换两个数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">方法一: 用异或实现<br>    <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span> <br>    <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span><br>    <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span><br>    解析：<br>        使用原理<span class="hljs-number">6</span><br>        <span class="hljs-number">1</span>. 两个数异或<br>            <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span><br>        <span class="hljs-number">2</span>. 与其中一个异或能拿到另一个数<br>            <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span> (这个时候b存的就是之前a的值)<br>        <span class="hljs-number">3</span>. <span class="hljs-selector-tag">b</span> 在与<span class="hljs-selector-tag">a</span> 异或<br>            <span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span> (这个时候, <span class="hljs-selector-tag">a</span> 拿到的就是b之前的值，因为b现在里边存的是之前a的值)<br>            <br>方法二： python<br>    <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">b</span>, a<br></code></pre></td></tr></table></figure><h2 id="题目二、一个数组一个数出现奇数次，其他都出现了偶数次，怎么找到并打印。"><a href="#题目二、一个数组一个数出现奇数次，其他都出现了偶数次，怎么找到并打印。" class="headerlink" title="题目二、一个数组一个数出现奇数次，其他都出现了偶数次，怎么找到并打印。"></a>题目二、一个数组一个数出现奇数次，其他都出现了偶数次，怎么找到并打印。</h2><p>解题思路: 0 跟任何数异或都是任何数，两个相同的数异或为0，哪所有数异或数</p><p>```<br>data_list = [11,11,22,22,33]<br>tmp = 0<br>for i in data_list:<br>    tmp ^= i</p><p>print(tmp)</p>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1 机器学习sklearn 库</title>
    <link href="/2023/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/1.sklearn%E5%BA%93/"/>
    <url>/2023/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/1.sklearn%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>集成了常用的机器学习方法，再进行机器学习任务时，并不需要实现算法，简单调用即可</li><li>在 Numpy、Scipy 和 matplotlib 的基础上开发</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>安装 Numpy</li><li>安装 Scipy 库</li><li>安装 matplotlib 库</li><li>安装 sklearn 库</li></ol><h2 id="基础了解"><a href="#基础了解" class="headerlink" title="基础了解"></a>基础了解</h2><ol><li>数据集</li></ol><p><img src="/images/sk_data_info.png" alt="数据集"></p><ol start="2"><li>主要功能<br>用于完成分类任务、回归任务、聚类任务、降维任务、模型选择以及数据预处理。</li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sklearn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 单链表</title>
    <link href="/2023/03/23/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/03/23/%E7%AE%97%E6%B3%95/1.%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>由node节点连起来形成的结构，节点包含当前节点的值(value)和下一节点(next)</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>内存空间不需要连续，不需要先申请所需的内存，用的时候添加节点就行</li><li>插入和删除操作时,只需要修改被删除节点上一节点的链接地址，不需要移动元素，改进了顺序存储结构中插入删除操作需要移动大量数据的问题</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>失去了顺序存储结构随机存取的特性。<br>例如： 不能通过表达式计算被查找元素的内存地址，每一次查找都是从头开始遍历， （顺序表根据下标取值的时间复杂度是 O(1)）</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>创建链表</li><li>头插</li><li>尾插</li><li>查询</li><li>删除</li><li>链表反转</li><li>判断长度<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>) -&gt; <span class="hljs-title class_">None</span>:<br>        <span class="hljs-variable language_">self</span>.value = value<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-keyword">next</span> = <span class="hljs-title class_">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NodeList</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, <span class="hljs-symbol">node:</span> <span class="hljs-title class_">Node</span>=<span class="hljs-title class_">None</span></span>) -&gt; <span class="hljs-title class_">None</span>:<br>        <span class="hljs-variable language_">self</span>.head = node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.<span class="hljs-symbol">head:</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">append_node</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;尾插</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            value (_type_): _description_</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        node = <span class="hljs-title class_">Node</span>(value)<br>        index_node = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-comment"># 找到最后一个节点</span><br>        <span class="hljs-keyword">while</span> index_node.<span class="hljs-symbol">next:</span><br>            index_node = index_node.<span class="hljs-keyword">next</span><br>        index_node.<span class="hljs-keyword">next</span> = node<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.head<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">head_insert</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, value</span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;头插</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            value (_type_): _description_</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        node = <span class="hljs-title class_">Node</span>(value)<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-variable language_">self</span>.head = node<br>            <span class="hljs-keyword">return</span> <br>        <span class="hljs-comment"># 将链表添加到改节点后边</span><br>        node.<span class="hljs-keyword">next</span> = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-comment"># 让该节点做头</span><br>        <span class="hljs-variable language_">self</span>.head = node<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.head<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_node_list</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;链表反转</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 上一个</span><br>        pre_node = <span class="hljs-title class_">None</span><br>        <span class="hljs-comment"># 下一个</span><br>        next_node = <span class="hljs-title class_">None</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.<span class="hljs-symbol">head:</span><br>            <span class="hljs-comment"># 取出来下一个用来存储</span><br>            next_node = <span class="hljs-variable language_">self</span>.head.<span class="hljs-keyword">next</span><br>            <span class="hljs-comment"># 将head 指向上一个</span><br>            <span class="hljs-variable language_">self</span>.head.<span class="hljs-keyword">next</span> = pre_node<br>            <span class="hljs-comment"># 上一个 往后移</span><br>            pre_node = <span class="hljs-variable language_">self</span>.head<br>            <span class="hljs-comment"># head 往后移</span><br>            <span class="hljs-variable language_">self</span>.head = next_node<br>        <span class="hljs-comment"># 头到左后 None 了再回去一个</span><br>        <span class="hljs-variable language_">self</span>.head = pre_node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;遍历节点</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span><br>        index_node = <span class="hljs-variable language_">self</span>.head<br>        <span class="hljs-keyword">while</span> <span class="hljs-symbol">index_node:</span><br>            print(index_node.value, <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot; &quot;</span>)<br>            index_node = index_node.<span class="hljs-keyword">next</span><br>        print()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    node = <span class="hljs-title class_">Node</span>(<span class="hljs-number">1</span>)<br>    nodeList = <span class="hljs-title class_">NodeList</span>(node)<br>    <span class="hljs-comment"># 添加节点</span><br>    nodeList.append_node(<span class="hljs-number">2</span>)<br>    nodeList.append_node(<span class="hljs-number">3</span>)<br>    nodeList.append_node(<span class="hljs-number">4</span>)<br>    <span class="hljs-comment"># 遍历输出</span><br>    nodeList.traverse()<br>    <span class="hljs-comment"># 头插</span><br>    nodeList.head_insert(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 遍历输出</span><br>    nodeList.traverse()<br>    <span class="hljs-comment"># 反转节点</span><br>    nodeList.reverse_node_list()<br>    <span class="hljs-comment"># 输出</span><br>    nodeList.traverse()<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
      <tag>单链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
